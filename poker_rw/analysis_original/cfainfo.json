{"nodes":{"0":{"no":0,"func":"Poker_create"},"1":{"no":1,"func":"Poker_create"},"3":{"no":3,"func":"Poker_create"},"4":{"no":4,"func":"Poker_create"},"5":{"no":5,"func":"Poker_create"},"6":{"no":6,"func":"Poker_create"},"7":{"no":7,"func":"Poker_create"},"8":{"no":8,"func":"Poker_create"},"9":{"no":9,"func":"Poker_create"},"10":{"no":10,"func":"Poker_create"},"11":{"no":11,"func":"Poker_create"},"12":{"no":12,"func":"Poker_create"},"13":{"no":13,"func":"Poker_create"},"14":{"no":14,"func":"Poker_create"},"15":{"no":15,"func":"Poker_create"},"16":{"no":16,"func":"Poker_create"},"19":{"no":19,"func":"Poker_destroy"},"20":{"no":20,"func":"Poker_destroy"},"21":{"no":21,"func":"Poker_destroy"},"22":{"no":22,"func":"Poker_destroy"},"23":{"no":23,"func":"Poker_destroy"},"24":{"no":24,"func":"Poker_destroy"},"26":{"no":26,"func":"Poker_print"},"27":{"no":27,"func":"Poker_print"},"29":{"no":29,"func":"Poker_print"},"30":{"no":30,"func":"Poker_print"},"32":{"no":32,"func":"Poker_print"},"33":{"no":33,"func":"Poker_print"},"34":{"no":34,"func":"Poker_print"},"35":{"no":35,"func":"Poker_print"},"36":{"no":36,"func":"Poker_print"},"37":{"no":37,"func":"Poker_print"},"38":{"no":38,"func":"Poker_print"},"39":{"no":39,"func":"Poker_print"},"40":{"no":40,"func":"Poker_print"},"41":{"no":41,"func":"Poker_print"},"42":{"no":42,"func":"Poker_print"},"43":{"no":43,"func":"Poker_print"},"44":{"no":44,"func":"Poker_print"},"45":{"no":45,"func":"Poker_print"},"46":{"no":46,"func":"Poker_print"},"47":{"no":47,"func":"Poker_print"},"48":{"no":48,"func":"Poker_print"},"49":{"no":49,"func":"Poker_print"},"50":{"no":50,"func":"Poker_print"},"52":{"no":52,"func":"Poker_print"},"53":{"no":53,"func":"Poker_print"},"54":{"no":54,"func":"Poker_print"},"56":{"no":56,"func":"Poker_print"},"57":{"no":57,"func":"Poker_print"},"58":{"no":58,"func":"Poker_print"},"60":{"no":60,"func":"Poker_print"},"61":{"no":61,"func":"Poker_print"},"62":{"no":62,"func":"Poker_print"},"64":{"no":64,"func":"Poker_print"},"65":{"no":65,"func":"Poker_print"},"66":{"no":66,"func":"Poker_print"},"68":{"no":68,"func":"Poker_print"},"69":{"no":69,"func":"Poker_print"},"71":{"no":71,"func":"main"},"72":{"no":72,"func":"main"},"76":{"no":76,"func":"main"},"77":{"no":77,"func":"main"},"78":{"no":78,"func":"main"},"79":{"no":79,"func":"main"},"80":{"no":80,"func":"main"},"81":{"no":81,"func":"main"},"82":{"no":82,"func":"main"},"83":{"no":83,"func":"main"},"84":{"no":84,"func":"main"},"86":{"no":86,"func":"main"},"87":{"no":87,"func":"main"},"88":{"no":88,"func":"main"},"89":{"no":89,"func":"main"},"90":{"no":90,"func":"main"},"92":{"no":92,"func":"main"},"93":{"no":93,"func":"main"},"94":{"no":94,"func":"main"},"95":{"no":95,"func":"main"},"96":{"no":96,"func":"main"},"97":{"no":97,"func":"main"},"98":{"no":98,"func":"main"},"99":{"no":99,"func":"main"},"100":{"no":100,"func":"main"},"101":{"no":101,"func":"main"},"102":{"no":102,"func":"main"},"103":{"no":103,"func":"main"},"104":{"no":104,"func":"main"},"105":{"no":105,"func":"main"}},"edges":{"82->80":{"file":"<none>","line":0,"source":82,"type":"BlankEdge","stmt":"","target":80},"7->8":{"file":"tf\/poker_rw.c","line":2297,"source":7,"type":"StatementEdge","stmt":"Num = Num - 1;","target":8},"80->71":{"file":"tf\/poker_rw.c","line":2368,"source":80,"type":"ReturnStatementEdge","stmt":"return 1;","target":71},"29->33":{"file":"tf\/poker_rw.c","line":2325,"source":29,"type":"AssumeEdge","stmt":"[!((pn->num) == 2)]","target":33},"27->29":{"file":"tf\/poker_rw.c","line":2323,"source":27,"type":"MultiEdge","stmt":"Function start dummy edge switch (pn->num)","target":29},"37->39":{"file":"tf\/poker_rw.c","line":2325,"source":37,"type":"AssumeEdge","stmt":"[!((pn->num) == 5)]","target":39},"37->38":{"file":"tf\/poker_rw.c","line":2325,"source":37,"type":"AssumeEdge","stmt":"[(pn->num) == 5]","target":38},"72->76":{"file":"<multiple files>","line":0,"source":72,"type":"MultiEdge","stmt":"INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 { int __val[2]; }; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 { unsigned int __wch; char __wchb[4]; }; struct __anon_type_2 { int __count; union __anon_type_1 __value; }; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 { __off_t __pos; __mbstate_t __state; }; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 { __off64_t __pos; __mbstate_t __state; }; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t; typedef void _IO_lock_t; struct _IO_marker { struct _IO_marker *_next; struct _IO_FILE *_sbuf; int _pos; }; enum __codecvt_result { __codecvt_ok = 0, __codecvt_partial = 1, __codecvt_error = 2, __codecvt_noconv = 3 }; struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40UL]; }; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t ); size_t _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef int wchar_t; struct __anon_type_5 { int quot; int rem; }; typedef struct __anon_type_5 div_t; struct __anon_type_6 { long int quot; long int rem; }; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 { long long int quot; long long int rem; }; typedef struct __anon_type_7 lldiv_t; size_t __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 { unsigned long int __val[32UL]; }; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec { __time_t tv_sec; long int tv_nsec; }; struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 { __fd_mask __fds_bits[32]; }; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 { char __size[56]; long int __align; }; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list { struct __pthread_internal_list *__prev; struct __pthread_internal_list *__next; }; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s { int __lock; unsigned int __count; int __owner; unsigned int __nusers; int __kind; int __spins; __pthread_list_t __list; }; union __anon_type_11 { struct __pthread_mutex_s __data; char __size[40]; long int __align; }; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 { char __size[4]; int __align; }; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 { int __lock; unsigned int __futex; unsigned long long int __total_seq; unsigned long long int __wakeup_seq; unsigned long long int __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq; }; union __anon_type_14 { struct __anon_type_13 __data; char __size[48]; long long int __align; }; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 { char __size[4]; int __align; }; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 { int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long int __pad1; unsigned long int __pad2; unsigned int __flags; }; union __anon_type_17 { struct __anon_type_16 __data; char __size[56]; long int __align; }; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 { char __size[8]; long int __align; }; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 { char __size[32]; long int __align; }; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 { char __size[4]; int __align; }; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data { int32_t *fptr; int32_t *rptr; int32_t *state; int rand_type; int rand_deg; int rand_sep; int32_t *end_ptr; }; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data { unsigned short int __x[3]; unsigned short int __old_x[3]; unsigned short int __c; unsigned short int __init; unsigned long long int __a; }; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t div(int __numer, int __denom); ldiv_t ldiv(long int __numer, long int __denom); lldiv_t lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct { struct locale_data *__locales[13]; const unsigned short int *__ctype_b; const int *__ctype_tolower; const int *__ctype_toupper; const char *__names[13]; }; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t strcspn(const char *__s, const char *__reject); size_t strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t strlen(const char *__s); size_t strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __clock_t clock_t; struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; long int tm_gmtoff; const char *tm_zone; }; struct itimerspec { struct timespec it_interval; struct timespec it_value; }; struct sigevent; clock_t clock(); time_t time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t mktime(struct tm *__tp); size_t strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t timegm(struct tm *__tp); time_t timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); int Num = 4; struct Poker { char *name; int num; }; struct Poker * Poker_create(char *name, int num); void Poker_destroy(struct Poker *pn); void Poker_print(struct Poker *pn); int main(int argc, char *argv[]); Function start dummy edge struct Poker *fst; struct Poker *sec; char *pname[] = { \\\"Diamond\\\", \\\"Spade\\\", \\\"Heart\\\", \\\"Club\\\" };","target":76},"29->32":{"file":"tf\/poker_rw.c","line":2325,"source":29,"type":"AssumeEdge","stmt":"[(pn->num) == 2]","target":32},"40->42":{"file":"tf\/poker_rw.c","line":2326,"source":40,"type":"BlankEdge","stmt":"fall through","target":42},"47->48":{"file":"tf\/poker_rw.c","line":2327,"source":47,"type":"AssumeEdge","stmt":"[(pn->num) == 10]","target":48},"47->49":{"file":"tf\/poker_rw.c","line":2327,"source":47,"type":"AssumeEdge","stmt":"[!((pn->num) == 10)]","target":49},"93->101":{"file":"tf\/poker_rw.c","line":2348,"source":93,"type":"StatementEdge","stmt":"__CPAchecker_TMP_0 = 1;","target":101},"15->16":{"file":"tf\/poker_rw.c","line":2303,"source":15,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >= 0\\\", \\\"tf\/poker_rw.c\\\", 30, \\\"__PRETTY_FUNCTION__\\\");","target":16},"35->37":{"file":"tf\/poker_rw.c","line":2325,"source":35,"type":"AssumeEdge","stmt":"[!((pn->num) == 4)]","target":37},"35->36":{"file":"tf\/poker_rw.c","line":2325,"source":35,"type":"AssumeEdge","stmt":"[(pn->num) == 4]","target":36},"13->15":{"file":"tf\/poker_rw.c","line":2303,"source":13,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":15},"13->14":{"file":"tf\/poker_rw.c","line":2303,"source":13,"type":"AssumeEdge","stmt":"[Num >= 0]","target":14},"60->62":{"file":"tf\/poker_rw.c","line":2331,"source":60,"type":"StatementEdge","stmt":"printf(\\\"%s, %s\\n\\\", pn->name, \\\"Q\\\");","target":62},"92->93":{"file":"tf\/poker_rw.c","line":2348,"source":92,"type":"AssumeEdge","stmt":"[!(sec == 0)]","target":93},"92->94":{"file":"tf\/poker_rw.c","line":2348,"source":92,"type":"AssumeEdge","stmt":"[sec == 0]","target":94},"57->60":{"file":"tf\/poker_rw.c","line":2331,"source":57,"type":"AssumeEdge","stmt":"[(pn->num) == 12]","target":60},"23->24":{"file":"tf\/poker_rw.c","line":2315,"source":23,"type":"StatementEdge","stmt":"free(pn);","target":24},"57->61":{"file":"tf\/poker_rw.c","line":2331,"source":57,"type":"AssumeEdge","stmt":"[!((pn->num) == 12)]","target":61},"12->13":{"file":"tf\/poker_rw.c","line":2302,"source":12,"type":"StatementEdge","stmt":"Num = Num - 1;","target":13},"104->105":{"file":"tf\/poker_rw.c","line":2359,"source":104,"type":"CallToReturnEdge","stmt":"Poker_destroy(sec);","target":105},"45->46":{"file":"tf\/poker_rw.c","line":2327,"source":45,"type":"AssumeEdge","stmt":"[(pn->num) == 9]","target":46},"100->92":{"file":"tf\/poker_rw.c","line":2348,"source":100,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_5 == 0)]","target":92},"5->7":{"file":"tf\/poker_rw.c","line":2294,"source":5,"type":"StatementEdge","stmt":"0;","target":7},"45->47":{"file":"tf\/poker_rw.c","line":2327,"source":45,"type":"AssumeEdge","stmt":"[!((pn->num) == 9)]","target":47},"56->58":{"file":"tf\/poker_rw.c","line":2330,"source":56,"type":"StatementEdge","stmt":"printf(\\\"%s, %s\\n\\\", pn->name, \\\"J\\\");","target":58},"34->36":{"file":"tf\/poker_rw.c","line":2325,"source":34,"type":"BlankEdge","stmt":"fall through","target":36},"100->94":{"file":"tf\/poker_rw.c","line":2348,"source":100,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_5 == 0]","target":94},"69->30":{"file":"tf\/poker_rw.c","line":2333,"source":69,"type":"BlankEdge","stmt":"break","target":30},"43->44":{"file":"tf\/poker_rw.c","line":2326,"source":43,"type":"AssumeEdge","stmt":"[(pn->num) == 8]","target":44},"43->45":{"file":"tf\/poker_rw.c","line":2326,"source":43,"type":"AssumeEdge","stmt":"[!((pn->num) == 8)]","target":45},"30->26":{"file":"<none>","line":0,"source":30,"type":"BlankEdge","stmt":"default return","target":26},"65->68":{"file":"<none>","line":0,"source":65,"type":"BlankEdge","stmt":"default","target":68},"76->77":{"file":"tf\/poker_rw.c","line":2342,"source":76,"type":"StatementEdge","stmt":"printf(\\\"Do you have time to play poker? 1 is Yes, to start\\n\\\");","target":77},"87->88":{"file":"tf\/poker_rw.c","line":2348,"source":87,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_2;","target":88},"79->82":{"file":"tf\/poker_rw.c","line":2346,"source":79,"type":"AssumeEdge","stmt":"[!(play > 0)]","target":82},"98->99":{"file":"tf\/poker_rw.c","line":2348,"source":98,"type":"DeclarationEdge","stmt":"struct Poker *__CPAchecker_TMP_5;","target":99},"79->81":{"file":"tf\/poker_rw.c","line":2346,"source":79,"type":"AssumeEdge","stmt":"[play > 0]","target":81},"10->11":{"file":"tf\/poker_rw.c","line":2298,"source":10,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >= 0\\\", \\\"tf\/poker_rw.c\\\", 25, \\\"__PRETTY_FUNCTION__\\\");","target":11},"8->9":{"file":"tf\/poker_rw.c","line":2298,"source":8,"type":"AssumeEdge","stmt":"[Num >= 0]","target":9},"21->22":{"file":"tf\/poker_rw.c","line":2311,"source":21,"type":"StatementEdge","stmt":"free(pn->name);","target":22},"58->30":{"file":"tf\/poker_rw.c","line":2330,"source":58,"type":"BlankEdge","stmt":"break","target":30},"39->41":{"file":"tf\/poker_rw.c","line":2326,"source":39,"type":"AssumeEdge","stmt":"[!((pn->num) == 6)]","target":41},"52->54":{"file":"tf\/poker_rw.c","line":2329,"source":52,"type":"StatementEdge","stmt":"printf(\\\"%s, %s\\n\\\", pn->name, \\\"A\\\");","target":54},"39->40":{"file":"tf\/poker_rw.c","line":2326,"source":39,"type":"AssumeEdge","stmt":"[(pn->num) == 6]","target":40},"32->34":{"file":"tf\/poker_rw.c","line":2325,"source":32,"type":"BlankEdge","stmt":"fall through","target":34},"41->43":{"file":"tf\/poker_rw.c","line":2326,"source":41,"type":"AssumeEdge","stmt":"[!((pn->num) == 7)]","target":43},"41->42":{"file":"tf\/poker_rw.c","line":2326,"source":41,"type":"AssumeEdge","stmt":"[(pn->num) == 7]","target":42},"62->30":{"file":"tf\/poker_rw.c","line":2331,"source":62,"type":"BlankEdge","stmt":"break","target":30},"9->11":{"file":"tf\/poker_rw.c","line":2298,"source":9,"type":"StatementEdge","stmt":"0;","target":11},"48->50":{"file":"tf\/poker_rw.c","line":2327,"source":48,"type":"StatementEdge","stmt":"printf(\\\"%s, %d\\n\\\", pn->name, pn->num);","target":50},"96->97":{"file":"tf\/poker_rw.c","line":2348,"source":96,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_4;","target":97},"61->65":{"file":"tf\/poker_rw.c","line":2332,"source":61,"type":"AssumeEdge","stmt":"[!((pn->num) == 13)]","target":65},"3->4":{"file":"tf\/poker_rw.c","line":2292,"source":3,"type":"StatementEdge","stmt":"pn = malloc(8);","target":4},"61->64":{"file":"tf\/poker_rw.c","line":2332,"source":61,"type":"AssumeEdge","stmt":"[(pn->num) == 13]","target":64},"54->30":{"file":"tf\/poker_rw.c","line":2329,"source":54,"type":"BlankEdge","stmt":"break","target":30},"16->0":{"file":"tf\/poker_rw.c","line":2305,"source":16,"type":"MultiEdge","stmt":"pn->num = num; return pn;","target":0},"84->102":{"file":"tf\/poker_rw.c","line":2353,"source":84,"type":"CallToReturnEdge","stmt":"Poker_print(fst);","target":102},"83->80":{"file":"<none>","line":0,"source":83,"type":"BlankEdge","stmt":"","target":80},"105->83":{"file":"<none>","line":0,"source":105,"type":"BlankEdge","stmt":"","target":83},"99->100":{"file":"tf\/poker_rw.c","line":2348,"source":99,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_5 = Poker_create(pname[__CPAchecker_TMP_3 % 4], (__CPAchecker_TMP_4 % 13) + 1);","target":100},"101->84":{"file":"tf\/poker_rw.c","line":2348,"source":101,"type":"AssumeEdge","stmt":"[!(fst == 0)]","target":84},"24->19":{"file":"tf\/poker_rw.c","line":2317,"source":24,"type":"MultiEdge","stmt":"Num = Num + 1; default return","target":19},"101->83":{"file":"tf\/poker_rw.c","line":2348,"source":101,"type":"AssumeEdge","stmt":"[fst == 0]","target":83},"68->69":{"file":"tf\/poker_rw.c","line":2333,"source":68,"type":"StatementEdge","stmt":"printf(\\\"%s, %d\\n\\\", pn->name, 1);","target":69},"6->7":{"file":"tf\/poker_rw.c","line":2294,"source":6,"type":"StatementEdge","stmt":"__assert_fail(\\\"pn != ((void *)0)\\\", \\\"tf\/poker_rw.c\\\", 21, \\\"__PRETTY_FUNCTION__\\\");","target":7},"36->38":{"file":"tf\/poker_rw.c","line":2325,"source":36,"type":"BlankEdge","stmt":"fall through","target":38},"78->79":{"file":"tf\/poker_rw.c","line":2344,"source":78,"type":"StatementEdge","stmt":"scanf(\\\"%d\\\", &play);","target":79},"14->16":{"file":"tf\/poker_rw.c","line":2303,"source":14,"type":"StatementEdge","stmt":"0;","target":16},"66->30":{"file":"tf\/poker_rw.c","line":2332,"source":66,"type":"BlankEdge","stmt":"break","target":30},"46->48":{"file":"tf\/poker_rw.c","line":2327,"source":46,"type":"BlankEdge","stmt":"fall through","target":48},"102->103":{"file":"tf\/poker_rw.c","line":2354,"source":102,"type":"CallToReturnEdge","stmt":"Poker_print(sec);","target":103},"81->86":{"file":"tf\/poker_rw.c","line":2348,"source":81,"type":"MultiEdge","stmt":"int __CPAchecker_TMP_0; int __CPAchecker_TMP_1;","target":86},"89->90":{"file":"tf\/poker_rw.c","line":2348,"source":89,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_0 = Poker_create(pname[__CPAchecker_TMP_1 % 4], (__CPAchecker_TMP_2 % 13) + 1);","target":90},"50->30":{"file":"tf\/poker_rw.c","line":2327,"source":50,"type":"BlankEdge","stmt":"break","target":30},"77->78":{"file":"tf\/poker_rw.c","line":2343,"source":77,"type":"DeclarationEdge","stmt":"int play;","target":78},"1->3":{"file":"tf\/poker_rw.c","line":2292,"source":1,"type":"MultiEdge","stmt":"Function start dummy edge struct Poker *pn;","target":3},"88->89":{"file":"tf\/poker_rw.c","line":2348,"source":88,"type":"StatementEdge","stmt":"__CPAchecker_TMP_2 = rand();","target":89},"97->98":{"file":"tf\/poker_rw.c","line":2348,"source":97,"type":"StatementEdge","stmt":"__CPAchecker_TMP_4 = rand();","target":98},"103->104":{"file":"tf\/poker_rw.c","line":2358,"source":103,"type":"CallToReturnEdge","stmt":"Poker_destroy(fst);","target":104},"11->12":{"file":"tf\/poker_rw.c","line":2300,"source":11,"type":"StatementEdge","stmt":"pn->name = strdup(name);","target":12},"33->35":{"file":"tf\/poker_rw.c","line":2325,"source":33,"type":"AssumeEdge","stmt":"[!((pn->num) == 3)]","target":35},"33->34":{"file":"tf\/poker_rw.c","line":2325,"source":33,"type":"AssumeEdge","stmt":"[(pn->num) == 3]","target":34},"22->23":{"file":"tf\/poker_rw.c","line":2313,"source":22,"type":"StatementEdge","stmt":"Num = Num + 1;","target":23},"90->95":{"file":"tf\/poker_rw.c","line":2348,"source":90,"type":"MultiEdge","stmt":"fst = __CPAchecker_TMP_0; int __CPAchecker_TMP_3;","target":95},"44->46":{"file":"tf\/poker_rw.c","line":2327,"source":44,"type":"BlankEdge","stmt":"fall through","target":46},"49->53":{"file":"tf\/poker_rw.c","line":2329,"source":49,"type":"AssumeEdge","stmt":"[!((pn->num) == 1)]","target":53},"8->10":{"file":"tf\/poker_rw.c","line":2298,"source":8,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":10},"20->21":{"file":"<none>","line":0,"source":20,"type":"BlankEdge","stmt":"Function start dummy edge","target":21},"38->40":{"file":"tf\/poker_rw.c","line":2326,"source":38,"type":"BlankEdge","stmt":"fall through","target":40},"53->56":{"file":"tf\/poker_rw.c","line":2330,"source":53,"type":"AssumeEdge","stmt":"[(pn->num) == 11]","target":56},"53->57":{"file":"tf\/poker_rw.c","line":2330,"source":53,"type":"AssumeEdge","stmt":"[!((pn->num) == 11)]","target":57},"49->52":{"file":"tf\/poker_rw.c","line":2329,"source":49,"type":"AssumeEdge","stmt":"[(pn->num) == 1]","target":52},"4->5":{"file":"tf\/poker_rw.c","line":2294,"source":4,"type":"AssumeEdge","stmt":"[pn != ((void *)0)]","target":5},"4->6":{"file":"tf\/poker_rw.c","line":2294,"source":4,"type":"AssumeEdge","stmt":"[!(pn != ((void *)0))]","target":6},"95->96":{"file":"tf\/poker_rw.c","line":2348,"source":95,"type":"StatementEdge","stmt":"__CPAchecker_TMP_3 = rand();","target":96},"94->101":{"file":"tf\/poker_rw.c","line":2348,"source":94,"type":"StatementEdge","stmt":"__CPAchecker_TMP_0 = 0;","target":101},"86->87":{"file":"tf\/poker_rw.c","line":2348,"source":86,"type":"StatementEdge","stmt":"__CPAchecker_TMP_1 = rand();","target":87},"64->66":{"file":"tf\/poker_rw.c","line":2332,"source":64,"type":"StatementEdge","stmt":"printf(\\\"%s, %s\\n\\\", pn->name, \\\"K\\\");","target":66},"42->44":{"file":"tf\/poker_rw.c","line":2326,"source":42,"type":"BlankEdge","stmt":"fall through","target":44}}}