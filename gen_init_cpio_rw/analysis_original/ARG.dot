digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N378\nmain entry\nABS0: true" id="1"]
381 [label="381 @ N386\nmain" id="381"]
382 [label="382 @ N387\nmain" id="382"]
384 [fillcolor="cornflowerblue" label="384 @ N388\nmain\nABS19" id="384"]
385 [label="385 @ N391\nmain" id="385"]
386 [label="386 @ N392\nmain" id="386"]
387 [label="387 @ N393\nmain" id="387"]
389 [label="389 @ N394\nmain" id="389"]
390 [label="390 @ N397\nmain" id="390"]
392 [label="392 @ N401\nmain" id="392"]
394 [label="394 @ N411\nmain" id="394"]
399 [label="399 @ N412\nmain" id="399"]
400 [label="400 @ N374\nusage entry" id="400"]
401 [label="401 @ N375\nusage" id="401"]
402 [label="402 @ N376\nusage" id="402"]
403 [label="403 @ N373\nusage exit" id="403"]
404 [label="404 @ N414\nmain" id="404"]
405 [label="405 @ N415\nmain" id="405"]
407 [label="407 @ N417\nmain" id="407"]
410 [label="410 @ N418\nmain" id="410"]
406 [label="406 @ N416\nmain" id="406"]
396 [label="396 @ N413\nmain" id="396"]
424 [label="424 @ N398\nmain" id="424"]
426 [fillcolor="green" label="426 @ N388\nmain\nABS20" id="426"]
393 [label="393 @ N410\nmain" id="393"]
391 [label="391 @ N400\nmain" id="391"]
411 [label="411 @ N402\nmain" id="411"]
416 [label="416 @ N404\nmain" id="416"]
417 [label="417 @ N406\nmain" id="417"]
418 [label="418 @ N374\nusage entry" id="418"]
419 [label="419 @ N375\nusage" id="419"]
420 [label="420 @ N376\nusage" id="420"]
421 [label="421 @ N373\nusage exit" id="421"]
422 [label="422 @ N407\nmain" id="422"]
413 [label="413 @ N405\nmain" id="413"]
414 [label="414 @ N403\nmain" id="414"]
388 [label="388 @ N395\nmain" id="388"]
427 [label="427 @ N390\nmain" id="427"]
429 [label="429 @ N420\nmain" id="429"]
435 [label="435 @ N428\nmain" id="435"]
436 [label="436 @ N429\nmain" id="436"]
438 [label="438 @ N427\nmain" id="438"]
439 [label="439 @ N433\nmain" id="439"]
441 [label="441 @ N431\nmain" id="441"]
454 [label="454 @ N425\nmain" id="454"]
456 [fillcolor="cornflowerblue" label="456 @ N441\nmain\nABS21" id="456"]
457 [label="457 @ N445\nmain" id="457"]
458 [label="458 @ N446\nmain" id="458"]
459 [label="459 @ N449\nmain" id="459"]
461 [label="461 @ N450\nmain" id="461"]
462 [label="462 @ N455\nmain" id="462"]
464 [label="464 @ N453\nmain" id="464"]
466 [label="466 @ N459\nmain" id="466"]
467 [label="467 @ N464\nmain" id="467"]
468 [label="468 @ N465\nmain" id="468"]
470 [label="470 @ N462\nmain" id="470"]
471 [label="471 @ N469\nmain" id="471"]
476 [label="476 @ N467\nmain" id="476"]
478 [fillcolor="cornflowerblue" label="478 @ N473\nmain\nABS22" id="478"]
860 [label="860 @ N476\nmain" id="860"]
890 [label="890 @ N488\nmain" id="890"]
902 [fillcolor="green" label="902 @ N441\nmain\nABS42" id="902"]
871 [label="871 @ N489\nmain" id="871"]
878 [label="878 @ N490\nmain" id="878"]
480 [label="480 @ N475\nmain" id="480"]
481 [label="481 @ N480\nmain" id="481"]
482 [label="482 @ N481\nmain" id="482"]
484 [label="484 @ N478\nmain" id="484"]
486 [fillcolor="green" label="486 @ N473\nmain\nABS23" id="486"]
483 [label="483 @ N479\nmain" id="483"]
488 [label="488 @ N496\nmain" id="488"]
490 [label="490 @ N499\nmain" id="490"]
492 [label="492 @ N502\nmain" id="492"]
494 [label="494 @ N505\nmain" id="494"]
496 [label="496 @ N508\nmain" id="496"]
498 [label="498 @ N511\nmain" id="498"]
817 [label="817 @ N484\nmain" id="817"]
853 [label="853 @ N482\nmain" id="853"]
829 [label="829 @ N483\nmain" id="829"]
835 [label="835 @ N485\nmain" id="835"]
841 [label="841 @ N486\nmain" id="841"]
497 [label="497 @ N510\nmain" id="497"]
500 [label="500 @ N150\ncpio_mksock_line entry" id="500"]
501 [label="501 @ N152\ncpio_mksock_line" id="501"]
502 [label="502 @ N120\ncpio_mkgeneric_line entry" id="502"]
503 [label="503 @ N129\ncpio_mkgeneric_line" id="503"]
504 [label="504 @ N130\ncpio_mkgeneric_line" id="504"]
506 [label="506 @ N127\ncpio_mkgeneric_line" id="506"]
507 [label="507 @ N133\ncpio_mkgeneric_line" id="507"]
508 [label="508 @ N103\ncpio_mkgeneric entry" id="508"]
509 [label="509 @ N105\ncpio_mkgeneric" id="509"]
513 [label="513 @ N106\ncpio_mkgeneric" id="513"]
514 [label="514 @ N113\ncpio_mkgeneric" id="514"]
515 [label="515 @ N114\ncpio_mkgeneric" id="515"]
516 [label="516 @ N115\ncpio_mkgeneric" id="516"]
517 [label="517 @ N41\npush_hdr entry" id="517"]
518 [label="518 @ N42\npush_hdr" id="518"]
519 [label="519 @ N43\npush_hdr" id="519"]
520 [label="520 @ N40\npush_hdr exit" id="520"]
521 [label="521 @ N116\ncpio_mkgeneric" id="521"]
522 [label="522 @ N20\npush_rest entry" id="522"]
523 [label="523 @ N22\npush_rest" id="523"]
524 [label="524 @ N23\npush_rest" id="524"]
525 [label="525 @ N25\npush_rest" id="525"]
526 [label="526 @ N26\npush_rest" id="526"]
527 [label="527 @ N27\npush_rest" id="527"]
529 [fillcolor="cornflowerblue" label="529 @ N30\npush_rest\nABS24" id="529"]
531 [label="531 @ N31\npush_rest" id="531"]
532 [label="532 @ N33\npush_rest" id="532"]
534 [fillcolor="green" label="534 @ N30\npush_rest\nABS25" id="534"]
530 [label="530 @ N32\npush_rest" id="530"]
535 [label="535 @ N19\npush_rest exit" id="535"]
536 [label="536 @ N117\ncpio_mkgeneric" id="536"]
537 [label="537 @ N102\ncpio_mkgeneric exit" id="537"]
538 [label="538 @ N134\ncpio_mkgeneric_line" id="538"]
539 [label="539 @ N135\ncpio_mkgeneric_line" id="539"]
542 [label="542 @ N119\ncpio_mkgeneric_line exit" id="542"]
544 [label="544 @ N153\ncpio_mksock_line" id="544"]
546 [label="546 @ N149\ncpio_mksock_line exit" id="546"]
548 [label="548 @ N512\nmain" id="548"]
550 [label="550 @ N484\nmain" id="550"]
843 [label="843 @ N482\nmain" id="843"]
854 [label="854 @ N476\nmain" id="854"]
880 [label="880 @ N488\nmain" id="880"]
892 [fillcolor="green" label="892 @ N441\nmain\nABS37" id="892"]
861 [label="861 @ N489\nmain" id="861"]
873 [label="873 @ N490\nmain" id="873"]
819 [label="819 @ N483\nmain" id="819"]
830 [label="830 @ N485\nmain" id="830"]
836 [label="836 @ N486\nmain" id="836"]
510 [label="510 @ N107\ncpio_mkgeneric" id="510"]
505 [label="505 @ N128\ncpio_mkgeneric_line" id="505"]
540 [label="540 @ N131\ncpio_mkgeneric_line" id="540"]
541 [label="541 @ N135\ncpio_mkgeneric_line" id="541"]
543 [label="543 @ N119\ncpio_mkgeneric_line exit" id="543"]
545 [label="545 @ N153\ncpio_mksock_line" id="545"]
547 [label="547 @ N149\ncpio_mksock_line exit" id="547"]
549 [label="549 @ N512\nmain" id="549"]
495 [label="495 @ N507\nmain" id="495"]
553 [label="553 @ N138\ncpio_mkdir_line entry" id="553"]
554 [label="554 @ N140\ncpio_mkdir_line" id="554"]
555 [label="555 @ N120\ncpio_mkgeneric_line entry" id="555"]
556 [label="556 @ N129\ncpio_mkgeneric_line" id="556"]
557 [label="557 @ N130\ncpio_mkgeneric_line" id="557"]
559 [label="559 @ N127\ncpio_mkgeneric_line" id="559"]
560 [label="560 @ N133\ncpio_mkgeneric_line" id="560"]
561 [label="561 @ N103\ncpio_mkgeneric entry" id="561"]
562 [label="562 @ N105\ncpio_mkgeneric" id="562"]
566 [label="566 @ N106\ncpio_mkgeneric" id="566"]
567 [label="567 @ N113\ncpio_mkgeneric" id="567"]
568 [label="568 @ N114\ncpio_mkgeneric" id="568"]
569 [label="569 @ N115\ncpio_mkgeneric" id="569"]
570 [label="570 @ N41\npush_hdr entry" id="570"]
571 [label="571 @ N42\npush_hdr" id="571"]
572 [label="572 @ N43\npush_hdr" id="572"]
573 [label="573 @ N40\npush_hdr exit" id="573"]
574 [label="574 @ N116\ncpio_mkgeneric" id="574"]
575 [label="575 @ N20\npush_rest entry" id="575"]
576 [label="576 @ N22\npush_rest" id="576"]
577 [label="577 @ N23\npush_rest" id="577"]
578 [label="578 @ N25\npush_rest" id="578"]
579 [label="579 @ N26\npush_rest" id="579"]
580 [label="580 @ N27\npush_rest" id="580"]
582 [fillcolor="cornflowerblue" label="582 @ N30\npush_rest\nABS26" id="582"]
584 [label="584 @ N31\npush_rest" id="584"]
585 [label="585 @ N33\npush_rest" id="585"]
587 [fillcolor="green" label="587 @ N30\npush_rest\nABS27" id="587"]
583 [label="583 @ N32\npush_rest" id="583"]
588 [label="588 @ N19\npush_rest exit" id="588"]
589 [label="589 @ N117\ncpio_mkgeneric" id="589"]
590 [label="590 @ N102\ncpio_mkgeneric exit" id="590"]
591 [label="591 @ N134\ncpio_mkgeneric_line" id="591"]
592 [label="592 @ N135\ncpio_mkgeneric_line" id="592"]
595 [label="595 @ N119\ncpio_mkgeneric_line exit" id="595"]
597 [label="597 @ N141\ncpio_mkdir_line" id="597"]
599 [label="599 @ N137\ncpio_mkdir_line exit" id="599"]
601 [label="601 @ N509\nmain" id="601"]
603 [label="603 @ N484\nmain" id="603"]
845 [label="845 @ N482\nmain" id="845"]
855 [label="855 @ N476\nmain" id="855"]
882 [label="882 @ N488\nmain" id="882"]
894 [fillcolor="green" label="894 @ N441\nmain\nABS38" id="894"]
863 [label="863 @ N489\nmain" id="863"]
874 [label="874 @ N490\nmain" id="874"]
821 [label="821 @ N483\nmain" id="821"]
831 [label="831 @ N485\nmain" id="831"]
837 [label="837 @ N486\nmain" id="837"]
563 [label="563 @ N107\ncpio_mkgeneric" id="563"]
558 [label="558 @ N128\ncpio_mkgeneric_line" id="558"]
593 [label="593 @ N131\ncpio_mkgeneric_line" id="593"]
594 [label="594 @ N135\ncpio_mkgeneric_line" id="594"]
596 [label="596 @ N119\ncpio_mkgeneric_line exit" id="596"]
598 [label="598 @ N141\ncpio_mkdir_line" id="598"]
600 [label="600 @ N137\ncpio_mkdir_line exit" id="600"]
602 [label="602 @ N509\nmain" id="602"]
493 [label="493 @ N504\nmain" id="493"]
606 [label="606 @ N85\ncpio_mkslink_line entry" id="606"]
607 [label="607 @ N95\ncpio_mkslink_line" id="607"]
608 [label="608 @ N96\ncpio_mkslink_line" id="608"]
610 [label="610 @ N93\ncpio_mkslink_line" id="610"]
611 [label="611 @ N63\ncpio_mkslink entry" id="611"]
612 [label="612 @ N65\ncpio_mkslink" id="612"]
616 [label="616 @ N66\ncpio_mkslink" id="616"]
617 [label="617 @ N73\ncpio_mkslink" id="617"]
618 [label="618 @ N74\ncpio_mkslink" id="618"]
619 [label="619 @ N75\ncpio_mkslink" id="619"]
620 [label="620 @ N76\ncpio_mkslink" id="620"]
621 [label="621 @ N77\ncpio_mkslink" id="621"]
622 [label="622 @ N41\npush_hdr entry" id="622"]
623 [label="623 @ N42\npush_hdr" id="623"]
624 [label="624 @ N43\npush_hdr" id="624"]
625 [label="625 @ N40\npush_hdr exit" id="625"]
626 [label="626 @ N78\ncpio_mkslink" id="626"]
627 [label="627 @ N1\npush_string entry" id="627"]
628 [label="628 @ N3\npush_string" id="628"]
629 [label="629 @ N4\npush_string" id="629"]
630 [label="630 @ N5\npush_string" id="630"]
631 [label="631 @ N6\npush_string" id="631"]
632 [label="632 @ N7\npush_string" id="632"]
633 [label="633 @ N0\npush_string exit" id="633"]
634 [label="634 @ N79\ncpio_mkslink" id="634"]
635 [label="635 @ N10\npush_pad entry" id="635"]
637 [fillcolor="cornflowerblue" label="637 @ N12\npush_pad\nABS28" id="637"]
639 [label="639 @ N13\npush_pad" id="639"]
640 [label="640 @ N15\npush_pad" id="640"]
642 [fillcolor="green" label="642 @ N12\npush_pad\nABS29" id="642"]
638 [label="638 @ N14\npush_pad" id="638"]
643 [label="643 @ N9\npush_pad exit" id="643"]
644 [label="644 @ N80\ncpio_mkslink" id="644"]
645 [label="645 @ N1\npush_string entry" id="645"]
646 [label="646 @ N3\npush_string" id="646"]
647 [label="647 @ N4\npush_string" id="647"]
648 [label="648 @ N5\npush_string" id="648"]
649 [label="649 @ N6\npush_string" id="649"]
650 [label="650 @ N7\npush_string" id="650"]
651 [label="651 @ N0\npush_string exit" id="651"]
652 [label="652 @ N81\ncpio_mkslink" id="652"]
653 [label="653 @ N10\npush_pad entry" id="653"]
655 [fillcolor="cornflowerblue" label="655 @ N12\npush_pad\nABS30" id="655"]
657 [label="657 @ N13\npush_pad" id="657"]
658 [label="658 @ N15\npush_pad" id="658"]
660 [fillcolor="green" label="660 @ N12\npush_pad\nABS31" id="660"]
656 [label="656 @ N14\npush_pad" id="656"]
661 [label="661 @ N9\npush_pad exit" id="661"]
662 [label="662 @ N82\ncpio_mkslink" id="662"]
663 [label="663 @ N62\ncpio_mkslink exit" id="663"]
664 [label="664 @ N99\ncpio_mkslink_line" id="664"]
665 [label="665 @ N100\ncpio_mkslink_line" id="665"]
668 [label="668 @ N84\ncpio_mkslink_line exit" id="668"]
670 [label="670 @ N506\nmain" id="670"]
672 [label="672 @ N484\nmain" id="672"]
847 [label="847 @ N482\nmain" id="847"]
856 [label="856 @ N476\nmain" id="856"]
884 [label="884 @ N488\nmain" id="884"]
896 [fillcolor="green" label="896 @ N441\nmain\nABS39" id="896"]
865 [label="865 @ N489\nmain" id="865"]
875 [label="875 @ N490\nmain" id="875"]
823 [label="823 @ N483\nmain" id="823"]
832 [label="832 @ N485\nmain" id="832"]
838 [label="838 @ N486\nmain" id="838"]
613 [label="613 @ N67\ncpio_mkslink" id="613"]
609 [label="609 @ N94\ncpio_mkslink_line" id="609"]
666 [label="666 @ N97\ncpio_mkslink_line" id="666"]
667 [label="667 @ N100\ncpio_mkslink_line" id="667"]
669 [label="669 @ N84\ncpio_mkslink_line exit" id="669"]
671 [label="671 @ N506\nmain" id="671"]
491 [label="491 @ N501\nmain" id="491"]
675 [label="675 @ N303\ncpio_mkfile_line entry" id="675"]
676 [label="676 @ N317\ncpio_mkfile_line" id="676"]
677 [label="677 @ N318\ncpio_mkfile_line" id="677"]
679 [label="679 @ N315\ncpio_mkfile_line" id="679"]
686 [label="686 @ N323\ncpio_mkfile_line" id="686"]
704 [label="704 @ N321\ncpio_mkfile_line" id="704"]
709 [label="709 @ N371\ncpio_mkfile_line" id="709"]
710 [label="710 @ N302\ncpio_mkfile_line exit" id="710"]
711 [label="711 @ N503\nmain" id="711"]
681 [label="681 @ N324\ncpio_mkfile_line" id="681"]
682 [label="682 @ N325\ncpio_mkfile_line" id="682"]
683 [label="683 @ N326\ncpio_mkfile_line" id="683"]
685 [label="685 @ N322\ncpio_mkfile_line" id="685"]
687 [label="687 @ N332\ncpio_mkfile_line" id="687"]
688 [label="688 @ N333\ncpio_mkfile_line" id="688"]
689 [label="689 @ N334\ncpio_mkfile_line" id="689"]
691 [label="691 @ N330\ncpio_mkfile_line" id="691"]
692 [label="692 @ N335\ncpio_mkfile_line" id="692"]
694 [label="694 @ N337\ncpio_mkfile_line" id="694"]
693 [label="693 @ N336\ncpio_mkfile_line" id="693"]
695 [label="695 @ N338\ncpio_mkfile_line" id="695"]
696 [label="696 @ N339\ncpio_mkfile_line" id="696"]
697 [label="697 @ N340\ncpio_mkfile_line" id="697"]
698 [label="698 @ N341\ncpio_mkfile_line" id="698"]
699 [label="699 @ N342\ncpio_mkfile_line" id="699"]
701 [fillcolor="cornflowerblue" label="701 @ N344\ncpio_mkfile_line\nABS32: false" id="701"]
690 [label="690 @ N331\ncpio_mkfile_line" id="690"]
702 [label="702 @ N368\ncpio_mkfile_line" id="702"]
678 [label="678 @ N316\ncpio_mkfile_line" id="678"]
707 [label="707 @ N319\ncpio_mkfile_line" id="707"]
489 [label="489 @ N498\nmain" id="489"]
714 [label="714 @ N144\ncpio_mkpipe_line entry" id="714"]
715 [label="715 @ N146\ncpio_mkpipe_line" id="715"]
716 [label="716 @ N120\ncpio_mkgeneric_line entry" id="716"]
717 [label="717 @ N129\ncpio_mkgeneric_line" id="717"]
718 [label="718 @ N130\ncpio_mkgeneric_line" id="718"]
720 [label="720 @ N127\ncpio_mkgeneric_line" id="720"]
721 [label="721 @ N133\ncpio_mkgeneric_line" id="721"]
722 [label="722 @ N103\ncpio_mkgeneric entry" id="722"]
723 [label="723 @ N105\ncpio_mkgeneric" id="723"]
727 [label="727 @ N106\ncpio_mkgeneric" id="727"]
728 [label="728 @ N113\ncpio_mkgeneric" id="728"]
729 [label="729 @ N114\ncpio_mkgeneric" id="729"]
730 [label="730 @ N115\ncpio_mkgeneric" id="730"]
731 [label="731 @ N41\npush_hdr entry" id="731"]
732 [label="732 @ N42\npush_hdr" id="732"]
733 [label="733 @ N43\npush_hdr" id="733"]
734 [label="734 @ N40\npush_hdr exit" id="734"]
735 [label="735 @ N116\ncpio_mkgeneric" id="735"]
736 [label="736 @ N20\npush_rest entry" id="736"]
737 [label="737 @ N22\npush_rest" id="737"]
738 [label="738 @ N23\npush_rest" id="738"]
739 [label="739 @ N25\npush_rest" id="739"]
740 [label="740 @ N26\npush_rest" id="740"]
741 [label="741 @ N27\npush_rest" id="741"]
743 [fillcolor="cornflowerblue" label="743 @ N30\npush_rest\nABS33" id="743"]
745 [label="745 @ N31\npush_rest" id="745"]
746 [label="746 @ N33\npush_rest" id="746"]
748 [fillcolor="green" label="748 @ N30\npush_rest\nABS34" id="748"]
744 [label="744 @ N32\npush_rest" id="744"]
749 [label="749 @ N19\npush_rest exit" id="749"]
750 [label="750 @ N117\ncpio_mkgeneric" id="750"]
751 [label="751 @ N102\ncpio_mkgeneric exit" id="751"]
752 [label="752 @ N134\ncpio_mkgeneric_line" id="752"]
753 [label="753 @ N135\ncpio_mkgeneric_line" id="753"]
756 [label="756 @ N119\ncpio_mkgeneric_line exit" id="756"]
758 [label="758 @ N147\ncpio_mkpipe_line" id="758"]
760 [label="760 @ N143\ncpio_mkpipe_line exit" id="760"]
762 [label="762 @ N500\nmain" id="762"]
764 [label="764 @ N484\nmain" id="764"]
849 [label="849 @ N482\nmain" id="849"]
857 [label="857 @ N476\nmain" id="857"]
886 [label="886 @ N488\nmain" id="886"]
898 [fillcolor="green" label="898 @ N441\nmain\nABS40" id="898"]
867 [label="867 @ N489\nmain" id="867"]
876 [label="876 @ N490\nmain" id="876"]
825 [label="825 @ N483\nmain" id="825"]
833 [label="833 @ N485\nmain" id="833"]
839 [label="839 @ N486\nmain" id="839"]
724 [label="724 @ N107\ncpio_mkgeneric" id="724"]
719 [label="719 @ N128\ncpio_mkgeneric_line" id="719"]
754 [label="754 @ N131\ncpio_mkgeneric_line" id="754"]
755 [label="755 @ N135\ncpio_mkgeneric_line" id="755"]
757 [label="757 @ N119\ncpio_mkgeneric_line exit" id="757"]
759 [label="759 @ N147\ncpio_mkpipe_line" id="759"]
761 [label="761 @ N143\ncpio_mkpipe_line exit" id="761"]
763 [label="763 @ N500\nmain" id="763"]
487 [label="487 @ N495\nmain" id="487"]
767 [label="767 @ N178\ncpio_mknod_line entry" id="767"]
768 [label="768 @ N190\ncpio_mknod_line" id="768"]
769 [label="769 @ N191\ncpio_mknod_line" id="769"]
771 [label="771 @ N188\ncpio_mknod_line" id="771"]
772 [label="772 @ N156\ncpio_mknod entry" id="772"]
773 [label="773 @ N158\ncpio_mknod" id="773"]
775 [label="775 @ N161\ncpio_mknod" id="775"]
778 [label="778 @ N159\ncpio_mknod" id="778"]
782 [label="782 @ N164\ncpio_mknod" id="782"]
783 [label="783 @ N171\ncpio_mknod" id="783"]
784 [label="784 @ N172\ncpio_mknod" id="784"]
785 [label="785 @ N173\ncpio_mknod" id="785"]
786 [label="786 @ N41\npush_hdr entry" id="786"]
787 [label="787 @ N42\npush_hdr" id="787"]
788 [label="788 @ N43\npush_hdr" id="788"]
789 [label="789 @ N40\npush_hdr exit" id="789"]
790 [label="790 @ N174\ncpio_mknod" id="790"]
791 [label="791 @ N20\npush_rest entry" id="791"]
792 [label="792 @ N22\npush_rest" id="792"]
793 [label="793 @ N23\npush_rest" id="793"]
794 [label="794 @ N25\npush_rest" id="794"]
795 [label="795 @ N26\npush_rest" id="795"]
796 [label="796 @ N27\npush_rest" id="796"]
798 [fillcolor="cornflowerblue" label="798 @ N30\npush_rest\nABS35" id="798"]
800 [label="800 @ N31\npush_rest" id="800"]
801 [label="801 @ N33\npush_rest" id="801"]
803 [fillcolor="green" label="803 @ N30\npush_rest\nABS36" id="803"]
799 [label="799 @ N32\npush_rest" id="799"]
804 [label="804 @ N19\npush_rest exit" id="804"]
805 [label="805 @ N175\ncpio_mknod" id="805"]
806 [label="806 @ N155\ncpio_mknod exit" id="806"]
807 [label="807 @ N194\ncpio_mknod_line" id="807"]
808 [label="808 @ N195\ncpio_mknod_line" id="808"]
811 [label="811 @ N177\ncpio_mknod_line exit" id="811"]
813 [label="813 @ N497\nmain" id="813"]
815 [label="815 @ N484\nmain" id="815"]
851 [label="851 @ N482\nmain" id="851"]
858 [label="858 @ N476\nmain" id="858"]
888 [label="888 @ N488\nmain" id="888"]
900 [fillcolor="green" label="900 @ N441\nmain\nABS41" id="900"]
869 [label="869 @ N489\nmain" id="869"]
877 [label="877 @ N490\nmain" id="877"]
827 [label="827 @ N483\nmain" id="827"]
834 [label="834 @ N485\nmain" id="834"]
840 [label="840 @ N486\nmain" id="840"]
779 [label="779 @ N165\ncpio_mknod" id="779"]
774 [label="774 @ N160\ncpio_mknod" id="774"]
770 [label="770 @ N189\ncpio_mknod_line" id="770"]
809 [label="809 @ N192\ncpio_mknod_line" id="809"]
810 [label="810 @ N195\ncpio_mknod_line" id="810"]
812 [label="812 @ N177\ncpio_mknod_line exit" id="812"]
814 [label="814 @ N497\nmain" id="814"]
472 [label="472 @ N468\nmain" id="472"]
474 [label="474 @ N470\nmain" id="474"]
469 [label="469 @ N463\nmain" id="469"]
904 [fillcolor="green" label="904 @ N441\nmain\nABS43" id="904"]
465 [label="465 @ N460\nmain" id="465"]
906 [fillcolor="green" label="906 @ N441\nmain\nABS44" id="906"]
463 [label="463 @ N454\nmain" id="463"]
907 [label="907 @ N456\nmain" id="907"]
908 [label="908 @ N443\nmain" id="908"]
910 [label="910 @ N491\nmain" id="910"]
909 [label="909 @ N492\nmain" id="909"]
911 [label="911 @ N46\ncpio_trailer entry" id="911"]
912 [label="912 @ N50\ncpio_trailer" id="912"]
913 [label="913 @ N51\ncpio_trailer" id="913"]
914 [label="914 @ N52\ncpio_trailer" id="914"]
915 [label="915 @ N41\npush_hdr entry" id="915"]
916 [label="916 @ N42\npush_hdr" id="916"]
917 [label="917 @ N43\npush_hdr" id="917"]
918 [label="918 @ N40\npush_hdr exit" id="918"]
919 [label="919 @ N53\ncpio_trailer" id="919"]
920 [label="920 @ N20\npush_rest entry" id="920"]
921 [label="921 @ N22\npush_rest" id="921"]
922 [label="922 @ N23\npush_rest" id="922"]
923 [label="923 @ N25\npush_rest" id="923"]
924 [label="924 @ N26\npush_rest" id="924"]
925 [label="925 @ N27\npush_rest" id="925"]
927 [fillcolor="cornflowerblue" label="927 @ N30\npush_rest\nABS45: false" id="927"]
460 [label="460 @ N451\nmain" id="460"]
929 [fillcolor="green" label="929 @ N441\nmain\nABS46" id="929"]
440 [label="440 @ N432\nmain" id="440"]
443 [label="443 @ N434\nmain" id="443"]
444 [label="444 @ N435\nmain" id="444"]
445 [label="445 @ N436\nmain" id="445"]
446 [label="446 @ N437\nmain" id="446"]
447 [label="447 @ N438\nmain" id="447"]
448 [label="448 @ N374\nusage entry" id="448"]
449 [label="449 @ N375\nusage" id="449"]
450 [label="450 @ N376\nusage" id="450"]
451 [label="451 @ N373\nusage exit" id="451"]
452 [label="452 @ N439\nmain" id="452"]
437 [label="437 @ N426\nmain" id="437"]
428 [label="428 @ N421\nmain" id="428"]
430 [label="430 @ N374\nusage entry" id="430"]
431 [label="431 @ N375\nusage" id="431"]
432 [label="432 @ N376\nusage" id="432"]
433 [label="433 @ N373\nusage exit" id="433"]
434 [label="434 @ N422\nmain" id="434"]
1 -> 381 [label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; typedef __intptr_t intptr_t; typedef __socklen_t socklen_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int lockf(int __fd, int __cmd, __off_t __len); int fdatasync(int __fildes); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); int * __errno_location(); enum  {   _ISupper = 256,   _ISlower = 512,   _ISalpha = 1024,   _ISdigit = 2048,   _ISxdigit = 4096,   _ISspace = 8192,   _ISprint = 16384,   _ISgraph = 32768,   _ISblank = 1,   _IScntrl = 2,   _ISpunct = 4,   _ISalnum = 8 } ; const unsigned short int ** __ctype_b_loc(); const __int32_t ** __ctype_tolower_loc(); const __int32_t ** __ctype_toupper_loc(); int isalnum(int); int isalpha(int); int iscntrl(int); int isdigit(int); int islower(int); int isgraph(int); int isprint(int); int ispunct(int); int isspace(int); int isupper(int); int isxdigit(int); int tolower(int __c); int toupper(int __c); int isblank(int); int isascii(int __c); int toascii(int __c); int _toupper(int); int _tolower(int); int isalnum_l(int, __locale_t ); int isalpha_l(int, __locale_t ); int iscntrl_l(int, __locale_t ); int isdigit_l(int, __locale_t ); int islower_l(int, __locale_t ); int isgraph_l(int, __locale_t ); int isprint_l(int, __locale_t ); int ispunct_l(int, __locale_t ); int isspace_l(int, __locale_t ); int isupper_l(int, __locale_t ); int isxdigit_l(int, __locale_t ); int isblank_l(int, __locale_t ); int __tolower_l(int __c, __locale_t __l); int tolower_l(int __c, __locale_t __l); int __toupper_l(int __c, __locale_t __l); int toupper_l(int __c, __locale_t __l); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 2; unsigned int offset = 0U; unsigned int ino = 721; time_t default_mtime = 0L; struct file_handler {   const char *type;   int (*handler)(const char *line); } ; void push_string(const char *name); void push_pad(); void push_rest(const char *name); void push_hdr(const char *s); void cpio_trailer(); int cpio_mkslink(const char *name, const char *target, unsigned int mode, uid_t uid, gid_t gid); int cpio_mkslink_line(const char *line); int cpio_mkgeneric(const char *name, unsigned int mode, uid_t uid, gid_t gid); enum generic_types {   GT_DIR = 0,   GT_PIPE = 1,   GT_SOCK = 2 } ; struct generic_type {   const char *type;   mode_t mode; } ; struct generic_type generic_type_table[] = { [0] = { .type = 'dir', .mode = 16384 }, [1] = { .type = 'pipe', .mode = 4096 }, [2] = { .type = 'sock', .mode = 49152 } }; int cpio_mkgeneric_line(const char *line, enum generic_types gt); int cpio_mkdir_line(const char *line); int cpio_mkpipe_line(const char *line); int cpio_mksock_line(const char *line); int cpio_mknod(const char *name, unsigned int mode, uid_t uid, gid_t gid, char dev_type, unsigned int maj, unsigned int min); int cpio_mknod_line(const char *line); int cpio_mkfile(const char *name, const char *location, unsigned int mode, uid_t uid, gid_t gid, unsigned int nlinks); char * cpio_replace_env(char *new_location); int cpio_mkfile_line(const char *line); void usage(const char *prog); struct file_handler file_handler_table[] = { { .type = 'file', .handler = &cpio_mkfile_line }, { .type = 'nod', .handler = &cpio_mknod_line }, { .type = 'dir', .handler = &cpio_mkdir_line }, { .type = 'slink', .handler = &cpio_mkslink_line }, { .type = 'pipe', .handler = &cpio_mkpipe_line }, { .type = 'sock', .handler = &cpio_mksock_line }, { .type = (void *)0, .handler = (void *)0 } }; int main(int argc, char *argv[]); Function start dummy edge FILE *cpio_list; char line[8242]; char *args; char *type; int ec = 0; int line_nr = 0; const char *filename;" id="1 -> 381"]
381 -> 382 [label="Line 4339: default_mtime = time((void *)0);" id="381 -> 382"]
382 -> 384 [label="Line 4340: while" id="382 -> 384"]
426 -> 384 [style="dashed" weight="0" label="covered by"]
384 -> 385 [label="Line 4340:  int opt;" id="384 -> 385"]
385 -> 386 [label="Line 4341: opt = getopt(argc, argv, 't:h');" id="385 -> 386"]
386 -> 387 [label="Line 4342: char *invalid;" id="386 -> 387"]
387 -> 388 [label="Line 4344: [opt == -1]" id="387 -> 388"]
387 -> 389 [label="Line 4344: [!(opt == -1)]" id="387 -> 389"]
389 -> 390 [label="Line 4346: switch (opt)" id="389 -> 390"]
390 -> 391 [label="Line 4347: [opt == 't']" id="390 -> 391"]
390 -> 392 [label="Line 4347: [!(opt == 't')]" id="390 -> 392"]
392 -> 393 [label="Line 4356: [opt == 'h']" id="392 -> 393"]
392 -> 394 [label="Line 4356: [!(opt == 'h')]" id="392 -> 394"]
394 -> 396 [label="Line 4357: [!(opt == '?')]" id="394 -> 396"]
394 -> 399 [label="Line 4357: [opt == '?']" id="394 -> 399"]
399 -> 400 [label="Line 4358: usage(argv[0])" id="399 -> 400"]
400 -> 401 [label="Line 0: Function start dummy edge" id="400 -> 401"]
401 -> 402 [label="Line 4263: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="401 -> 402"]
402 -> 403 [label="Line 0: default return" id="402 -> 403"]
403 -> 404 [label="Line 4358: Return edge from usage to main" id="403 -> 404"]
404 -> 405 [label="Line 4359: int __CPAchecker_TMP_0;" id="404 -> 405"]
405 -> 406 [label="Line 4359: [opt == 'h']" id="405 -> 406"]
405 -> 407 [label="Line 4359: [!(opt == 'h')]" id="405 -> 407"]
407 -> 410 [label="Line 4359: __CPAchecker_TMP_0 = 1;" id="407 -> 410"]
406 -> 410 [label="Line 4359: __CPAchecker_TMP_0 = 0;" id="406 -> 410"]
396 -> 424 [label="Line 0: " id="396 -> 424"]
424 -> 426 [label="Line 0: " id="424 -> 426"]
393 -> 399 [label="Line 4357: fall through" id="393 -> 399"]
391 -> 411 [label="Line 4348: default_mtime = strtol(optarg, &invalid, 10);" id="391 -> 411"]
411 -> 413 [label="Line 4349: [!((*optarg) == 0)]" id="411 -> 413"]
411 -> 416 [label="Line 4349: [(*optarg) == 0]" id="411 -> 416"]
416 -> 417 [label="Line 4350: fprintf(stderr, 'Invalid timestamp: %s\n', optarg);" id="416 -> 417"]
417 -> 418 [label="Line 4352: usage(argv[0])" id="417 -> 418"]
418 -> 419 [label="Line 0: Function start dummy edge" id="418 -> 419"]
419 -> 420 [label="Line 4263: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="419 -> 420"]
420 -> 421 [label="Line 0: default return" id="420 -> 421"]
421 -> 422 [label="Line 4352: Return edge from usage to main" id="421 -> 422"]
413 -> 414 [label="Line 4349: [(*invalid) == 0]" id="413 -> 414"]
413 -> 416 [label="Line 4349: [!((*invalid) == 0)]" id="413 -> 416"]
414 -> 424 [label="Line 4355: break" id="414 -> 424"]
388 -> 427 [label="Line 4345: break" id="388 -> 427"]
427 -> 428 [label="Line 4363: [(argc - optind) != 1]" id="427 -> 428"]
427 -> 429 [label="Line 4363: [!((argc - optind) != 1)]" id="427 -> 429"]
429 -> 435 [label="Line 4367: filename = argv[optind]; int __CPAchecker_TMP_1;" id="429 -> 435"]
435 -> 436 [label="Line 4368: __CPAchecker_TMP_1 = strcmp(filename, '-');" id="435 -> 436"]
436 -> 437 [label="Line 4368: [__CPAchecker_TMP_1 == 0]" id="436 -> 437"]
436 -> 438 [label="Line 4368: [!(__CPAchecker_TMP_1 == 0)]" id="436 -> 438"]
438 -> 439 [label="Line 4370: cpio_list = fopen(filename, 'r');" id="438 -> 439"]
439 -> 440 [label="Line 4370: [cpio_list == 0]" id="439 -> 440"]
439 -> 441 [label="Line 4370: [!(cpio_list == 0)]" id="439 -> 441"]
441 -> 454 [label="Line 0: " id="441 -> 454"]
454 -> 456 [label="Line 4377: while" id="454 -> 456"]
892 -> 456 [style="dashed" weight="0" label="covered by"]
894 -> 456 [style="dashed" weight="0" label="covered by"]
896 -> 456 [style="dashed" weight="0" label="covered by"]
898 -> 456 [style="dashed" weight="0" label="covered by"]
900 -> 456 [style="dashed" weight="0" label="covered by"]
902 -> 456 [style="dashed" weight="0" label="covered by"]
904 -> 456 [style="dashed" weight="0" label="covered by"]
906 -> 456 [style="dashed" weight="0" label="covered by"]
929 -> 456 [style="dashed" weight="0" label="covered by"]
456 -> 457 [label="Line 4377:  int type_idx; size_t slen;" id="456 -> 457"]
457 -> 458 [label="Line 4379: slen = strlen(line);" id="457 -> 458"]
458 -> 459 [label="Line 4381: int __CPAchecker_TMP_4 = line_nr; line_nr = line_nr + 1; __CPAchecker_TMP_4;" id="458 -> 459"]
459 -> 460 [label="Line 4383: ['#' == (*line)]" id="459 -> 460"]
459 -> 461 [label="Line 4383: [!('#' == (*line))]" id="459 -> 461"]
461 -> 462 [label="Line 4388: type = strtok(line, ' \t');" id="461 -> 462"]
462 -> 463 [label="Line 4388: [type == 0]" id="462 -> 463"]
462 -> 464 [label="Line 4388: [!(type == 0)]" id="462 -> 464"]
464 -> 465 [label="Line 4396: ['\xa' == (*type)]" id="464 -> 465"]
464 -> 466 [label="Line 4396: [!('\xa' == (*type))]" id="464 -> 466"]
466 -> 467 [label="Line 4401: size_t __CPAchecker_TMP_5;" id="466 -> 467"]
467 -> 468 [label="Line 4401: __CPAchecker_TMP_5 = strlen(type);" id="467 -> 468"]
468 -> 469 [label="Line 4401: [slen == __CPAchecker_TMP_5]" id="468 -> 469"]
468 -> 470 [label="Line 4401: [!(slen == __CPAchecker_TMP_5)]" id="468 -> 470"]
470 -> 471 [label="Line 4406: args = strtok((void *)0, '\n');" id="470 -> 471"]
471 -> 472 [label="Line 4406: [args == 0]" id="471 -> 472"]
471 -> 476 [label="Line 4406: [!(args == 0)]" id="471 -> 476"]
476 -> 478 [label="Line 4413: for type_idx = 0;" id="476 -> 478"]
486 -> 478 [style="dashed" weight="0" label="covered by"]
478 -> 480 [label="Line 4413: [!(((file_handler_table[type_idx]).type) == 0)]" id="478 -> 480"]
478 -> 860 [label="Line 4413: [((file_handler_table[type_idx]).type) == 0]" id="478 -> 860"]
860 -> 871 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="860 -> 871"]
860 -> 890 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="860 -> 890"]
890 -> 902 [label="Line 0: " id="890 -> 902"]
871 -> 878 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="871 -> 878"]
878 -> 890 [label="Line 0: " id="878 -> 890"]
480 -> 481 [label="Line 4414: int rc; int __CPAchecker_TMP_6;" id="480 -> 481"]
481 -> 482 [label="Line 4415: __CPAchecker_TMP_6 = strcmp(line, (file_handler_table[type_idx]).type);" id="481 -> 482"]
482 -> 483 [label="Line 4415: [__CPAchecker_TMP_6 == 0]" id="482 -> 483"]
482 -> 484 [label="Line 4415: [!(__CPAchecker_TMP_6 == 0)]" id="482 -> 484"]
484 -> 486 [label="Line 4413:  type_idx = type_idx + 1;" id="484 -> 486"]
483 -> 487 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mknod_line)]" id="483 -> 487"]
483 -> 488 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mknod_line))]" id="483 -> 488"]
488 -> 489 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line)]" id="488 -> 489"]
488 -> 490 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line))]" id="488 -> 490"]
490 -> 491 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line)]" id="490 -> 491"]
490 -> 492 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line))]" id="490 -> 492"]
492 -> 493 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line)]" id="492 -> 493"]
492 -> 494 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line))]" id="492 -> 494"]
494 -> 495 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line)]" id="494 -> 495"]
494 -> 496 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line))]" id="494 -> 496"]
496 -> 497 [label="Line 4416: [((file_handler_table[type_idx]).handler) == (&cpio_mksock_line)]" id="496 -> 497"]
496 -> 498 [label="Line 4416: [!(((file_handler_table[type_idx]).handler) == (&cpio_mksock_line))]" id="496 -> 498"]
498 -> 817 [label="Line 4416: rc = ((file_handler_table[type_idx]).handler)(args);" id="498 -> 817"]
817 -> 829 [label="Line 4416: [!(rc == 0)]" id="817 -> 829"]
817 -> 853 [label="Line 4416: [rc == 0]" id="817 -> 853"]
853 -> 860 [label="Line 4420: break" id="853 -> 860"]
829 -> 835 [label="Line 4417: ec = rc;" id="829 -> 835"]
835 -> 841 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="835 -> 841"]
841 -> 853 [label="Line 0: " id="841 -> 853"]
497 -> 500 [label="Line 4416: cpio_mksock_line(args)" id="497 -> 500"]
500 -> 501 [label="Line 4023: Function start dummy edge int __CPAchecker_TMP_0;" id="500 -> 501"]
501 -> 502 [label="Line 4023: cpio_mkgeneric_line(line, 2)" id="501 -> 502"]
502 -> 503 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="502 -> 503"]
503 -> 504 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="503 -> 504"]
504 -> 505 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="504 -> 505"]
504 -> 506 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="504 -> 506"]
506 -> 507 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="506 -> 507"]
507 -> 508 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="507 -> 508"]
508 -> 509 [label="Line 3942: Function start dummy edge char s[256];" id="508 -> 509"]
509 -> 510 [label="Line 3944: [(name[0]) == '/']" id="509 -> 510"]
509 -> 513 [label="Line 3944: [!((name[0]) == '/')]" id="509 -> 513"]
513 -> 514 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="513 -> 514"]
514 -> 515 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="514 -> 515"]
515 -> 516 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="515 -> 516"]
516 -> 517 [label="Line 3962: push_hdr(s)" id="516 -> 517"]
517 -> 518 [label="Line 0: Function start dummy edge" id="517 -> 518"]
518 -> 519 [label="Line 3856: fputs(s, stdout);" id="518 -> 519"]
519 -> 520 [label="Line 3857: offset = offset + 110; default return" id="519 -> 520"]
520 -> 521 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="520 -> 521"]
521 -> 522 [label="Line 3963: push_rest(name)" id="521 -> 522"]
522 -> 523 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="522 -> 523"]
523 -> 524 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="523 -> 524"]
524 -> 525 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="524 -> 525"]
525 -> 526 [label="Line 3842: fputs(name, stdout);" id="525 -> 526"]
526 -> 527 [label="Line 3843: putchar(0);" id="526 -> 527"]
527 -> 529 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="527 -> 529"]
534 -> 529 [style="dashed" weight="0" label="covered by"]
529 -> 530 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="529 -> 530"]
529 -> 531 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="529 -> 531"]
531 -> 532 [label="Line 3848: putchar(0);" id="531 -> 532"]
532 -> 534 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="532 -> 534"]
530 -> 535 [label="Line 0: default return" id="530 -> 535"]
535 -> 536 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="535 -> 536"]
536 -> 537 [label="Line 3964: return 0;" id="536 -> 537"]
537 -> 538 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="537 -> 538"]
538 -> 539 [label="Line 4008: Label: fail" id="538 -> 539"]
539 -> 542 [label="Line 4009: return rc;" id="539 -> 542"]
542 -> 544 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="542 -> 544"]
544 -> 546 [label="Line 4023: return __CPAchecker_TMP_0;" id="544 -> 546"]
546 -> 548 [label="Line 4416: Return edge from cpio_mksock_line to main" id="546 -> 548"]
548 -> 550 [label="Line 4416: skip" id="548 -> 550"]
550 -> 819 [label="Line 4416: [!(rc == 0)]" id="550 -> 819"]
550 -> 843 [label="Line 4416: [rc == 0]" id="550 -> 843"]
843 -> 854 [label="Line 4420: break" id="843 -> 854"]
854 -> 861 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="854 -> 861"]
854 -> 880 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="854 -> 880"]
880 -> 892 [label="Line 0: " id="880 -> 892"]
861 -> 873 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="861 -> 873"]
873 -> 880 [label="Line 0: " id="873 -> 880"]
819 -> 830 [label="Line 4417: ec = rc;" id="819 -> 830"]
830 -> 836 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="830 -> 836"]
836 -> 843 [label="Line 0: " id="836 -> 843"]
510 -> 513 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="510 -> 513"]
505 -> 540 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="505 -> 540"]
540 -> 541 [label="Line 4004: Goto: fail" id="540 -> 541"]
541 -> 543 [label="Line 4009: return rc;" id="541 -> 543"]
543 -> 545 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="543 -> 545"]
545 -> 547 [label="Line 4023: return __CPAchecker_TMP_0;" id="545 -> 547"]
547 -> 549 [label="Line 4416: Return edge from cpio_mksock_line to main" id="547 -> 549"]
549 -> 817 [label="Line 4416: skip" id="549 -> 817"]
495 -> 553 [label="Line 4416: cpio_mkdir_line(args)" id="495 -> 553"]
553 -> 554 [label="Line 4014: Function start dummy edge int __CPAchecker_TMP_0;" id="553 -> 554"]
554 -> 555 [label="Line 4014: cpio_mkgeneric_line(line, 0)" id="554 -> 555"]
555 -> 556 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="555 -> 556"]
556 -> 557 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="556 -> 557"]
557 -> 558 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="557 -> 558"]
557 -> 559 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="557 -> 559"]
559 -> 560 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="559 -> 560"]
560 -> 561 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="560 -> 561"]
561 -> 562 [label="Line 3942: Function start dummy edge char s[256];" id="561 -> 562"]
562 -> 563 [label="Line 3944: [(name[0]) == '/']" id="562 -> 563"]
562 -> 566 [label="Line 3944: [!((name[0]) == '/')]" id="562 -> 566"]
566 -> 567 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="566 -> 567"]
567 -> 568 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="567 -> 568"]
568 -> 569 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="568 -> 569"]
569 -> 570 [label="Line 3962: push_hdr(s)" id="569 -> 570"]
570 -> 571 [label="Line 0: Function start dummy edge" id="570 -> 571"]
571 -> 572 [label="Line 3856: fputs(s, stdout);" id="571 -> 572"]
572 -> 573 [label="Line 3857: offset = offset + 110; default return" id="572 -> 573"]
573 -> 574 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="573 -> 574"]
574 -> 575 [label="Line 3963: push_rest(name)" id="574 -> 575"]
575 -> 576 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="575 -> 576"]
576 -> 577 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="576 -> 577"]
577 -> 578 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="577 -> 578"]
578 -> 579 [label="Line 3842: fputs(name, stdout);" id="578 -> 579"]
579 -> 580 [label="Line 3843: putchar(0);" id="579 -> 580"]
580 -> 582 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="580 -> 582"]
587 -> 582 [style="dashed" weight="0" label="covered by"]
582 -> 583 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="582 -> 583"]
582 -> 584 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="582 -> 584"]
584 -> 585 [label="Line 3848: putchar(0);" id="584 -> 585"]
585 -> 587 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="585 -> 587"]
583 -> 588 [label="Line 0: default return" id="583 -> 588"]
588 -> 589 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="588 -> 589"]
589 -> 590 [label="Line 3964: return 0;" id="589 -> 590"]
590 -> 591 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="590 -> 591"]
591 -> 592 [label="Line 4008: Label: fail" id="591 -> 592"]
592 -> 595 [label="Line 4009: return rc;" id="592 -> 595"]
595 -> 597 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="595 -> 597"]
597 -> 599 [label="Line 4014: return __CPAchecker_TMP_0;" id="597 -> 599"]
599 -> 601 [label="Line 4416: Return edge from cpio_mkdir_line to main" id="599 -> 601"]
601 -> 603 [label="Line 4416: skip" id="601 -> 603"]
603 -> 821 [label="Line 4416: [!(rc == 0)]" id="603 -> 821"]
603 -> 845 [label="Line 4416: [rc == 0]" id="603 -> 845"]
845 -> 855 [label="Line 4420: break" id="845 -> 855"]
855 -> 863 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="855 -> 863"]
855 -> 882 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="855 -> 882"]
882 -> 894 [label="Line 0: " id="882 -> 894"]
863 -> 874 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="863 -> 874"]
874 -> 882 [label="Line 0: " id="874 -> 882"]
821 -> 831 [label="Line 4417: ec = rc;" id="821 -> 831"]
831 -> 837 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="831 -> 837"]
837 -> 845 [label="Line 0: " id="837 -> 845"]
563 -> 566 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="563 -> 566"]
558 -> 593 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="558 -> 593"]
593 -> 594 [label="Line 4004: Goto: fail" id="593 -> 594"]
594 -> 596 [label="Line 4009: return rc;" id="594 -> 596"]
596 -> 598 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="596 -> 598"]
598 -> 600 [label="Line 4014: return __CPAchecker_TMP_0;" id="598 -> 600"]
600 -> 602 [label="Line 4416: Return edge from cpio_mkdir_line to main" id="600 -> 602"]
602 -> 817 [label="Line 4416: skip" id="602 -> 817"]
493 -> 606 [label="Line 4416: cpio_mkslink_line(args)" id="493 -> 606"]
606 -> 607 [label="Line 3923: Function start dummy edge char name[4097]; char target[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="606 -> 607"]
607 -> 608 [label="Line 3930: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d', name, target, &mode, &uid, &gid);" id="607 -> 608"]
608 -> 609 [label="Line 3930: [5 != __CPAchecker_TMP_0]" id="608 -> 609"]
608 -> 610 [label="Line 3930: [!(5 != __CPAchecker_TMP_0)]" id="608 -> 610"]
610 -> 611 [label="Line 3934: cpio_mkslink(name, target, mode, uid, gid)" id="610 -> 611"]
611 -> 612 [label="Line 3893: Function start dummy edge char s[256];" id="611 -> 612"]
612 -> 613 [label="Line 3895: [(name[0]) == '/']" id="612 -> 613"]
612 -> 616 [label="Line 3895: [!((name[0]) == '/')]" id="612 -> 616"]
616 -> 617 [label="Line 3897: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="616 -> 617"]
617 -> 618 [label="Line 3897: __CPAchecker_TMP_2 = strlen(target);" id="617 -> 618"]
618 -> 619 [label="Line 3897: size_t __CPAchecker_TMP_3;" id="618 -> 619"]
619 -> 620 [label="Line 3897: __CPAchecker_TMP_3 = strlen(name);" id="619 -> 620"]
620 -> 621 [label="Line 3897: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, 40960 | mode, (long)uid, (long)gid, 1, (long)default_mtime, ((unsigned)__CPAchecker_TMP_2) + 1, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_3) + 1, 0);" id="620 -> 621"]
621 -> 622 [label="Line 3913: push_hdr(s)" id="621 -> 622"]
622 -> 623 [label="Line 0: Function start dummy edge" id="622 -> 623"]
623 -> 624 [label="Line 3856: fputs(s, stdout);" id="623 -> 624"]
624 -> 625 [label="Line 3857: offset = offset + 110; default return" id="624 -> 625"]
625 -> 626 [label="Line 3913: Return edge from push_hdr to cpio_mkslink" id="625 -> 626"]
626 -> 627 [label="Line 3914: push_string(name)" id="626 -> 627"]
627 -> 628 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="627 -> 628"]
628 -> 629 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="628 -> 629"]
629 -> 630 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="629 -> 630"]
630 -> 631 [label="Line 3824: fputs(name, stdout);" id="630 -> 631"]
631 -> 632 [label="Line 3825: putchar(0);" id="631 -> 632"]
632 -> 633 [label="Line 3826: offset = offset + name_len; default return" id="632 -> 633"]
633 -> 634 [label="Line 3914: Return edge from push_string to cpio_mkslink" id="633 -> 634"]
634 -> 635 [label="Line 3915: push_pad()" id="634 -> 635"]
635 -> 637 [label="Line 3831: Function start dummy edge while" id="635 -> 637"]
642 -> 637 [style="dashed" weight="0" label="covered by"]
637 -> 638 [label="Line 3831: [(offset & 3) == 0]" id="637 -> 638"]
637 -> 639 [label="Line 3831: [!((offset & 3) == 0)]" id="637 -> 639"]
639 -> 640 [label="Line 3832: putchar(0);" id="639 -> 640"]
640 -> 642 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="640 -> 642"]
638 -> 643 [label="Line 0: default return" id="638 -> 643"]
643 -> 644 [label="Line 3915: Return edge from push_pad to cpio_mkslink" id="643 -> 644"]
644 -> 645 [label="Line 3916: push_string(target)" id="644 -> 645"]
645 -> 646 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="645 -> 646"]
646 -> 647 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="646 -> 647"]
647 -> 648 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="647 -> 648"]
648 -> 649 [label="Line 3824: fputs(name, stdout);" id="648 -> 649"]
649 -> 650 [label="Line 3825: putchar(0);" id="649 -> 650"]
650 -> 651 [label="Line 3826: offset = offset + name_len; default return" id="650 -> 651"]
651 -> 652 [label="Line 3916: Return edge from push_string to cpio_mkslink" id="651 -> 652"]
652 -> 653 [label="Line 3917: push_pad()" id="652 -> 653"]
653 -> 655 [label="Line 3831: Function start dummy edge while" id="653 -> 655"]
660 -> 655 [style="dashed" weight="0" label="covered by"]
655 -> 656 [label="Line 3831: [(offset & 3) == 0]" id="655 -> 656"]
655 -> 657 [label="Line 3831: [!((offset & 3) == 0)]" id="655 -> 657"]
657 -> 658 [label="Line 3832: putchar(0);" id="657 -> 658"]
658 -> 660 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="658 -> 660"]
656 -> 661 [label="Line 0: default return" id="656 -> 661"]
661 -> 662 [label="Line 3917: Return edge from push_pad to cpio_mkslink" id="661 -> 662"]
662 -> 663 [label="Line 3918: return 0;" id="662 -> 663"]
663 -> 664 [label="Line 3934: Return edge from cpio_mkslink to cpio_mkslink_line" id="663 -> 664"]
664 -> 665 [label="Line 3935: Label: fail" id="664 -> 665"]
665 -> 668 [label="Line 3936: return rc;" id="665 -> 668"]
668 -> 670 [label="Line 4416: Return edge from cpio_mkslink_line to main" id="668 -> 670"]
670 -> 672 [label="Line 4416: skip" id="670 -> 672"]
672 -> 823 [label="Line 4416: [!(rc == 0)]" id="672 -> 823"]
672 -> 847 [label="Line 4416: [rc == 0]" id="672 -> 847"]
847 -> 856 [label="Line 4420: break" id="847 -> 856"]
856 -> 865 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="856 -> 865"]
856 -> 884 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="856 -> 884"]
884 -> 896 [label="Line 0: " id="884 -> 896"]
865 -> 875 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="865 -> 875"]
875 -> 884 [label="Line 0: " id="875 -> 884"]
823 -> 832 [label="Line 4417: ec = rc;" id="823 -> 832"]
832 -> 838 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="832 -> 838"]
838 -> 847 [label="Line 0: " id="838 -> 847"]
613 -> 616 [label="Line 3896: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="613 -> 616"]
609 -> 666 [label="Line 3931: fprintf(stderr, 'Unrecognized dir format '%s'', line);" id="609 -> 666"]
666 -> 667 [label="Line 3932: Goto: fail" id="666 -> 667"]
667 -> 669 [label="Line 3936: return rc;" id="667 -> 669"]
669 -> 671 [label="Line 4416: Return edge from cpio_mkslink_line to main" id="669 -> 671"]
671 -> 817 [label="Line 4416: skip" id="671 -> 817"]
491 -> 675 [label="Line 4416: cpio_mkfile_line(args)" id="491 -> 675"]
675 -> 676 [label="Line 4197: Function start dummy edge char name[4097]; char *dname = (void *)0; char location[4097]; unsigned int mode; int uid; int gid; int nlinks = 1; int end = 0; int dname_len = 0; int rc = -1; int __CPAchecker_TMP_0;" id="675 -> 676"]
676 -> 677 [label="Line 4207: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d %n', name, location, &mode, &uid, &gid, &end);" id="676 -> 677"]
677 -> 678 [label="Line 4207: [5 > __CPAchecker_TMP_0]" id="677 -> 678"]
677 -> 679 [label="Line 4207: [!(5 > __CPAchecker_TMP_0)]" id="677 -> 679"]
679 -> 681 [label="Line 4213: [!(end == 0)]" id="679 -> 681"]
679 -> 686 [label="Line 4213: [end == 0]" id="679 -> 686"]
686 -> 704 [label="Line 4254: dname = name; " id="686 -> 704"]
704 -> 709 [label="Line 4257: Label: fail" id="704 -> 709"]
709 -> 710 [label="Line 4258: return rc;" id="709 -> 710"]
710 -> 711 [label="Line 4416: Return edge from cpio_mkfile_line to main" id="710 -> 711"]
711 -> 817 [label="Line 4416: skip" id="711 -> 817"]
681 -> 682 [label="Line 4213: const unsigned short int **__CPAchecker_TMP_1;" id="681 -> 682"]
682 -> 683 [label="Line 4213: __CPAchecker_TMP_1 = __ctype_b_loc();" id="682 -> 683"]
683 -> 685 [label="Line 4213: [!((((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0)]" id="683 -> 685"]
683 -> 686 [label="Line 4213: [(((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0]" id="683 -> 686"]
685 -> 687 [label="Line 4214: int len; int nend; size_t __CPAchecker_TMP_2;" id="685 -> 687"]
687 -> 688 [label="Line 4217: __CPAchecker_TMP_2 = strlen(line);" id="687 -> 688"]
688 -> 689 [label="Line 4217: dname = malloc(__CPAchecker_TMP_2);" id="688 -> 689"]
689 -> 690 [label="Line 4217: [dname == 0]" id="689 -> 690"]
689 -> 691 [label="Line 4217: [!(dname == 0)]" id="689 -> 691"]
691 -> 692 [label="Line 4220: Num = Num - 1;" id="691 -> 692"]
692 -> 693 [label="Line 4221: [Num >= 0]" id="692 -> 693"]
692 -> 694 [label="Line 4221: [!(Num >= 0)]" id="692 -> 694"]
693 -> 695 [label="Line 4221: 0;" id="693 -> 695"]
695 -> 696 [label="Line 4223: size_t __CPAchecker_TMP_4;" id="695 -> 696"]
696 -> 697 [label="Line 4223: __CPAchecker_TMP_4 = strlen(name);" id="696 -> 697"]
697 -> 698 [label="Line 4223: dname_len = __CPAchecker_TMP_4 + 1;" id="697 -> 698"]
698 -> 699 [label="Line 4224: memcpy(dname, name, dname_len);" id="698 -> 699"]
699 -> 701 [label="Line 4226: do" id="699 -> 701"]
690 -> 702 [label="Line 4248: fprintf(stderr, 'out of memory (%d)\n', dname_len);" id="690 -> 702"]
702 -> 709 [label="Line 4249: Goto: fail" id="702 -> 709"]
678 -> 707 [label="Line 4210: fprintf(stderr, 'Unrecognized file format '%s'', line);" id="678 -> 707"]
707 -> 709 [label="Line 4211: Goto: fail" id="707 -> 709"]
489 -> 714 [label="Line 4416: cpio_mkpipe_line(args)" id="489 -> 714"]
714 -> 715 [label="Line 4019: Function start dummy edge int __CPAchecker_TMP_0;" id="714 -> 715"]
715 -> 716 [label="Line 4019: cpio_mkgeneric_line(line, 1)" id="715 -> 716"]
716 -> 717 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="716 -> 717"]
717 -> 718 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="717 -> 718"]
718 -> 719 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="718 -> 719"]
718 -> 720 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="718 -> 720"]
720 -> 721 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="720 -> 721"]
721 -> 722 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="721 -> 722"]
722 -> 723 [label="Line 3942: Function start dummy edge char s[256];" id="722 -> 723"]
723 -> 724 [label="Line 3944: [(name[0]) == '/']" id="723 -> 724"]
723 -> 727 [label="Line 3944: [!((name[0]) == '/')]" id="723 -> 727"]
727 -> 728 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="727 -> 728"]
728 -> 729 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="728 -> 729"]
729 -> 730 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="729 -> 730"]
730 -> 731 [label="Line 3962: push_hdr(s)" id="730 -> 731"]
731 -> 732 [label="Line 0: Function start dummy edge" id="731 -> 732"]
732 -> 733 [label="Line 3856: fputs(s, stdout);" id="732 -> 733"]
733 -> 734 [label="Line 3857: offset = offset + 110; default return" id="733 -> 734"]
734 -> 735 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="734 -> 735"]
735 -> 736 [label="Line 3963: push_rest(name)" id="735 -> 736"]
736 -> 737 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="736 -> 737"]
737 -> 738 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="737 -> 738"]
738 -> 739 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="738 -> 739"]
739 -> 740 [label="Line 3842: fputs(name, stdout);" id="739 -> 740"]
740 -> 741 [label="Line 3843: putchar(0);" id="740 -> 741"]
741 -> 743 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="741 -> 743"]
748 -> 743 [style="dashed" weight="0" label="covered by"]
743 -> 744 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="743 -> 744"]
743 -> 745 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="743 -> 745"]
745 -> 746 [label="Line 3848: putchar(0);" id="745 -> 746"]
746 -> 748 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="746 -> 748"]
744 -> 749 [label="Line 0: default return" id="744 -> 749"]
749 -> 750 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="749 -> 750"]
750 -> 751 [label="Line 3964: return 0;" id="750 -> 751"]
751 -> 752 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="751 -> 752"]
752 -> 753 [label="Line 4008: Label: fail" id="752 -> 753"]
753 -> 756 [label="Line 4009: return rc;" id="753 -> 756"]
756 -> 758 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="756 -> 758"]
758 -> 760 [label="Line 4019: return __CPAchecker_TMP_0;" id="758 -> 760"]
760 -> 762 [label="Line 4416: Return edge from cpio_mkpipe_line to main" id="760 -> 762"]
762 -> 764 [label="Line 4416: skip" id="762 -> 764"]
764 -> 825 [label="Line 4416: [!(rc == 0)]" id="764 -> 825"]
764 -> 849 [label="Line 4416: [rc == 0]" id="764 -> 849"]
849 -> 857 [label="Line 4420: break" id="849 -> 857"]
857 -> 867 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="857 -> 867"]
857 -> 886 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="857 -> 886"]
886 -> 898 [label="Line 0: " id="886 -> 898"]
867 -> 876 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="867 -> 876"]
876 -> 886 [label="Line 0: " id="876 -> 886"]
825 -> 833 [label="Line 4417: ec = rc;" id="825 -> 833"]
833 -> 839 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="833 -> 839"]
839 -> 849 [label="Line 0: " id="839 -> 849"]
724 -> 727 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="724 -> 727"]
719 -> 754 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="719 -> 754"]
754 -> 755 [label="Line 4004: Goto: fail" id="754 -> 755"]
755 -> 757 [label="Line 4009: return rc;" id="755 -> 757"]
757 -> 759 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="757 -> 759"]
759 -> 761 [label="Line 4019: return __CPAchecker_TMP_0;" id="759 -> 761"]
761 -> 763 [label="Line 4416: Return edge from cpio_mkpipe_line to main" id="761 -> 763"]
763 -> 817 [label="Line 4416: skip" id="763 -> 817"]
487 -> 767 [label="Line 4416: cpio_mknod_line(args)" id="487 -> 767"]
767 -> 768 [label="Line 4062: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; char dev_type; unsigned int maj; unsigned int min; int rc = -1; int __CPAchecker_TMP_0;" id="767 -> 768"]
768 -> 769 [label="Line 4071: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d %c %u %u', name, &mode, &uid, &gid, &dev_type, &maj, &min);" id="768 -> 769"]
769 -> 770 [label="Line 4071: [7 != __CPAchecker_TMP_0]" id="769 -> 770"]
769 -> 771 [label="Line 4071: [!(7 != __CPAchecker_TMP_0)]" id="769 -> 771"]
771 -> 772 [label="Line 4076: cpio_mknod(name, mode, uid, gid, dev_type, maj, min)" id="771 -> 772"]
772 -> 773 [label="Line 4030: Function start dummy edge char s[256];" id="772 -> 773"]
773 -> 774 [label="Line 4032: [dev_type == 'b']" id="773 -> 774"]
773 -> 775 [label="Line 4032: [!(dev_type == 'b')]" id="773 -> 775"]
775 -> 778 [label="Line 4035: mode = mode | 8192; " id="775 -> 778"]
778 -> 779 [label="Line 4037: [(name[0]) == '/']" id="778 -> 779"]
778 -> 782 [label="Line 4037: [!((name[0]) == '/')]" id="778 -> 782"]
782 -> 783 [label="Line 4039: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="782 -> 783"]
783 -> 784 [label="Line 4039: __CPAchecker_TMP_2 = strlen(name);" id="783 -> 784"]
784 -> 785 [label="Line 4039: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 1, (long)default_mtime, 0, 3, 1, maj, min, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="784 -> 785"]
785 -> 786 [label="Line 4055: push_hdr(s)" id="785 -> 786"]
786 -> 787 [label="Line 0: Function start dummy edge" id="786 -> 787"]
787 -> 788 [label="Line 3856: fputs(s, stdout);" id="787 -> 788"]
788 -> 789 [label="Line 3857: offset = offset + 110; default return" id="788 -> 789"]
789 -> 790 [label="Line 4055: Return edge from push_hdr to cpio_mknod" id="789 -> 790"]
790 -> 791 [label="Line 4056: push_rest(name)" id="790 -> 791"]
791 -> 792 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="791 -> 792"]
792 -> 793 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="792 -> 793"]
793 -> 794 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="793 -> 794"]
794 -> 795 [label="Line 3842: fputs(name, stdout);" id="794 -> 795"]
795 -> 796 [label="Line 3843: putchar(0);" id="795 -> 796"]
796 -> 798 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="796 -> 798"]
803 -> 798 [style="dashed" weight="0" label="covered by"]
798 -> 799 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="798 -> 799"]
798 -> 800 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="798 -> 800"]
800 -> 801 [label="Line 3848: putchar(0);" id="800 -> 801"]
801 -> 803 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="801 -> 803"]
799 -> 804 [label="Line 0: default return" id="799 -> 804"]
804 -> 805 [label="Line 4056: Return edge from push_rest to cpio_mknod" id="804 -> 805"]
805 -> 806 [label="Line 4057: return 0;" id="805 -> 806"]
806 -> 807 [label="Line 4076: Return edge from cpio_mknod to cpio_mknod_line" id="806 -> 807"]
807 -> 808 [label="Line 4077: Label: fail" id="807 -> 808"]
808 -> 811 [label="Line 4078: return rc;" id="808 -> 811"]
811 -> 813 [label="Line 4416: Return edge from cpio_mknod_line to main" id="811 -> 813"]
813 -> 815 [label="Line 4416: skip" id="813 -> 815"]
815 -> 827 [label="Line 4416: [!(rc == 0)]" id="815 -> 827"]
815 -> 851 [label="Line 4416: [rc == 0]" id="815 -> 851"]
851 -> 858 [label="Line 4420: break" id="851 -> 858"]
858 -> 869 [label="Line 4424: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="858 -> 869"]
858 -> 888 [label="Line 4424: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="858 -> 888"]
888 -> 900 [label="Line 0: " id="888 -> 900"]
869 -> 877 [label="Line 4425: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="869 -> 877"]
877 -> 888 [label="Line 0: " id="877 -> 888"]
827 -> 834 [label="Line 4417: ec = rc;" id="827 -> 834"]
834 -> 840 [label="Line 4418: fprintf(stderr, ' line %d\n', line_nr);" id="834 -> 840"]
840 -> 851 [label="Line 0: " id="840 -> 851"]
779 -> 782 [label="Line 4038: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="779 -> 782"]
774 -> 778 [label="Line 4033: mode = mode | 24576; " id="774 -> 778"]
770 -> 809 [label="Line 4073: fprintf(stderr, 'Unrecognized nod format '%s'', line);" id="770 -> 809"]
809 -> 810 [label="Line 4074: Goto: fail" id="809 -> 810"]
810 -> 812 [label="Line 4078: return rc;" id="810 -> 812"]
812 -> 814 [label="Line 4416: Return edge from cpio_mknod_line to main" id="812 -> 814"]
814 -> 817 [label="Line 4416: skip" id="814 -> 817"]
472 -> 474 [label="Line 4407: fprintf(stderr, 'ERROR: incorrect format, newline required line %d: '%s'\n', line_nr, line);" id="472 -> 474"]
474 -> 476 [label="Line 4410: ec = -1; " id="474 -> 476"]
469 -> 904 [label="Line 4403: continue" id="469 -> 904"]
465 -> 906 [label="Line 4398: continue" id="465 -> 906"]
463 -> 907 [label="Line 4389: fprintf(stderr, 'ERROR: incorrect format, could not locate file type line %d: '%s'\n', line_nr, line);" id="463 -> 907"]
907 -> 908 [label="Line 4392: ec = -1; break" id="907 -> 908"]
908 -> 909 [label="Line 4429: [ec == 0]" id="908 -> 909"]
908 -> 910 [label="Line 4429: [!(ec == 0)]" id="908 -> 910"]
909 -> 911 [label="Line 4430: cpio_trailer()" id="909 -> 911"]
911 -> 912 [label="Line 3862: Function start dummy edge char s[256]; const char name[] = 'TRAILER!!!'; size_t __CPAchecker_TMP_0;" id="911 -> 912"]
912 -> 913 [label="Line 3865: __CPAchecker_TMP_0 = strlen(name);" id="912 -> 913"]
913 -> 914 [label="Line 3865: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', 0, 0, 0L, 0L, 1, 0L, 0, 0, 0, 0, 0, ((unsigned)__CPAchecker_TMP_0) + 1, 0);" id="913 -> 914"]
914 -> 915 [label="Line 3881: push_hdr(s)" id="914 -> 915"]
915 -> 916 [label="Line 0: Function start dummy edge" id="915 -> 916"]
916 -> 917 [label="Line 3856: fputs(s, stdout);" id="916 -> 917"]
917 -> 918 [label="Line 3857: offset = offset + 110; default return" id="917 -> 918"]
918 -> 919 [label="Line 3881: Return edge from push_hdr to cpio_trailer" id="918 -> 919"]
919 -> 920 [label="Line 3882: push_rest(name)" id="919 -> 920"]
920 -> 921 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="920 -> 921"]
921 -> 922 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="921 -> 922"]
922 -> 923 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="922 -> 923"]
923 -> 924 [label="Line 3842: fputs(name, stdout);" id="923 -> 924"]
924 -> 925 [label="Line 3843: putchar(0);" id="924 -> 925"]
925 -> 927 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="925 -> 927"]
460 -> 929 [label="Line 4385: continue" id="460 -> 929"]
440 -> 443 [label="Line 4371: int *__CPAchecker_TMP_2;" id="440 -> 443"]
443 -> 444 [label="Line 4371: __CPAchecker_TMP_2 = __errno_location();" id="443 -> 444"]
444 -> 445 [label="Line 4371: char *__CPAchecker_TMP_3;" id="444 -> 445"]
445 -> 446 [label="Line 4371: __CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);" id="445 -> 446"]
446 -> 447 [label="Line 4371: fprintf(stderr, 'ERROR: unable to open '%s': %s\n\n', filename, __CPAchecker_TMP_3);" id="446 -> 447"]
447 -> 448 [label="Line 4373: usage(argv[0])" id="447 -> 448"]
448 -> 449 [label="Line 0: Function start dummy edge" id="448 -> 449"]
449 -> 450 [label="Line 4263: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="449 -> 450"]
450 -> 451 [label="Line 0: default return" id="450 -> 451"]
451 -> 452 [label="Line 4373: Return edge from usage to main" id="451 -> 452"]
437 -> 454 [label="Line 4369: cpio_list = stdin; " id="437 -> 454"]
428 -> 430 [label="Line 4364: usage(argv[0])" id="428 -> 430"]
430 -> 431 [label="Line 0: Function start dummy edge" id="430 -> 431"]
431 -> 432 [label="Line 4263: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="431 -> 432"]
432 -> 433 [label="Line 0: default return" id="432 -> 433"]
433 -> 434 [label="Line 4364: Return edge from usage to main" id="433 -> 434"]
}
