digraph CFA {
379 [shape="circle" label="379\n108"]
387 [shape="circle" label="387\n107"]
388 [shape="circle" label="388\n106"]
389 [shape="doublecircle" label="389\n105"]
392 [shape="circle" label="392\n104"]
393 [shape="circle" label="393\n103"]
394 [shape="diamond" label="394\n102"]
395 [shape="circle" label="395\n101"]
398 [shape="diamond" label="398\n100"]
402 [shape="diamond" label="402\n99"]
412 [shape="diamond" label="412\n98"]
414 [shape="circle" label="414\n97"]
399 [shape="circle" label="399\n80"]
413 [shape="circle" label="413\n95"]
375 [shape="circle" label="375\n3"]
376 [shape="circle" label="376\n2"]
377 [shape="circle" label="377\n1"]
374 [shape="circle" label="374\n0"]
423 [shape="circle" label="423\n76"]
424 [shape="circle" label="424\n75"]
421 [shape="circle" label="421\n74"]
429 [shape="circle" label="429\n73"]
430 [shape="diamond" label="430\n72"]
428 [shape="circle" label="428\n71"]
434 [shape="diamond" label="434\n70"]
432 [shape="circle" label="432\n69"]
426 [shape="circle" label="426\n59"]
442 [shape="doublecircle" label="442\n58"]
446 [shape="circle" label="446\n57"]
447 [shape="circle" label="447\n56"]
450 [shape="diamond" label="450\n55"]
451 [shape="circle" label="451\n54"]
456 [shape="diamond" label="456\n53"]
454 [shape="diamond" label="454\n52"]
460 [shape="circle" label="460\n51"]
465 [shape="circle" label="465\n50"]
466 [shape="diamond" label="466\n49"]
463 [shape="circle" label="463\n48"]
470 [shape="diamond" label="470\n47"]
468 [shape="circle" label="468\n44"]
474 [shape="doublecircle" label="474\n43"]
476 [shape="circle" label="476\n42"]
481 [shape="circle" label="481\n41"]
482 [shape="diamond" label="482\n40"]
479 [shape="circle" label="479\n39"]
480 [shape="diamond" label="480\n38"]
497 [shape="diamond" label="497\n37"]
500 [shape="diamond" label="500\n36"]
503 [shape="diamond" label="503\n35"]
506 [shape="diamond" label="506\n34"]
509 [shape="diamond" label="509\n33"]
512 [shape="circle" label="512\n32"]
485 [shape="diamond" label="485\n19"]
484 [shape="circle" label="484\n18"]
486 [shape="circle" label="486\n17"]
487 [shape="circle" label="487\n16"]
483 [shape="circle" label="483\n15"]
477 [shape="diamond" label="477\n14"]
489 [shape="circle" label="489\n11"]
490 [shape="circle" label="490\n13"]
491 [shape="circle" label="491\n12"]
511 [shape="circle" label="511\n31"]
150 [shape="circle" label="150\n3"]
152 [shape="circle" label="152\n2"]
120 [shape="circle" label="120\n9"]
129 [shape="circle" label="129\n8"]
130 [shape="diamond" label="130\n7"]
127 [shape="circle" label="127\n6"]
133 [shape="circle" label="133\n5"]
103 [shape="circle" label="103\n9"]
105 [shape="diamond" label="105\n8"]
106 [shape="circle" label="106\n6"]
113 [shape="circle" label="113\n5"]
114 [shape="circle" label="114\n4"]
115 [shape="circle" label="115\n3"]
41 [shape="circle" label="41\n3"]
42 [shape="circle" label="42\n2"]
43 [shape="circle" label="43\n1"]
40 [shape="circle" label="40\n0"]
53 [shape="circle" label="53\n6"]
20 [shape="circle" label="20\n10"]
22 [shape="circle" label="22\n9"]
23 [shape="circle" label="23\n8"]
25 [shape="circle" label="25\n7"]
26 [shape="circle" label="26\n6"]
27 [shape="circle" label="27\n5"]
30 [shape="doublecircle" label="30\n4"]
31 [shape="circle" label="31\n3"]
33 [shape="circle" label="33\n2"]
32 [shape="circle" label="32\n1"]
19 [shape="circle" label="19\n0"]
54 [shape="circle" label="54\n5"]
55 [shape="doublecircle" label="55\n4"]
56 [shape="circle" label="56\n3"]
58 [shape="circle" label="58\n2"]
57 [shape="circle" label="57\n1"]
45 [shape="circle" label="45\n0"]
494 [shape="circle" label="494\n4"]
492 [shape="circle" label="492\n3"]
495 [shape="circle" label="495\n2"]
378 [shape="circle" label="378\n1"]
175 [shape="circle" label="175\n1"]
155 [shape="circle" label="155\n0"]
194 [shape="circle" label="194\n4"]
195 [shape="circle" label="195\n1"]
177 [shape="circle" label="177\n0"]
498 [shape="circle" label="498\n20"]
117 [shape="circle" label="117\n1"]
102 [shape="circle" label="102\n0"]
134 [shape="circle" label="134\n4"]
135 [shape="circle" label="135\n1"]
119 [shape="circle" label="119\n0"]
153 [shape="circle" label="153\n1"]
149 [shape="circle" label="149\n0"]
513 [shape="circle" label="513\n30"]
147 [shape="circle" label="147\n1"]
143 [shape="circle" label="143\n0"]
501 [shape="circle" label="501\n22"]
141 [shape="circle" label="141\n1"]
137 [shape="circle" label="137\n0"]
510 [shape="circle" label="510\n28"]
78 [shape="circle" label="78\n5"]
1 [shape="circle" label="1\n6"]
3 [shape="circle" label="3\n5"]
4 [shape="circle" label="4\n4"]
5 [shape="circle" label="5\n3"]
6 [shape="circle" label="6\n2"]
7 [shape="circle" label="7\n1"]
0 [shape="circle" label="0\n0"]
81 [shape="circle" label="81\n2"]
10 [shape="circle" label="10\n5"]
12 [shape="doublecircle" label="12\n4"]
13 [shape="circle" label="13\n3"]
15 [shape="circle" label="15\n2"]
14 [shape="circle" label="14\n1"]
9 [shape="circle" label="9\n0"]
82 [shape="circle" label="82\n1"]
62 [shape="circle" label="62\n0"]
99 [shape="circle" label="99\n4"]
100 [shape="circle" label="100\n1"]
84 [shape="circle" label="84\n0"]
507 [shape="circle" label="507\n26"]
80 [shape="circle" label="80\n3"]
264 [shape="circle" label="264\n17"]
255 [shape="circle" label="255\n14"]
236 [shape="doublecircle" label="236\n36"]
239 [shape="circle" label="239\n35"]
270 [shape="diamond" label="270\n7"]
272 [shape="circle" label="272\n6"]
273 [shape="circle" label="273\n5"]
271 [shape="diamond" label="271\n4"]
275 [shape="circle" label="275\n1"]
197 [shape="circle" label="197\n0"]
367 [shape="circle" label="367\n7"]
368 [shape="diamond" label="368\n4"]
370 [shape="circle" label="370\n3"]
371 [shape="circle" label="371\n2"]
369 [shape="circle" label="369\n1"]
302 [shape="circle" label="302\n0"]
504 [shape="circle" label="504\n24"]
276 [shape="circle" label="276\n3"]
277 [shape="circle" label="277\n2"]
238 [shape="diamond" label="238\n34"]
240 [shape="diamond" label="240\n32"]
243 [shape="circle" label="243\n30"]
248 [shape="circle" label="248\n29"]
249 [shape="circle" label="249\n28"]
250 [shape="circle" label="250\n27"]
251 [shape="circle" label="251\n26"]
252 [shape="circle" label="252\n25"]
253 [shape="circle" label="253\n24"]
254 [shape="diamond" label="254\n23"]
256 [shape="circle" label="256\n22"]
259 [shape="circle" label="259\n21"]
260 [shape="diamond" label="260\n20"]
257 [shape="circle" label="257\n19"]
263 [shape="circle" label="263\n18"]
258 [shape="circle" label="258\n16"]
261 [shape="circle" label="261\n15"]
244 [shape="circle" label="244\n31"]
241 [shape="circle" label="241\n33"]
79 [shape="circle" label="79\n4"]
174 [shape="circle" label="174\n2"]
116 [shape="circle" label="116\n2"]
107 [shape="circle" label="107\n7"]
128 [shape="circle" label="128\n3"]
131 [shape="circle" label="131\n2"]
508 [shape="circle" label="508\n29"]
138 [shape="circle" label="138\n3"]
140 [shape="circle" label="140\n2"]
505 [shape="circle" label="505\n27"]
85 [shape="circle" label="85\n8"]
95 [shape="circle" label="95\n7"]
96 [shape="diamond" label="96\n6"]
93 [shape="circle" label="93\n5"]
63 [shape="circle" label="63\n14"]
65 [shape="diamond" label="65\n13"]
66 [shape="circle" label="66\n11"]
73 [shape="circle" label="73\n10"]
74 [shape="circle" label="74\n9"]
75 [shape="circle" label="75\n8"]
76 [shape="circle" label="76\n7"]
77 [shape="circle" label="77\n6"]
67 [shape="circle" label="67\n12"]
94 [shape="circle" label="94\n3"]
97 [shape="circle" label="97\n2"]
502 [shape="circle" label="502\n25"]
303 [shape="circle" label="303\n46"]
317 [shape="circle" label="317\n45"]
318 [shape="diamond" label="318\n44"]
315 [shape="diamond" label="315\n43"]
324 [shape="circle" label="324\n42"]
325 [shape="circle" label="325\n41"]
326 [shape="diamond" label="326\n40"]
322 [shape="circle" label="322\n39"]
329 [shape="circle" label="329\n38"]
330 [shape="circle" label="330\n37"]
331 [shape="circle" label="331\n36"]
332 [shape="diamond" label="332\n35"]
334 [shape="circle" label="334\n34"]
335 [shape="diamond" label="335\n32"]
336 [shape="circle" label="336\n31"]
340 [shape="circle" label="340\n30"]
341 [shape="circle" label="341\n29"]
342 [shape="circle" label="342\n28"]
343 [shape="circle" label="343\n27"]
345 [shape="doublecircle" label="345\n26"]
352 [shape="circle" label="352\n25"]
353 [shape="diamond" label="353\n24"]
350 [shape="circle" label="350\n23"]
355 [shape="circle" label="355\n22"]
356 [shape="circle" label="356\n21"]
357 [shape="circle" label="357\n20"]
358 [shape="circle" label="358\n19"]
344 [shape="doubleoctagon" label="344\n18"]
347 [shape="circle" label="347\n17"]
348 [shape="diamond" label="348\n16"]
346 [shape="circle" label="346\n14"]
321 [shape="circle" label="321\n10"]
365 [shape="circle" label="365\n9"]
280 [shape="circle" label="280\n15"]
286 [shape="doublecircle" label="286\n14"]
290 [shape="diamond" label="290\n13"]
289 [shape="circle" label="289\n12"]
291 [shape="diamond" label="291\n11"]
287 [shape="circle" label="287\n10"]
293 [shape="circle" label="293\n9"]
294 [shape="circle" label="294\n8"]
295 [shape="diamond" label="295\n7"]
296 [shape="circle" label="296\n6"]
298 [shape="circle" label="298\n4"]
299 [shape="circle" label="299\n3"]
300 [shape="circle" label="300\n2"]
297 [shape="circle" label="297\n5"]
288 [shape="circle" label="288\n1"]
279 [shape="circle" label="279\n0"]
366 [shape="circle" label="366\n8"]
198 [shape="circle" label="198\n52"]
209 [shape="circle" label="209\n51"]
210 [shape="diamond" label="210\n50"]
211 [shape="circle" label="211\n49"]
215 [shape="diamond" label="215\n48"]
217 [shape="circle" label="217\n47"]
218 [shape="circle" label="218\n46"]
216 [shape="circle" label="216\n45"]
220 [shape="circle" label="220\n44"]
221 [shape="diamond" label="221\n43"]
223 [shape="circle" label="223\n42"]
224 [shape="diamond" label="224\n40"]
225 [shape="circle" label="225\n39"]
229 [shape="diamond" label="229\n38"]
230 [shape="circle" label="230\n37"]
231 [shape="circle" label="231\n13"]
232 [shape="circle" label="232\n12"]
226 [shape="circle" label="226\n11"]
227 [shape="circle" label="227\n10"]
222 [shape="circle" label="222\n41"]
212 [shape="circle" label="212\n9"]
213 [shape="circle" label="213\n8"]
351 [shape="circle" label="351\n15"]
337 [shape="circle" label="337\n13"]
338 [shape="circle" label="338\n12"]
333 [shape="circle" label="333\n33"]
323 [shape="circle" label="323\n11"]
316 [shape="circle" label="316\n6"]
319 [shape="circle" label="319\n5"]
499 [shape="circle" label="499\n23"]
144 [shape="circle" label="144\n3"]
146 [shape="circle" label="146\n2"]
496 [shape="circle" label="496\n21"]
178 [shape="circle" label="178\n8"]
190 [shape="circle" label="190\n7"]
191 [shape="diamond" label="191\n6"]
188 [shape="circle" label="188\n5"]
156 [shape="circle" label="156\n12"]
158 [shape="diamond" label="158\n11"]
161 [shape="circle" label="161\n10"]
159 [shape="diamond" label="159\n8"]
164 [shape="circle" label="164\n6"]
171 [shape="circle" label="171\n5"]
172 [shape="circle" label="172\n4"]
173 [shape="circle" label="173\n3"]
165 [shape="circle" label="165\n7"]
160 [shape="circle" label="160\n9"]
189 [shape="circle" label="189\n3"]
192 [shape="circle" label="192\n2"]
469 [shape="circle" label="469\n46"]
471 [shape="circle" label="471\n45"]
464 [shape="circle" label="464\n10"]
461 [shape="circle" label="461\n9"]
455 [shape="circle" label="455\n8"]
457 [shape="circle" label="457\n7"]
444 [shape="diamond" label="444\n6"]
493 [shape="circle" label="493\n5"]
46 [shape="circle" label="46\n10"]
50 [shape="circle" label="50\n9"]
51 [shape="circle" label="51\n8"]
52 [shape="circle" label="52\n7"]
452 [shape="circle" label="452\n0"]
433 [shape="circle" label="433\n68"]
435 [shape="circle" label="435\n67"]
436 [shape="circle" label="436\n66"]
437 [shape="circle" label="437\n65"]
438 [shape="circle" label="438\n64"]
439 [shape="circle" label="439\n63"]
440 [shape="circle" label="440\n62"]
441 [shape="circle" label="441\n61"]
427 [shape="circle" label="427\n60"]
408 [shape="circle" label="408\n83"]
409 [shape="circle" label="409\n82"]
404 [shape="circle" label="404\n81"]
415 [shape="circle" label="415\n94"]
416 [shape="diamond" label="416\n93"]
418 [shape="circle" label="418\n92"]
419 [shape="circle" label="419\n90"]
420 [shape="circle" label="420\n89"]
417 [shape="circle" label="417\n91"]
411 [shape="circle" label="411\n96"]
401 [shape="circle" label="401\n88"]
403 [shape="diamond" label="403\n87"]
406 [shape="diamond" label="406\n86"]
405 [shape="circle" label="405\n85"]
407 [shape="circle" label="407\n84"]
396 [shape="circle" label="396\n79"]
391 [shape="diamond" label="391\n78"]
422 [shape="circle" label="422\n77"]
node [shape="circle"]
subgraph cluster_cpio_mkdir_line {
label="cpio_mkdir_line()"
141 -> 137 [label="return __CPAchecker_TMP_0;"]
138 -> 140 [label="Function start dummy edge int __CPAchecker_TMP_0;"]
140 -> 141 [label="__CPAchecker_TMP_0 = cpio_mkgeneric_line(line, 0);" style="dotted" arrowhead="empty"]}
subgraph cluster_cpio_mkfile {
label="cpio_mkfile()"
264 -> 255 [label=""]
255 -> 236 [label="name = name + namesize;  i = i + 1;"]
236 -> 238 [label="[i <= nlinks]"]
236 -> 239 [label="[!(i <= nlinks)]"]
239 -> 270 [label="unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1"]
270 -> 271 [label="[filebuf == 0]"]
270 -> 272 [label="[!(filebuf == 0)]"]
272 -> 273 [label="free(filebuf);"]
273 -> 271 [label="Num = Num + 1; "]
271 -> 276 [label="[file >= 0]"]
271 -> 275 [label="[!(file >= 0)]"]
275 -> 197 [label="return rc;"]
276 -> 277 [label="close(file);"]
277 -> 275 [label=""]
238 -> 241 [label="[i == nlinks]"]
238 -> 240 [label="[!(i == nlinks)]"]
240 -> 244 [label="[(name[0]) == '/']"]
240 -> 243 [label="[!((name[0]) == '/')]"]
243 -> 248 [label="size_t __CPAchecker_TMP_2;"]
248 -> 249 [label="__CPAchecker_TMP_2 = strlen(name);"]
249 -> 250 [label="namesize = __CPAchecker_TMP_2 + 1;"]
250 -> 251 [label="sprintf(s, \"%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X\", \"070701\", ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);"]
251 -> 252 [label="push_hdr(s);" style="dotted" arrowhead="empty"]
252 -> 253 [label="push_string(name);" style="dotted" arrowhead="empty"]
253 -> 254 [label="push_pad();" style="dotted" arrowhead="empty"]
254 -> 255 [label="[size == 0]"]
254 -> 256 [label="[!(size == 0)]"]
256 -> 259 [label="size_t __CPAchecker_TMP_3;"]
259 -> 260 [label="__CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);"]
260 -> 258 [label="[__CPAchecker_TMP_3 != 1]"]
260 -> 257 [label="[!(__CPAchecker_TMP_3 != 1)]"]
257 -> 263 [label="offset = offset + size;"]
263 -> 264 [label="push_pad();" style="dotted" arrowhead="empty"]
258 -> 261 [label="fprintf(stderr, \"writing filebuf failed\n\");"]
261 -> 270 [label="Goto: l1"]
244 -> 243 [label="const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; "]
241 -> 240 [label="size = buf.st_size; "]
198 -> 209 [label="Function start dummy edge char s[256]; char *filebuf = (void *)0; struct stat buf; long size; int file = -1; int retval; int rc = -1; int namesize; unsigned int i; mode = mode | 32768;"]
209 -> 210 [label="file = open(location, 0);"]
210 -> 212 [label="[file < 0]"]
210 -> 211 [label="[!(file < 0)]"]
211 -> 215 [label="retval = fstat(file, &buf);"]
215 -> 216 [label="[retval == 0]"]
215 -> 217 [label="[!(retval == 0)]"]
217 -> 218 [label="fprintf(stderr, \"File %s could not be stat()'ed\n\", location);"]
218 -> 270 [label="Goto: l1"]
216 -> 220 [label="filebuf = malloc(buf.st_size);"]
220 -> 221 [label="Num = Num - 1;"]
221 -> 222 [label="[Num >= 0]"]
221 -> 223 [label="[!(Num >= 0)]"]
223 -> 224 [label="__assert_fail(\"Num >= 0\", \"tf/gen_init_cpio.c\", 330, \"__PRETTY_FUNCTION__\");"]
224 -> 226 [label="[filebuf == 0]"]
224 -> 225 [label="[!(filebuf == 0)]"]
225 -> 229 [label="retval = read(file, filebuf, buf.st_size);"]
229 -> 231 [label="[retval < 0]"]
229 -> 230 [label="[!(retval < 0)]"]
230 -> 236 [label="size = 0; for i = 1;"]
231 -> 232 [label="fprintf(stderr, \"Can not read %s file\n\", location);"]
232 -> 270 [label="Goto: l1"]
226 -> 227 [label="fprintf(stderr, \"out of memory\n\");"]
227 -> 270 [label="Goto: l1"]
222 -> 224 [label="0;"]
212 -> 213 [label="fprintf(stderr, \"File %s could not be opened for reading\n\", location);"]
213 -> 270 [label="Goto: l1"]}
subgraph cluster_cpio_mkfile_line {
label="cpio_mkfile_line()"
367 -> 368 [label="Label: fail"]
368 -> 369 [label="[dname_len == 0]"]
368 -> 370 [label="[!(dname_len == 0)]"]
370 -> 371 [label="free(dname);"]
371 -> 369 [label="Num = Num + 1; "]
369 -> 302 [label="return rc;"]
303 -> 317 [label="Function start dummy edge char name[4097]; char *dname = (void *)0; char location[4097]; unsigned int mode; int uid; int gid; int nlinks = 1; int end = 0; int dname_len = 0; int rc = -1; int __CPAchecker_TMP_0;"]
317 -> 318 [label="__CPAchecker_TMP_0 = sscanf(line, \"%4096s %4096s %o %d %d %n\", name, location, &mode, &uid, &gid, &end);"]
318 -> 316 [label="[5 > __CPAchecker_TMP_0]"]
318 -> 315 [label="[!(5 > __CPAchecker_TMP_0)]"]
315 -> 323 [label="[end == 0]"]
315 -> 324 [label="[!(end == 0)]"]
324 -> 325 [label="const unsigned short int **__CPAchecker_TMP_1;"]
325 -> 326 [label="__CPAchecker_TMP_1 = __ctype_b_loc();"]
326 -> 323 [label="[(((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0]"]
326 -> 322 [label="[!((((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0)]"]
322 -> 329 [label="int len; int nend; size_t __CPAchecker_TMP_2;"]
329 -> 330 [label="__CPAchecker_TMP_2 = strlen(line);"]
330 -> 331 [label="dname = malloc(__CPAchecker_TMP_2);"]
331 -> 332 [label="Num = Num - 1;"]
332 -> 333 [label="[Num >= 0]"]
332 -> 334 [label="[!(Num >= 0)]"]
334 -> 335 [label="__assert_fail(\"Num >= 0\", \"tf/gen_init_cpio.c\", 439, \"__PRETTY_FUNCTION__\");"]
335 -> 337 [label="[dname == 0]"]
335 -> 336 [label="[!(dname == 0)]"]
336 -> 340 [label="size_t __CPAchecker_TMP_4;"]
340 -> 341 [label="__CPAchecker_TMP_4 = strlen(name);"]
341 -> 342 [label="dname_len = __CPAchecker_TMP_4 + 1;"]
342 -> 343 [label="memcpy(dname, name, dname_len);"]
343 -> 345 [label="do"]
345 -> 352 [label="nend = 0; int __CPAchecker_TMP_6;"]
352 -> 353 [label="__CPAchecker_TMP_6 = sscanf(line + end, \"%4096s %n\", name, &nend);"]
353 -> 351 [label="[__CPAchecker_TMP_6 < 1]"]
353 -> 350 [label="[!(__CPAchecker_TMP_6 < 1)]"]
350 -> 355 [label="size_t __CPAchecker_TMP_7;"]
355 -> 356 [label="__CPAchecker_TMP_7 = strlen(name);"]
356 -> 357 [label="len = __CPAchecker_TMP_7 + 1;"]
357 -> 358 [label="memcpy(dname + dname_len, name, len);"]
358 -> 344 [label="dname_len = dname_len + len; int __CPAchecker_TMP_8 = nlinks; nlinks = nlinks + 1; __CPAchecker_TMP_8; end = end + nend; "]
344 -> 347 [label="const unsigned short int **__CPAchecker_TMP_5;"]
347 -> 348 [label="__CPAchecker_TMP_5 = __ctype_b_loc();"]
348 -> 346 [label="[(((*__CPAchecker_TMP_5)[(int)(line[end])]) & 32768U) == 0]"]
348 -> 345 [label="[!((((*__CPAchecker_TMP_5)[(int)(line[end])]) & 32768U) == 0)]"]
346 -> 321 [label=""]
321 -> 365 [label="char *__CPAchecker_TMP_9;"]
365 -> 366 [label="__CPAchecker_TMP_9 = cpio_replace_env(location);" style="dotted" arrowhead="empty"]
366 -> 367 [label="rc = cpio_mkfile(dname, __CPAchecker_TMP_9, mode, uid, gid, nlinks);" style="dotted" arrowhead="empty"]
351 -> 346 [label="break"]
337 -> 338 [label="fprintf(stderr, \"out of memory (%d)\n\", dname_len);"]
338 -> 368 [label="Goto: fail"]
333 -> 335 [label="0;"]
323 -> 321 [label="dname = name; "]
316 -> 319 [label="fprintf(stderr, \"Unrecognized file format '%s'\", line);"]
319 -> 368 [label="Goto: fail"]}
subgraph cluster_cpio_mkgeneric {
label="cpio_mkgeneric()"
103 -> 105 [label="Function start dummy edge char s[256];"]
105 -> 107 [label="[(name[0]) == '/']"]
105 -> 106 [label="[!((name[0]) == '/')]"]
106 -> 113 [label="unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;"]
113 -> 114 [label="__CPAchecker_TMP_2 = strlen(name);"]
114 -> 115 [label="sprintf(s, \"%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X\", \"070701\", __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);"]
115 -> 116 [label="push_hdr(s);" style="dotted" arrowhead="empty"]
117 -> 102 [label="return 0;"]
116 -> 117 [label="push_rest(name);" style="dotted" arrowhead="empty"]
107 -> 106 [label="const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; "]}
subgraph cluster_cpio_mkgeneric_line {
label="cpio_mkgeneric_line()"
120 -> 129 [label="Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;"]
129 -> 130 [label="__CPAchecker_TMP_0 = sscanf(line, \"%4096s %o %d %d\", name, &mode, &uid, &gid);"]
130 -> 128 [label="[4 != __CPAchecker_TMP_0]"]
130 -> 127 [label="[!(4 != __CPAchecker_TMP_0)]"]
127 -> 133 [label="mode = mode | ((generic_type_table[gt]).mode);"]
133 -> 134 [label="rc = cpio_mkgeneric(name, mode, uid, gid);" style="dotted" arrowhead="empty"]
134 -> 135 [label="Label: fail"]
135 -> 119 [label="return rc;"]
128 -> 131 [label="fprintf(stderr, \"Unrecognized %s format '%s'\", line, (generic_type_table[gt]).type);"]
131 -> 135 [label="Goto: fail"]}
subgraph cluster_cpio_mknod {
label="cpio_mknod()"
175 -> 155 [label="return 0;"]
174 -> 175 [label="push_rest(name);" style="dotted" arrowhead="empty"]
156 -> 158 [label="Function start dummy edge char s[256];"]
158 -> 160 [label="[dev_type == 'b']"]
158 -> 161 [label="[!(dev_type == 'b')]"]
161 -> 159 [label="mode = mode | 8192; "]
159 -> 165 [label="[(name[0]) == '/']"]
159 -> 164 [label="[!((name[0]) == '/')]"]
164 -> 171 [label="unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;"]
171 -> 172 [label="__CPAchecker_TMP_2 = strlen(name);"]
172 -> 173 [label="sprintf(s, \"%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X\", \"070701\", __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 1, (long)default_mtime, 0, 3, 1, maj, min, ((unsigned)__CPAchecker_TMP_2) + 1, 0);"]
173 -> 174 [label="push_hdr(s);" style="dotted" arrowhead="empty"]
165 -> 164 [label="const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; "]
160 -> 159 [label="mode = mode | 24576; "]}
subgraph cluster_cpio_mknod_line {
label="cpio_mknod_line()"
194 -> 195 [label="Label: fail"]
195 -> 177 [label="return rc;"]
178 -> 190 [label="Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; char dev_type; unsigned int maj; unsigned int min; int rc = -1; int __CPAchecker_TMP_0;"]
190 -> 191 [label="__CPAchecker_TMP_0 = sscanf(line, \"%4096s %o %d %d %c %u %u\", name, &mode, &uid, &gid, &dev_type, &maj, &min);"]
191 -> 189 [label="[7 != __CPAchecker_TMP_0]"]
191 -> 188 [label="[!(7 != __CPAchecker_TMP_0)]"]
188 -> 194 [label="rc = cpio_mknod(name, mode, uid, gid, dev_type, maj, min);" style="dotted" arrowhead="empty"]
189 -> 192 [label="fprintf(stderr, \"Unrecognized nod format '%s'\", line);"]
192 -> 195 [label="Goto: fail"]}
subgraph cluster_cpio_mkpipe_line {
label="cpio_mkpipe_line()"
147 -> 143 [label="return __CPAchecker_TMP_0;"]
144 -> 146 [label="Function start dummy edge int __CPAchecker_TMP_0;"]
146 -> 147 [label="__CPAchecker_TMP_0 = cpio_mkgeneric_line(line, 1);" style="dotted" arrowhead="empty"]}
subgraph cluster_cpio_mkslink {
label="cpio_mkslink()"
78 -> 79 [label="push_string(name);" style="dotted" arrowhead="empty"]
81 -> 82 [label="push_pad();" style="dotted" arrowhead="empty"]
82 -> 62 [label="return 0;"]
80 -> 81 [label="push_string(target);" style="dotted" arrowhead="empty"]
79 -> 80 [label="push_pad();" style="dotted" arrowhead="empty"]
63 -> 65 [label="Function start dummy edge char s[256];"]
65 -> 67 [label="[(name[0]) == '/']"]
65 -> 66 [label="[!((name[0]) == '/')]"]
66 -> 73 [label="unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;"]
73 -> 74 [label="__CPAchecker_TMP_2 = strlen(target);"]
74 -> 75 [label="size_t __CPAchecker_TMP_3;"]
75 -> 76 [label="__CPAchecker_TMP_3 = strlen(name);"]
76 -> 77 [label="sprintf(s, \"%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X\", \"070701\", __CPAchecker_TMP_1, 40960 | mode, (long)uid, (long)gid, 1, (long)default_mtime, ((unsigned)__CPAchecker_TMP_2) + 1, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_3) + 1, 0);"]
77 -> 78 [label="push_hdr(s);" style="dotted" arrowhead="empty"]
67 -> 66 [label="const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; "]}
subgraph cluster_cpio_mkslink_line {
label="cpio_mkslink_line()"
99 -> 100 [label="Label: fail"]
100 -> 84 [label="return rc;"]
85 -> 95 [label="Function start dummy edge char name[4097]; char target[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;"]
95 -> 96 [label="__CPAchecker_TMP_0 = sscanf(line, \"%4096s %4096s %o %d %d\", name, target, &mode, &uid, &gid);"]
96 -> 94 [label="[5 != __CPAchecker_TMP_0]"]
96 -> 93 [label="[!(5 != __CPAchecker_TMP_0)]"]
93 -> 99 [label="rc = cpio_mkslink(name, target, mode, uid, gid);" style="dotted" arrowhead="empty"]
94 -> 97 [label="fprintf(stderr, \"Unrecognized dir format '%s'\", line);"]
97 -> 100 [label="Goto: fail"]}
subgraph cluster_cpio_mksock_line {
label="cpio_mksock_line()"
150 -> 152 [label="Function start dummy edge int __CPAchecker_TMP_0;"]
152 -> 153 [label="__CPAchecker_TMP_0 = cpio_mkgeneric_line(line, 2);" style="dotted" arrowhead="empty"]
153 -> 149 [label="return __CPAchecker_TMP_0;"]}
subgraph cluster_cpio_replace_env {
label="cpio_replace_env()"
280 -> 286 [label="Function start dummy edge char expanded[4097]; char *start; char *end; char *var; while"]
286 -> 290 [label="start = strstr(new_location, \"${\");"]
290 -> 288 [label="[start == 0]"]
290 -> 289 [label="[!(start == 0)]"]
289 -> 291 [label="end = strchr(start + 2, '}');"]
291 -> 288 [label="[end == 0]"]
291 -> 287 [label="[!(end == 0)]"]
287 -> 293 [label="*end = 0; *start = *end;"]
293 -> 294 [label="var = getenv(start + 2);"]
294 -> 295 [label="const char *__CPAchecker_TMP_0;"]
295 -> 297 [label="[var == 0]"]
295 -> 296 [label="[!(var == 0)]"]
296 -> 298 [label="__CPAchecker_TMP_0 = var;"]
298 -> 299 [label="snprintf(expanded, 4097, \"%s%s%s\", new_location, __CPAchecker_TMP_0, end + 1);"]
299 -> 300 [label="strcpy(new_location, expanded);"]
300 -> 286 [label=""]
297 -> 298 [label="__CPAchecker_TMP_0 = \"\";"]
288 -> 279 [label="return new_location;"]}
subgraph cluster_cpio_trailer {
label="cpio_trailer()"
53 -> 54 [label="push_rest(name);" style="dotted" arrowhead="empty"]
54 -> 55 [label="while"]
55 -> 57 [label="[(offset % 512) == 0]"]
55 -> 56 [label="[!((offset % 512) == 0)]"]
56 -> 58 [label="putchar(0);"]
58 -> 55 [label="unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; "]
57 -> 45 [label="default return"]
46 -> 50 [label="Function start dummy edge char s[256]; const char name[] = \"TRAILER!!!\"; size_t __CPAchecker_TMP_0;"]
50 -> 51 [label="__CPAchecker_TMP_0 = strlen(name);"]
51 -> 52 [label="sprintf(s, \"%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X\", \"070701\", 0, 0, 0L, 0L, 1, 0L, 0, 0, 0, 0, 0, ((unsigned)__CPAchecker_TMP_0) + 1, 0);"]
52 -> 53 [label="push_hdr(s);" style="dotted" arrowhead="empty"]}
subgraph cluster_main {
label="main()"
379 -> 387 [label="INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; typedef __intptr_t intptr_t; typedef __socklen_t socklen_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int lockf(int __fd, int __cmd, __off_t __len); int fdatasync(int __fildes); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); int * __errno_location(); enum  {   _ISupper = 256,   _ISlower = 512,   _ISalpha = 1024,   _ISdigit = 2048,   _ISxdigit = 4096,   _ISspace = 8192,   _ISprint = 16384,   _ISgraph = 32768,   _ISblank = 1,   _IScntrl = 2,   _ISpunct = 4,   _ISalnum = 8 } ; const unsigned short int ** __ctype_b_loc(); const __int32_t ** __ctype_tolower_loc(); const __int32_t ** __ctype_toupper_loc(); int isalnum(int); int isalpha(int); int iscntrl(int); int isdigit(int); int islower(int); int isgraph(int); int isprint(int); int ispunct(int); int isspace(int); int isupper(int); int isxdigit(int); int tolower(int __c); int toupper(int __c); int isblank(int); int isascii(int __c); int toascii(int __c); int _toupper(int); int _tolower(int); int isalnum_l(int, __locale_t ); int isalpha_l(int, __locale_t ); int iscntrl_l(int, __locale_t ); int isdigit_l(int, __locale_t ); int islower_l(int, __locale_t ); int isgraph_l(int, __locale_t ); int isprint_l(int, __locale_t ); int ispunct_l(int, __locale_t ); int isspace_l(int, __locale_t ); int isupper_l(int, __locale_t ); int isxdigit_l(int, __locale_t ); int isblank_l(int, __locale_t ); int __tolower_l(int __c, __locale_t __l); int tolower_l(int __c, __locale_t __l); int __toupper_l(int __c, __locale_t __l); int toupper_l(int __c, __locale_t __l); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 1; unsigned int offset = 0U; unsigned int ino = 721; time_t default_mtime = 0L; struct file_handler {   const char *type;   int (*handler)(const char *line); } ; void push_string(const char *name); void push_pad(); void push_rest(const char *name); void push_hdr(const char *s); void cpio_trailer(); int cpio_mkslink(const char *name, const char *target, unsigned int mode, uid_t uid, gid_t gid); int cpio_mkslink_line(const char *line); int cpio_mkgeneric(const char *name, unsigned int mode, uid_t uid, gid_t gid); enum generic_types {   GT_DIR = 0,   GT_PIPE = 1,   GT_SOCK = 2 } ; struct generic_type {   const char *type;   mode_t mode; } ; struct generic_type generic_type_table[] = { [0] = { .type = \"dir\", .mode = 16384 }, [1] = { .type = \"pipe\", .mode = 4096 }, [2] = { .type = \"sock\", .mode = 49152 } }; int cpio_mkgeneric_line(const char *line, enum generic_types gt); int cpio_mkdir_line(const char *line); int cpio_mkpipe_line(const char *line); int cpio_mksock_line(const char *line); int cpio_mknod(const char *name, unsigned int mode, uid_t uid, gid_t gid, char dev_type, unsigned int maj, unsigned int min); int cpio_mknod_line(const char *line); int cpio_mkfile(const char *name, const char *location, unsigned int mode, uid_t uid, gid_t gid, unsigned int nlinks); char * cpio_replace_env(char *new_location); int cpio_mkfile_line(const char *line); void usage(const char *prog); struct file_handler file_handler_table[] = { { .type = \"file\", .handler = &cpio_mkfile_line }, { .type = \"nod\", .handler = &cpio_mknod_line }, { .type = \"dir\", .handler = &cpio_mkdir_line }, { .type = \"slink\", .handler = &cpio_mkslink_line }, { .type = \"pipe\", .handler = &cpio_mkpipe_line }, { .type = \"sock\", .handler = &cpio_mksock_line }, { .type = (void *)0, .handler = (void *)0 } }; int main(int argc, char *argv[]); Function start dummy edge FILE *cpio_list; char line[8242]; char *args; char *type; int ec = 0; int line_nr = 0; const char *filename;"]
387 -> 388 [label="default_mtime = time((void *)0);"]
388 -> 389 [label="while"]
389 -> 392 [label=" int opt;"]
392 -> 393 [label="opt = getopt(argc, argv, \"t:h\");"]
393 -> 394 [label="char *invalid;"]
394 -> 396 [label="[opt == -1]"]
394 -> 395 [label="[!(opt == -1)]"]
395 -> 398 [label="switch (opt)"]
398 -> 401 [label="[opt == 't']"]
398 -> 402 [label="[!(opt == 't')]"]
402 -> 411 [label="[opt == 'h']"]
402 -> 412 [label="[!(opt == 'h')]"]
412 -> 413 [label="[opt == '?']"]
412 -> 414 [label="[!(opt == '?')]"]
414 -> 399 [label=""]
399 -> 389 [label=""]
413 -> 415 [label="usage(argv[0]);" style="dotted" arrowhead="empty"]
423 -> 424 [label="exit(1);"]
424 -> 421 [label=""]
421 -> 429 [label="filename = argv[optind]; int __CPAchecker_TMP_1;"]
429 -> 430 [label="__CPAchecker_TMP_1 = strcmp(filename, \"-\");"]
430 -> 427 [label="[__CPAchecker_TMP_1 == 0]"]
430 -> 428 [label="[!(__CPAchecker_TMP_1 == 0)]"]
428 -> 434 [label="cpio_list = fopen(filename, \"r\");"]
434 -> 433 [label="[cpio_list == 0]"]
434 -> 432 [label="[!(cpio_list == 0)]"]
432 -> 426 [label=""]
426 -> 442 [label="while"]
442 -> 446 [label=" int type_idx; size_t slen;"]
446 -> 447 [label="slen = strlen(line);"]
447 -> 450 [label="int __CPAchecker_TMP_4 = line_nr; line_nr = line_nr + 1; __CPAchecker_TMP_4;"]
450 -> 452 [label="['#' == (*line)]"]
450 -> 451 [label="[!('#' == (*line))]"]
451 -> 456 [label="type = strtok(line, \" \t\");"]
456 -> 455 [label="[type == 0]"]
456 -> 454 [label="[!(type == 0)]"]
454 -> 461 [label="['\xa' == (*type)]"]
454 -> 460 [label="[!('\xa' == (*type))]"]
460 -> 465 [label="size_t __CPAchecker_TMP_5;"]
465 -> 466 [label="__CPAchecker_TMP_5 = strlen(type);"]
466 -> 464 [label="[slen == __CPAchecker_TMP_5]"]
466 -> 463 [label="[!(slen == __CPAchecker_TMP_5)]"]
463 -> 470 [label="args = strtok((void *)0, \"\n\");"]
470 -> 469 [label="[args == 0]"]
470 -> 468 [label="[!(args == 0)]"]
468 -> 474 [label="for type_idx = 0;"]
474 -> 477 [label="[((file_handler_table[type_idx]).type) == 0]"]
474 -> 476 [label="[!(((file_handler_table[type_idx]).type) == 0)]"]
476 -> 481 [label="int rc; int __CPAchecker_TMP_6;"]
481 -> 482 [label="__CPAchecker_TMP_6 = strcmp(line, (file_handler_table[type_idx]).type);"]
482 -> 480 [label="[__CPAchecker_TMP_6 == 0]"]
482 -> 479 [label="[!(__CPAchecker_TMP_6 == 0)]"]
479 -> 474 [label=" type_idx = type_idx + 1;"]
480 -> 496 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mknod_line)]"]
480 -> 497 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mknod_line))]"]
497 -> 499 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line)]"]
497 -> 500 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line))]"]
500 -> 502 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line)]"]
500 -> 503 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line))]"]
503 -> 505 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line)]"]
503 -> 506 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line))]"]
506 -> 508 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line)]"]
506 -> 509 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line))]"]
509 -> 511 [label="[((file_handler_table[type_idx]).handler) == (&cpio_mksock_line)]"]
509 -> 512 [label="[!(((file_handler_table[type_idx]).handler) == (&cpio_mksock_line))]"]
512 -> 485 [label="rc = ((file_handler_table[type_idx]).handler)(args);"]
485 -> 483 [label="[rc == 0]"]
485 -> 484 [label="[!(rc == 0)]"]
484 -> 486 [label="ec = rc;"]
486 -> 487 [label="fprintf(stderr, \" line %d\n\", line_nr);"]
487 -> 483 [label=""]
483 -> 477 [label="break"]
477 -> 490 [label="[((void *)0) == ((file_handler_table[type_idx]).type)]"]
477 -> 489 [label="[!(((void *)0) == ((file_handler_table[type_idx]).type))]"]
489 -> 442 [label=""]
490 -> 491 [label="fprintf(stderr, \"unknown file type line %d: '%s'\n\", line_nr, line);"]
491 -> 489 [label=""]
511 -> 513 [label="rc = cpio_mksock_line(args);" style="dotted" arrowhead="empty"]
494 -> 492 [label=""]
492 -> 495 [label="exit(ec);"]
495 -> 378 [label="default return"]
498 -> 485 [label="skip"]
513 -> 485 [label="skip"]
501 -> 485 [label="skip"]
510 -> 485 [label="skip"]
507 -> 485 [label="skip"]
504 -> 485 [label="skip"]
508 -> 510 [label="rc = cpio_mkdir_line(args);" style="dotted" arrowhead="empty"]
505 -> 507 [label="rc = cpio_mkslink_line(args);" style="dotted" arrowhead="empty"]
502 -> 504 [label="rc = cpio_mkfile_line(args);" style="dotted" arrowhead="empty"]
499 -> 501 [label="rc = cpio_mkpipe_line(args);" style="dotted" arrowhead="empty"]
496 -> 498 [label="rc = cpio_mknod_line(args);" style="dotted" arrowhead="empty"]
469 -> 471 [label="fprintf(stderr, \"ERROR: incorrect format, newline required line %d: '%s'\n\", line_nr, line);"]
471 -> 468 [label="ec = -1; "]
464 -> 442 [label="continue"]
461 -> 442 [label="continue"]
455 -> 457 [label="fprintf(stderr, \"ERROR: incorrect format, could not locate file type line %d: '%s'\n\", line_nr, line);"]
457 -> 444 [label="ec = -1; break"]
444 -> 493 [label="[ec == 0]"]
444 -> 492 [label="[!(ec == 0)]"]
493 -> 494 [label="cpio_trailer();" style="dotted" arrowhead="empty"]
452 -> 442 [label="continue"]
433 -> 435 [label="int *__CPAchecker_TMP_2;"]
435 -> 436 [label="__CPAchecker_TMP_2 = __errno_location();"]
436 -> 437 [label="char *__CPAchecker_TMP_3;"]
437 -> 438 [label="__CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);"]
438 -> 439 [label="fprintf(stderr, \"ERROR: unable to open '%s': %s\n\n\", filename, __CPAchecker_TMP_3);"]
439 -> 440 [label="usage(argv[0]);" style="dotted" arrowhead="empty"]
440 -> 441 [label="exit(1);"]
441 -> 426 [label=""]
427 -> 426 [label="cpio_list = stdin; "]
408 -> 409 [label="exit(1);"]
409 -> 404 [label=""]
404 -> 399 [label="break"]
415 -> 416 [label="int __CPAchecker_TMP_0;"]
416 -> 417 [label="[opt == 'h']"]
416 -> 418 [label="[!(opt == 'h')]"]
418 -> 419 [label="__CPAchecker_TMP_0 = 1;"]
419 -> 420 [label="exit(__CPAchecker_TMP_0);"]
420 -> 399 [label=""]
417 -> 419 [label="__CPAchecker_TMP_0 = 0;"]
411 -> 413 [label="fall through"]
401 -> 403 [label="default_mtime = strtol(optarg, &invalid, 10);"]
403 -> 405 [label="[(*optarg) == 0]"]
403 -> 406 [label="[!((*optarg) == 0)]"]
406 -> 404 [label="[(*invalid) == 0]"]
406 -> 405 [label="[!((*invalid) == 0)]"]
405 -> 407 [label="fprintf(stderr, \"Invalid timestamp: %s\n\", optarg);"]
407 -> 408 [label="usage(argv[0]);" style="dotted" arrowhead="empty"]
396 -> 391 [label="break"]
391 -> 422 [label="[(argc - optind) != 1]"]
391 -> 421 [label="[!((argc - optind) != 1)]"]
422 -> 423 [label="usage(argv[0]);" style="dotted" arrowhead="empty"]}
subgraph cluster_push_hdr {
label="push_hdr()"
41 -> 42 [label="Function start dummy edge"]
42 -> 43 [label="fputs(s, stdout);"]
43 -> 40 [label="offset = offset + 110; default return"]}
subgraph cluster_push_pad {
label="push_pad()"
10 -> 12 [label="Function start dummy edge while"]
12 -> 14 [label="[(offset & 3) == 0]"]
12 -> 13 [label="[!((offset & 3) == 0)]"]
13 -> 15 [label="putchar(0);"]
15 -> 12 [label="unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; "]
14 -> 9 [label="default return"]}
subgraph cluster_push_rest {
label="push_rest()"
20 -> 22 [label="Function start dummy edge size_t __CPAchecker_TMP_0;"]
22 -> 23 [label="__CPAchecker_TMP_0 = strlen(name);"]
23 -> 25 [label="unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;"]
25 -> 26 [label="fputs(name, stdout);"]
26 -> 27 [label="putchar(0);"]
27 -> 30 [label="offset = offset + name_len; tmp_ofs = name_len + 110; while"]
30 -> 32 [label="[(tmp_ofs & 3) == 0]"]
30 -> 31 [label="[!((tmp_ofs & 3) == 0)]"]
31 -> 33 [label="putchar(0);"]
33 -> 30 [label="unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; "]
32 -> 19 [label="default return"]}
subgraph cluster_push_string {
label="push_string()"
1 -> 3 [label="Function start dummy edge size_t __CPAchecker_TMP_0;"]
3 -> 4 [label="__CPAchecker_TMP_0 = strlen(name);"]
4 -> 5 [label="unsigned int name_len = __CPAchecker_TMP_0 + 1;"]
5 -> 6 [label="fputs(name, stdout);"]
6 -> 7 [label="putchar(0);"]
7 -> 0 [label="offset = offset + name_len; default return"]}
subgraph cluster_usage {
label="usage()"
375 -> 376 [label="Function start dummy edge"]
376 -> 377 [label="fprintf(stderr, \"Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n\", prog);"]
377 -> 374 [label="default return"]}
413 -> 375 [label="usage(argv[0])"]
374 -> 415 [label="Return edge from usage to main"]
374 -> 408 [label="Return edge from usage to main"]
374 -> 440 [label="Return edge from usage to main"]
374 -> 423 [label="Return edge from usage to main"]
511 -> 150 [label="cpio_mksock_line(args)"]
152 -> 120 [label="cpio_mkgeneric_line(line, 2)"]
133 -> 103 [label="cpio_mkgeneric(name, mode, uid, gid)"]
115 -> 41 [label="push_hdr(s)"]
40 -> 252 [label="Return edge from push_hdr to cpio_mkfile"]
40 -> 116 [label="Return edge from push_hdr to cpio_mkgeneric"]
40 -> 174 [label="Return edge from push_hdr to cpio_mknod"]
40 -> 78 [label="Return edge from push_hdr to cpio_mkslink"]
40 -> 53 [label="Return edge from push_hdr to cpio_trailer"]
53 -> 20 [label="push_rest(name)"]
19 -> 117 [label="Return edge from push_rest to cpio_mkgeneric"]
19 -> 175 [label="Return edge from push_rest to cpio_mknod"]
19 -> 54 [label="Return edge from push_rest to cpio_trailer"]
45 -> 494 [label="Return edge from cpio_trailer to main"]
155 -> 194 [label="Return edge from cpio_mknod to cpio_mknod_line"]
177 -> 498 [label="Return edge from cpio_mknod_line to main"]
102 -> 134 [label="Return edge from cpio_mkgeneric to cpio_mkgeneric_line"]
119 -> 141 [label="Return edge from cpio_mkgeneric_line to cpio_mkdir_line"]
119 -> 147 [label="Return edge from cpio_mkgeneric_line to cpio_mkpipe_line"]
119 -> 153 [label="Return edge from cpio_mkgeneric_line to cpio_mksock_line"]
149 -> 513 [label="Return edge from cpio_mksock_line to main"]
143 -> 501 [label="Return edge from cpio_mkpipe_line to main"]
137 -> 510 [label="Return edge from cpio_mkdir_line to main"]
78 -> 1 [label="push_string(name)"]
0 -> 253 [label="Return edge from push_string to cpio_mkfile"]
0 -> 79 [label="Return edge from push_string to cpio_mkslink"]
0 -> 81 [label="Return edge from push_string to cpio_mkslink"]
81 -> 10 [label="push_pad()"]
9 -> 254 [label="Return edge from push_pad to cpio_mkfile"]
9 -> 264 [label="Return edge from push_pad to cpio_mkfile"]
9 -> 80 [label="Return edge from push_pad to cpio_mkslink"]
9 -> 82 [label="Return edge from push_pad to cpio_mkslink"]
62 -> 99 [label="Return edge from cpio_mkslink to cpio_mkslink_line"]
84 -> 507 [label="Return edge from cpio_mkslink_line to main"]
80 -> 1 [label="push_string(target)"]
197 -> 367 [label="Return edge from cpio_mkfile to cpio_mkfile_line"]
302 -> 504 [label="Return edge from cpio_mkfile_line to main"]
251 -> 41 [label="push_hdr(s)"]
252 -> 1 [label="push_string(name)"]
253 -> 10 [label="push_pad()"]
263 -> 10 [label="push_pad()"]
79 -> 10 [label="push_pad()"]
174 -> 20 [label="push_rest(name)"]
116 -> 20 [label="push_rest(name)"]
508 -> 138 [label="cpio_mkdir_line(args)"]
140 -> 120 [label="cpio_mkgeneric_line(line, 0)"]
505 -> 85 [label="cpio_mkslink_line(args)"]
93 -> 63 [label="cpio_mkslink(name, target, mode, uid, gid)"]
77 -> 41 [label="push_hdr(s)"]
502 -> 303 [label="cpio_mkfile_line(args)"]
365 -> 280 [label="cpio_replace_env(location)"]
279 -> 366 [label="Return edge from cpio_replace_env to cpio_mkfile_line"]
366 -> 198 [label="cpio_mkfile(dname, __CPAchecker_TMP_9, mode, uid, gid, nlinks)"]
499 -> 144 [label="cpio_mkpipe_line(args)"]
146 -> 120 [label="cpio_mkgeneric_line(line, 1)"]
496 -> 178 [label="cpio_mknod_line(args)"]
188 -> 156 [label="cpio_mknod(name, mode, uid, gid, dev_type, maj, min)"]
173 -> 41 [label="push_hdr(s)"]
493 -> 46 [label="cpio_trailer()"]
52 -> 41 [label="push_hdr(s)"]
439 -> 375 [label="usage(argv[0])"]
407 -> 375 [label="usage(argv[0])"]
422 -> 375 [label="usage(argv[0])"]}