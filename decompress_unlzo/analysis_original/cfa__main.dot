digraph main {
52 [shape="circle" label="52\n133"]
62 [shape="diamond" label="62\n132"]
65 [shape="diamond" label="65\n130"]
64 [shape="circle" label="64\n131"]
63 [shape="diamond" label="63\n122"]
83 [shape="diamond" label="83\n118"]
84 [shape="diamond" label="84\n121"]
82 [shape="circle" label="82\n120"]
229 [shape="diamond" label="229\n9"]
231 [shape="circle" label="231\n8"]
230 [shape="circle" label="230\n6"]
234 [shape="circle" label="234\n1"]
51 [shape="circle" label="51\n0"]
89 [shape="diamond" label="89\n116"]
88 [shape="circle" label="88\n117"]
81 [shape="circle" label="81\n108"]
105 [shape="diamond" label="105\n107"]
106 [shape="diamond" label="106\n105"]
107 [shape="circle" label="107\n106"]
109 [shape="circle" label="109\n101"]
110 [shape="circle" label="110\n104"]
115 [shape="circle" label="115\n100"]
116 [shape="diamond" label="116\n99"]
114 [shape="circle" label="114\n19"]
113 [shape="circle" label="113\n98"]
120 [shape="diamond" label="120\n97"]
121 [shape="diamond" label="121\n94"]
122 [shape="circle" label="122\n96"]
125 [shape="circle" label="125\n92"]
126 [shape="circle" label="126\n93"]
128 [shape="doublecircle" label="128\n91"]
129 [shape="diamond" label="129\n90"]
131 [shape="diamond" label="131\n84"]
133 [shape="diamond" label="133\n89"]
132 [shape="circle" label="132\n88"]
139 [shape="circle" label="139\n21"]
138 [shape="circle" label="138\n83"]
144 [shape="diamond" label="144\n81"]
146 [shape="diamond" label="146\n24"]
145 [shape="diamond" label="145\n80"]
152 [shape="circle" label="152\n26"]
151 [shape="diamond" label="151\n79"]
155 [shape="diamond" label="155\n73"]
157 [shape="diamond" label="157\n78"]
156 [shape="circle" label="156\n77"]
163 [shape="circle" label="163\n28"]
162 [shape="circle" label="162\n72"]
168 [shape="diamond" label="168\n70"]
170 [shape="circle" label="170\n30"]
171 [shape="diamond" label="171\n69"]
169 [shape="diamond" label="169\n68"]
174 [shape="diamond" label="174\n62"]
176 [shape="diamond" label="176\n67"]
175 [shape="circle" label="175\n66"]
182 [shape="circle" label="182\n32"]
181 [shape="circle" label="181\n61"]
190 [shape="diamond" label="190\n59"]
188 [shape="circle" label="188\n56"]
187 [shape="circle" label="187\n58"]
186 [shape="diamond" label="186\n52"]
198 [shape="diamond" label="198\n47"]
200 [shape="circle" label="200\n51"]
202 [shape="diamond" label="202\n49"]
199 [shape="circle" label="199\n48"]
204 [shape="diamond" label="204\n45"]
205 [shape="circle" label="205\n46"]
207 [shape="circle" label="207\n43"]
208 [shape="circle" label="208\n44"]
211 [shape="diamond" label="211\n42"]
212 [shape="circle" label="212\n35"]
213 [shape="diamond" label="213\n41"]
215 [shape="circle" label="215\n40"]
214 [shape="circle" label="214\n37"]
217 [shape="doublecircle" label="217\n39"]
219 [shape="circle" label="219\n36"]
220 [shape="circle" label="220\n38"]
224 [shape="diamond" label="224\n17"]
226 [shape="circle" label="226\n16"]
225 [shape="circle" label="225\n14"]
192 [shape="diamond" label="192\n55"]
194 [shape="circle" label="194\n34"]
195 [shape="diamond" label="195\n54"]
193 [shape="circle" label="193\n53"]
196 [shape="circle" label="196\n33"]
183 [shape="circle" label="183\n31"]
177 [shape="diamond" label="177\n65"]
179 [shape="circle" label="179\n63"]
178 [shape="circle" label="178\n64"]
172 [shape="circle" label="172\n29"]
164 [shape="circle" label="164\n27"]
158 [shape="diamond" label="158\n76"]
160 [shape="circle" label="160\n74"]
159 [shape="circle" label="159\n75"]
147 [shape="circle" label="147\n22"]
148 [shape="circle" label="148\n23"]
134 [shape="diamond" label="134\n87"]
136 [shape="circle" label="136\n85"]
135 [shape="circle" label="135\n86"]
92 [shape="circle" label="92\n11"]
93 [shape="circle" label="93\n115"]
96 [shape="diamond" label="96\n114"]
98 [shape="circle" label="98\n13"]
97 [shape="circle" label="97\n113"]
101 [shape="diamond" label="101\n112"]
102 [shape="circle" label="102\n110"]
103 [shape="circle" label="103\n111"]
104 [shape="circle" label="104\n109"]
99 [shape="circle" label="99\n12"]
94 [shape="circle" label="94\n10"]
68 [shape="circle" label="68\n3"]
69 [shape="circle" label="69\n129"]
72 [shape="diamond" label="72\n128"]
74 [shape="circle" label="74\n5"]
73 [shape="circle" label="73\n127"]
77 [shape="diamond" label="77\n126"]
78 [shape="circle" label="78\n124"]
79 [shape="circle" label="79\n125"]
80 [shape="circle" label="80\n123"]
75 [shape="circle" label="75\n4"]
70 [shape="circle" label="70\n2"]
82 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">82</td><td align="left">error(\"Both input pointer and fill function provided, don't know what to do\");</td></tr><tr><td align="right">85</td><td align="left">Goto: exit_1</td></tr></table>>]
82 -> 229[label=""]
231 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">231</td><td align="left">free(out_buf);</td></tr><tr><td align="right">232</td><td align="left"></td></tr></table>>]
231 -> 230[label=""]
110 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">110</td><td align="left">in_buf = in_buf + 297;</td></tr><tr><td align="right">111</td><td align="left">in_len = fill(in_buf, 297);</td></tr><tr><td align="right">112</td><td align="left"></td></tr></table>>]
110 -> 109[label=""]
122 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">122</td><td align="left">memcpy(in_buf_save, in_buf, in_len);</td></tr><tr><td align="right">123</td><td align="left">in_buf = in_buf_save; </td></tr></table>>]
122 -> 121[label=""]
138 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">138</td><td align="left">dst_len = get_unaligned_be32(in_buf);</td></tr><tr><td align="right">142</td><td align="left">in_buf = in_buf + 4; in_len = in_len - 4;</td></tr></table>>]
138 -> 144[label=""]
162 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">162</td><td align="left">src_len = get_unaligned_be32(in_buf);</td></tr><tr><td align="right">166</td><td align="left">in_buf = in_buf + 8; in_len = in_len - 8;</td></tr></table>>]
162 -> 168[label=""]
181 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">181</td><td align="left">tmp = dst_len; void __CPAchecker_TMP_3;</td></tr><tr><td align="right">189</td><td align="left">__CPAchecker_TMP_3 = unlikely(dst_len == src_len);</td></tr></table>>]
181 -> 190[label=""]
187 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">187</td><td align="left">memcpy(out_buf, in_buf, src_len);</td></tr><tr><td align="right">191</td><td align="left"></td></tr></table>>]
187 -> 186[label=""]
200 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">200</td><td align="left">long int __CPAchecker_TMP_4;</td></tr><tr><td align="right">201</td><td align="left">__CPAchecker_TMP_4 = flush(out_buf, dst_len);</td></tr></table>>]
200 -> 202[label=""]
226 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">226</td><td align="left">free(in_buf_save);</td></tr><tr><td align="right">227</td><td align="left"></td></tr></table>>]
226 -> 225[label=""]
152 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">152</td><td align="left">error(\"dest len longer than block size\");</td></tr><tr><td align="right">153</td><td align="left">Goto: exit_2</td></tr></table>>]
152 -> 224[label=""]
139 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">139</td><td align="left">error(\"file corrupted\");</td></tr><tr><td align="right">140</td><td align="left">Goto: exit_2</td></tr></table>>]
139 -> 224[label=""]
114 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">114</td><td align="left">error(\"invalid header\");</td></tr><tr><td align="right">117</td><td align="left">Goto: exit_2</td></tr></table>>]
114 -> 224[label=""]
52 -> 62 [label="INIT GLOBAL VARS void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 { int __val[2]; }; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 { unsigned int __wch; char __wchb[4]; }; struct __anon_type_2 { int __count; union __anon_type_1 __value; }; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 { __off_t __pos; __mbstate_t __state; }; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 { __off64_t __pos; __mbstate_t __state; }; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t; typedef void _IO_lock_t; struct _IO_marker { struct _IO_marker *_next; struct _IO_FILE *_sbuf; int _pos; }; enum __codecvt_result { __codecvt_ok = 0, __codecvt_partial = 1, __codecvt_error = 2, __codecvt_noconv = 3 }; struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40UL]; }; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t ); size_t _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 { int quot; int rem; }; typedef struct __anon_type_5 div_t; struct __anon_type_6 { long int quot; long int rem; }; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 { long long int quot; long long int rem; }; typedef struct __anon_type_7 lldiv_t; size_t __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 { unsigned long int __val[32UL]; }; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec { __time_t tv_sec; long int tv_nsec; }; struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 { __fd_mask __fds_bits[32]; }; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 { char __size[56]; long int __align; }; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list { struct __pthread_internal_list *__prev; struct __pthread_internal_list *__next; }; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s { int __lock; unsigned int __count; int __owner; unsigned int __nusers; int __kind; int __spins; __pthread_list_t __list; }; union __anon_type_11 { struct __pthread_mutex_s __data; char __size[40]; long int __align; }; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 { char __size[4]; int __align; }; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 { int __lock; unsigned int __futex; unsigned long long int __total_seq; unsigned long long int __wakeup_seq; unsigned long long int __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq; }; union __anon_type_14 { struct __anon_type_13 __data; char __size[48]; long long int __align; }; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 { char __size[4]; int __align; }; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 { int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long int __pad1; unsigned long int __pad2; unsigned int __flags; }; union __anon_type_17 { struct __anon_type_16 __data; char __size[56]; long int __align; }; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 { char __size[8]; long int __align; }; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 { char __size[32]; long int __align; }; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 { char __size[4]; int __align; }; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data { int32_t *fptr; int32_t *rptr; int32_t *state; int rand_type; int rand_deg; int rand_sep; int32_t *end_ptr; }; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data { unsigned short int __x[3]; unsigned short int __old_x[3]; unsigned short int __c; unsigned short int __init; unsigned long long int __a; }; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t div(int __numer, int __denom); ldiv_t ldiv(long int __numer, long int __denom); lldiv_t lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct { struct locale_data *__locales[13]; const unsigned short int *__ctype_b; const int *__ctype_tolower; const int *__ctype_toupper; const char *__names[13]; }; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t strcspn(const char *__s, const char *__reject); size_t strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t strlen(const char *__s); size_t strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); const unsigned char lzop_magic[] = { 137, 76, 90, 79, 0, 13, 10, 26, 10 }; int get_unaligned_be16(int *p); int get_unaligned_be32(int *p); void unlikely(int); void lzo1x_worst_compress(); void lzo1x_decompress_safe(int *in_buf, int, int, void *); int LZO_E_OK = 0; int Num = 2; int parse_header(int *input, long *skip, long in_len); int main(int *input, long in_len, long int (*fill)(void *, unsigned long), long int (*flush)(void *, unsigned long), int *output, long *posp, void (*error)(char *x)); Function start dummy edge int r = 0; long skip = 0; int src_len; int dst_len; int tmp; int *in_buf; int *in_buf_save; int *out_buf; int ret = -1;" fontname="Courier New"]
62 -> 65 [label="[output == 0]" fontname="Courier New"]
62 -> 64 [label="[!(output == 0)]" fontname="Courier New"]
63 -> 83 [label="[input == 0]" fontname="Courier New"]
63 -> 84 [label="[!(input == 0)]" fontname="Courier New"]
84 -> 83 [label="[fill == 0]" fontname="Courier New"]
84 -> 82 [label="[!(fill == 0)]" fontname="Courier New"]
229 -> 231 [label="[output == 0]" fontname="Courier New"]
229 -> 230 [label="[!(output == 0)]" fontname="Courier New"]
230 -> 234 [label="Num = Num + 1; Label: exit" fontname="Courier New"]
234 -> 51 [label="return ret;" fontname="Courier New"]
83 -> 89 [label="[input == 0]" fontname="Courier New"]
83 -> 88 [label="[!(input == 0)]" fontname="Courier New"]
81 -> 105 [label="in_buf_save = in_buf;" fontname="Courier New"]
105 -> 106 [label="[posp == 0]" fontname="Courier New"]
105 -> 107 [label="[!(posp == 0)]" fontname="Courier New"]
106 -> 109 [label="[fill == 0]" fontname="Courier New"]
106 -> 110 [label="[!(fill == 0)]" fontname="Courier New"]
109 -> 115 [label="int __CPAchecker_TMP_2;" fontname="Courier New"]
100001 [shape="component" label="parse_header"]
115 -> 100001 [label="__CPAchecker_TMP_2 = parse_header(in_buf, &skip, in_len);" fontname="Courier New"]
100001 -> 116 [label="" fontname="Courier New"]
116 -> 114 [label="[__CPAchecker_TMP_2 == 0]" fontname="Courier New"]
116 -> 113 [label="[!(__CPAchecker_TMP_2 == 0)]" fontname="Courier New"]
120 -> 121 [label="[fill == 0]" fontname="Courier New"]
120 -> 122 [label="[!(fill == 0)]" fontname="Courier New"]
121 -> 125 [label="[posp == 0]" fontname="Courier New"]
121 -> 126 [label="[!(posp == 0)]" fontname="Courier New"]
125 -> 128 [label="for" fontname="Courier New"]
128 -> 129 [label="" fontname="Courier New"]
129 -> 131 [label="[fill == 0]" fontname="Courier New"]
129 -> 133 [label="[!(fill == 0)]" fontname="Courier New"]
133 -> 132 [label="[in_len < 4]" fontname="Courier New"]
133 -> 131 [label="[!(in_len < 4)]" fontname="Courier New"]
131 -> 139 [label="[in_len < 4]" fontname="Courier New"]
131 -> 138 [label="[!(in_len < 4)]" fontname="Courier New"]
144 -> 146 [label="[dst_len == 0]" fontname="Courier New"]
144 -> 145 [label="[!(dst_len == 0)]" fontname="Courier New"]
145 -> 152 [label="[dst_len > 262144L]" fontname="Courier New"]
145 -> 151 [label="[!(dst_len > 262144L)]" fontname="Courier New"]
151 -> 155 [label="[fill == 0]" fontname="Courier New"]
151 -> 157 [label="[!(fill == 0)]" fontname="Courier New"]
157 -> 156 [label="[in_len < 8]" fontname="Courier New"]
157 -> 155 [label="[!(in_len < 8)]" fontname="Courier New"]
155 -> 163 [label="[in_len < 8]" fontname="Courier New"]
155 -> 162 [label="[!(in_len < 8)]" fontname="Courier New"]
168 -> 170 [label="[src_len <= 0]" fontname="Courier New"]
168 -> 171 [label="[!(src_len <= 0)]" fontname="Courier New"]
171 -> 170 [label="[src_len > dst_len]" fontname="Courier New"]
171 -> 169 [label="[!(src_len > dst_len)]" fontname="Courier New"]
169 -> 174 [label="[fill == 0]" fontname="Courier New"]
169 -> 176 [label="[!(fill == 0)]" fontname="Courier New"]
176 -> 175 [label="[in_len < src_len]" fontname="Courier New"]
176 -> 174 [label="[!(in_len < src_len)]" fontname="Courier New"]
174 -> 182 [label="[in_len < src_len]" fontname="Courier New"]
174 -> 181 [label="[!(in_len < src_len)]" fontname="Courier New"]
190 -> 188 [label="[__CPAchecker_TMP_3 == 0]" fontname="Courier New"]
190 -> 187 [label="[!(__CPAchecker_TMP_3 == 0)]" fontname="Courier New"]
186 -> 198 [label="[flush == 0]" fontname="Courier New"]
186 -> 200 [label="[!(flush == 0)]" fontname="Courier New"]
202 -> 199 [label="[__CPAchecker_TMP_4 != dst_len]" fontname="Courier New"]
202 -> 198 [label="[!(__CPAchecker_TMP_4 != dst_len)]" fontname="Courier New"]
198 -> 204 [label="[output == 0]" fontname="Courier New"]
198 -> 205 [label="[!(output == 0)]" fontname="Courier New"]
204 -> 207 [label="[posp == 0]" fontname="Courier New"]
204 -> 208 [label="[!(posp == 0)]" fontname="Courier New"]
207 -> 211 [label="in_buf = in_buf + src_len; in_len = in_len - src_len;" fontname="Courier New"]
211 -> 212 [label="[fill == 0]" fontname="Courier New"]
211 -> 213 [label="[!(fill == 0)]" fontname="Courier New"]
213 -> 215 [label="[in_len > 0]" fontname="Courier New"]
213 -> 214 [label="[!(in_len > 0)]" fontname="Courier New"]
214 -> 212 [label="in_buf = in_buf_save; " fontname="Courier New"]
212 -> 128 [label="" fontname="Courier New"]
217 -> 219 [label="[skip < in_len]" fontname="Courier New"]
217 -> 220 [label="[!(skip < in_len)]" fontname="Courier New"]
219 -> 217 [label="in_buf_save[skip] = in_buf[skip]; skip = skip + 1;" fontname="Courier New"]
224 -> 226 [label="[input == 0]" fontname="Courier New"]
224 -> 225 [label="[!(input == 0)]" fontname="Courier New"]
225 -> 229 [label="Num = Num + 1; Label: exit_1" fontname="Courier New"]
188 -> 192 [label="r = lzo1x_decompress_safe((int *)in_buf, src_len, out_buf, &tmp);" fontname="Courier New"]
192 -> 194 [label="[r != LZO_E_OK]" fontname="Courier New"]
192 -> 195 [label="[!(r != LZO_E_OK)]" fontname="Courier New"]
195 -> 194 [label="[dst_len != tmp]" fontname="Courier New"]
195 -> 193 [label="[!(dst_len != tmp)]" fontname="Courier New"]
194 -> 196 [label="error(\"Compressed data violation\");" fontname="Courier New"]
182 -> 183 [label="error(\"file corrupted\");" fontname="Courier New"]
175 -> 177 [label="skip = fill(in_buf + in_len, src_len - in_len);" fontname="Courier New"]
177 -> 179 [label="[skip > 0]" fontname="Courier New"]
177 -> 178 [label="[!(skip > 0)]" fontname="Courier New"]
179 -> 174 [label="in_len = in_len + skip; " fontname="Courier New"]
170 -> 172 [label="error(\"file corrupted\");" fontname="Courier New"]
163 -> 164 [label="error(\"file corrupted\");" fontname="Courier New"]
156 -> 158 [label="skip = fill(in_buf + in_len, 8 - in_len);" fontname="Courier New"]
158 -> 160 [label="[skip > 0]" fontname="Courier New"]
158 -> 159 [label="[!(skip > 0)]" fontname="Courier New"]
160 -> 155 [label="in_len = in_len + skip; " fontname="Courier New"]
146 -> 147 [label="[posp == 0]" fontname="Courier New"]
146 -> 148 [label="[!(posp == 0)]" fontname="Courier New"]
147 -> 224 [label="break ret = 0; Label: exit_2" fontname="Courier New"]
132 -> 134 [label="skip = fill(in_buf + in_len, 4 - in_len);" fontname="Courier New"]
134 -> 136 [label="[skip > 0]" fontname="Courier New"]
134 -> 135 [label="[!(skip > 0)]" fontname="Courier New"]
136 -> 131 [label="in_len = in_len + skip; " fontname="Courier New"]
89 -> 92 [label="[fill == 0]" fontname="Courier New"]
89 -> 93 [label="[!(fill == 0)]" fontname="Courier New"]
96 -> 98 [label="[in_buf == 0]" fontname="Courier New"]
96 -> 97 [label="[!(in_buf == 0)]" fontname="Courier New"]
101 -> 102 [label="[Num >= 0]" fontname="Courier New"]
101 -> 103 [label="[!(Num >= 0)]" fontname="Courier New"]
104 -> 81 [label="" fontname="Courier New"]
98 -> 99 [label="error(\"Could not allocate input buffer\");" fontname="Courier New"]
92 -> 94 [label="error(\"NULL input pointer and missing fill function\");" fontname="Courier New"]
65 -> 68 [label="[flush == 0]" fontname="Courier New"]
65 -> 69 [label="[!(flush == 0)]" fontname="Courier New"]
72 -> 74 [label="[out_buf == 0]" fontname="Courier New"]
72 -> 73 [label="[!(out_buf == 0)]" fontname="Courier New"]
77 -> 78 [label="[Num >= 0]" fontname="Courier New"]
77 -> 79 [label="[!(Num >= 0)]" fontname="Courier New"]
80 -> 63 [label="" fontname="Courier New"]
74 -> 75 [label="error(\"Could not allocate output buffer\");" fontname="Courier New"]
68 -> 70 [label="error(\"NULL output pointer and no flush function provided\");" fontname="Courier New"]
64 -> 63 [label="out_buf = output; " fontname="Courier New"]
88 -> 81 [label="in_buf = input; " fontname="Courier New"]
107 -> 106 [label="*posp = 0; " fontname="Courier New"]
113 -> 120 [label="in_buf = in_buf + skip; in_len = in_len - skip;" fontname="Courier New"]
126 -> 125 [label="*posp = skip; " fontname="Courier New"]
205 -> 204 [label="out_buf = out_buf + dst_len; " fontname="Courier New"]
208 -> 207 [label="*posp = (*posp) + (src_len + 12); " fontname="Courier New"]
215 -> 217 [label="for skip = 0;" fontname="Courier New"]
220 -> 214 [label="" fontname="Courier New"]
199 -> 224 [label="Goto: exit_2" fontname="Courier New"]
193 -> 186 [label="" fontname="Courier New"]
196 -> 224 [label="Goto: exit_2" fontname="Courier New"]
183 -> 224 [label="Goto: exit_2" fontname="Courier New"]
178 -> 174 [label="" fontname="Courier New"]
172 -> 224 [label="Goto: exit_2" fontname="Courier New"]
164 -> 224 [label="Goto: exit_2" fontname="Courier New"]
159 -> 155 [label="" fontname="Courier New"]
148 -> 147 [label="*posp = (*posp) + 4; " fontname="Courier New"]
135 -> 131 [label="" fontname="Courier New"]
93 -> 96 [label="in_buf = malloc(0);" fontname="Courier New"]
97 -> 101 [label="Num = Num - 1;" fontname="Courier New"]
103 -> 104 [label="__assert_fail(\"Num >=0\", \"nf/decompress_unlzo.c\", 173, \"__PRETTY_FUNCTION__\");" fontname="Courier New"]
102 -> 104 [label="0;" fontname="Courier New"]
99 -> 229 [label="Goto: exit_1" fontname="Courier New"]
94 -> 229 [label="Goto: exit_1" fontname="Courier New"]
69 -> 72 [label="out_buf = malloc(262144L);" fontname="Courier New"]
73 -> 77 [label="Num = Num - 1;" fontname="Courier New"]
79 -> 80 [label="__assert_fail(\"Num >=0\", \"nf/decompress_unlzo.c\", 155, \"__PRETTY_FUNCTION__\");" fontname="Courier New"]
78 -> 80 [label="0;" fontname="Courier New"]
75 -> 234 [label="Goto: exit" fontname="Courier New"]
70 -> 234 [label="Goto: exit" fontname="Courier New"]
}