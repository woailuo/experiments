digraph CFA {
148 [shape="circle" label="N148\n47"]
203 [shape="circle" label="N203\n46"]
149 [shape="diamond" label="N149\n45"]
150 [shape="circle" label="N150\n42"]
155 [shape="circle" label="N155\n41"]
24 [shape="circle" label="N24\n38"]
25 [shape="circle" label="N25\n37"]
26 [shape="circle" label="N26\n36"]
27 [shape="circle" label="N27\n35"]
28 [shape="diamond" label="N28\n34"]
30 [shape="circle" label="N30\n33"]
31 [shape="diamond" label="N31\n31"]
32 [shape="circle" label="N32\n28"]
35 [shape="circle" label="N35\n27"]
36 [shape="diamond" label="N36\n26"]
38 [shape="circle" label="N38\n25"]
39 [shape="diamond" label="N39\n23"]
40 [shape="diamond" label="N40\n20"]
45 [shape="circle" label="N45\n19"]
51 [shape="circle" label="N51\n18"]
52 [shape="diamond" label="N52\n17"]
54 [shape="circle" label="N54\n16"]
55 [shape="diamond" label="N55\n14"]
57 [shape="circle" label="N57\n13"]
16 [shape="circle" label="N16\n7"]
17 [shape="circle" label="N17\n6"]
18 [shape="circle" label="N18\n5"]
19 [shape="diamond" label="N19\n4"]
20 [shape="circle" label="N20\n1"]
15 [shape="circle" label="N15\n0"]
58 [shape="circle" label="N58\n12"]
43 [shape="diamond" label="N43\n4"]
59 [shape="circle" label="N59\n1"]
23 [shape="circle" label="N23\n0"]
156 [shape="circle" label="N156\n40"]
157 [shape="diamond" label="N157\n39"]
158 [shape="diamond" label="N158\n36"]
161 [shape="circle" label="N161\n33"]
164 [shape="diamond" label="N164\n32"]
168 [shape="diamond" label="N168\n31"]
173 [shape="diamond" label="N173\n30"]
180 [shape="diamond" label="N180\n29"]
188 [shape="diamond" label="N188\n28"]
196 [shape="circle" label="N196\n27"]
199 [shape="circle" label="N199\n26"]
1 [shape="circle" label="N1\n10"]
2 [shape="circle" label="N2\n9"]
6 [shape="circle" label="N6\n8"]
7 [shape="diamond" label="N7\n7"]
4 [shape="circle" label="N4\n6"]
8 [shape="circle" label="N8\n5"]
3 [shape="circle" label="N3\n2"]
10 [shape="circle" label="N10\n1"]
0 [shape="circle" label="N0\n0"]
152 [shape="circle" label="N152\n43"]
163 [shape="circle" label="N163\n34"]
176 [shape="circle" label="N176\n8"]
174 [shape="circle" label="N174\n7"]
120 [shape="circle" label="N120\n8"]
121 [shape="circle" label="N121\n7"]
122 [shape="diamond" label="N122\n6"]
124 [shape="circle" label="N124\n5"]
12 [shape="circle" label="N12\n3"]
13 [shape="circle" label="N13\n2"]
14 [shape="circle" label="N14\n1"]
11 [shape="circle" label="N11\n0"]
146 [shape="circle" label="N146\n1"]
144 [shape="circle" label="N144\n0"]
139 [shape="doublecircle" label="N139\n7"]
142 [shape="circle" label="N142\n6"]
133 [shape="circle" label="N133\n5"]
197 [shape="circle" label="N197\n23"]
165 [shape="circle" label="N165\n2"]
64 [shape="circle" label="N64\n11"]
65 [shape="diamond" label="N65\n10"]
67 [shape="diamond" label="N67\n9"]
69 [shape="circle" label="N69\n8"]
70 [shape="circle" label="N70\n7"]
68 [shape="diamond" label="N68\n6"]
73 [shape="circle" label="N73\n5"]
74 [shape="circle" label="N74\n4"]
72 [shape="circle" label="N72\n3"]
76 [shape="circle" label="N76\n2"]
66 [shape="circle" label="N66\n1"]
63 [shape="circle" label="N63\n0"]
201 [shape="circle" label="N201\n1"]
147 [shape="circle" label="N147\n0"]
141 [shape="circle" label="N141\n4"]
143 [shape="diamond" label="N143\n3"]
145 [shape="circle" label="N145\n2"]
126 [shape="circle" label="N126\n4"]
123 [shape="circle" label="N123\n1"]
119 [shape="circle" label="N119\n0"]
177 [shape="circle" label="N177\n6"]
125 [shape="circle" label="N125\n3"]
127 [shape="circle" label="N127\n2"]
183 [shape="circle" label="N183\n14"]
181 [shape="circle" label="N181\n13"]
103 [shape="circle" label="N103\n15"]
104 [shape="circle" label="N104\n14"]
105 [shape="diamond" label="N105\n13"]
107 [shape="circle" label="N107\n12"]
108 [shape="circle" label="N108\n11"]
106 [shape="circle" label="N106\n10"]
110 [shape="circle" label="N110\n9"]
111 [shape="diamond" label="N111\n8"]
112 [shape="circle" label="N112\n5"]
115 [shape="diamond" label="N115\n4"]
116 [shape="circle" label="N116\n1"]
102 [shape="circle" label="N102\n0"]
184 [shape="circle" label="N184\n12"]
79 [shape="circle" label="N79\n12"]
80 [shape="circle" label="N80\n11"]
81 [shape="circle" label="N81\n10"]
82 [shape="circle" label="N82\n9"]
83 [shape="diamond" label="N83\n8"]
84 [shape="circle" label="N84\n5"]
87 [shape="diamond" label="N87\n4"]
88 [shape="circle" label="N88\n1"]
78 [shape="circle" label="N78\n0"]
170 [shape="circle" label="N170\n3"]
185 [shape="circle" label="N185\n11"]
193 [shape="circle" label="N193\n17"]
89 [shape="circle" label="N89\n3"]
90 [shape="circle" label="N90\n2"]
85 [shape="circle" label="N85\n7"]
86 [shape="circle" label="N86\n6"]
117 [shape="circle" label="N117\n3"]
118 [shape="circle" label="N118\n2"]
113 [shape="circle" label="N113\n7"]
114 [shape="circle" label="N114\n6"]
191 [shape="circle" label="N191\n20"]
189 [shape="circle" label="N189\n19"]
129 [shape="circle" label="N129\n2"]
130 [shape="circle" label="N130\n1"]
128 [shape="circle" label="N128\n0"]
192 [shape="circle" label="N192\n18"]
200 [shape="circle" label="N200\n25"]
34 [shape="circle" label="N34\n29"]
42 [shape="circle" label="N42\n21"]
61 [shape="circle" label="N61\n2"]
22 [shape="circle" label="N22\n2"]
5 [shape="circle" label="N5\n4"]
9 [shape="circle" label="N9\n3"]
195 [shape="circle" label="N195\n24"]
134 [shape="circle" label="N134\n9"]
135 [shape="circle" label="N135\n8"]
187 [shape="diamond" label="N187\n22"]
190 [shape="circle" label="N190\n21"]
179 [shape="diamond" label="N179\n16"]
182 [shape="circle" label="N182\n15"]
172 [shape="diamond" label="N172\n10"]
175 [shape="circle" label="N175\n9"]
167 [shape="circle" label="N167\n5"]
92 [shape="circle" label="N92\n5"]
93 [shape="circle" label="N93\n4"]
96 [shape="doublecircle" label="N96\n3"]
99 [shape="circle" label="N99\n2"]
91 [shape="circle" label="N91\n1"]
169 [shape="circle" label="N169\n4"]
98 [shape="circle" label="N98\n0"]
162 [shape="circle" label="N162\n35"]
159 [shape="circle" label="N159\n38"]
160 [shape="circle" label="N160\n37"]
60 [shape="circle" label="N60\n3"]
21 [shape="circle" label="N21\n3"]
56 [shape="circle" label="N56\n11"]
53 [shape="circle" label="N53\n15"]
44 [shape="circle" label="N44\n10"]
46 [shape="circle" label="N46\n9"]
47 [shape="diamond" label="N47\n8"]
49 [shape="circle" label="N49\n7"]
50 [shape="circle" label="N50\n5"]
48 [shape="circle" label="N48\n6"]
41 [shape="circle" label="N41\n22"]
37 [shape="circle" label="N37\n24"]
33 [shape="circle" label="N33\n30"]
29 [shape="circle" label="N29\n32"]
151 [shape="circle" label="N151\n44"]
node [shape="circle"]
subgraph cluster_Address_print {
label="Address_print()"
12 -> 13 [label="Function start dummy edge"]
13 -> 14 [label="printf(\"%d %s %s\n\", addr->id, addr->name, addr->email);"]
14 -> 11 [label="default return"]}
subgraph cluster_Database_close {
label="Database_close()"
64 -> 65 [label="Function start dummy edge"]
65 -> 66 [label="[conn == 0]"]
65 -> 67 [label="[!(conn == 0)]"]
67 -> 68 [label="[(conn->file) == 0]"]
67 -> 69 [label="[!((conn->file) == 0)]"]
69 -> 70 [label="fclose(conn->file);"]
70 -> 68 [label="Num = Num + 1; "]
68 -> 72 [label="[(conn->db) == 0]"]
68 -> 73 [label="[!((conn->db) == 0)]"]
73 -> 74 [label="free(conn->db);"]
74 -> 72 [label="Num = Num + 1; "]
72 -> 76 [label="free(conn);"]
76 -> 66 [label="Num = Num + 1; "]
66 -> 63 [label="default return"]}
subgraph cluster_Database_create {
label="Database_create()"
92 -> 93 [label="Function start dummy edge"]
93 -> 96 [label="int i = 0; for i = 0;"]
96 -> 98 [label="[i < 100]"]
96 -> 99 [label="[!(i < 100)]"]
99 -> 91 [label="default return"]
98 -> 96 [label="struct Address addr = { .id = i, .set = 0 }; (conn->db->rows)[i] = addr;  i = i + 1;"]}
subgraph cluster_Database_delete {
label="Database_delete()"
129 -> 130 [label="Function start dummy edge"]
130 -> 128 [label="struct Address addr = { .id = id, .set = 0 }; (conn->db->rows)[id] = addr; default return"]}
subgraph cluster_Database_get {
label="Database_get()"
120 -> 121 [label="Function start dummy edge"]
121 -> 122 [label="struct Address *addr = &((conn->db->rows)[id]);"]
122 -> 125 [label="[(addr->set) == 0]"]
122 -> 124 [label="[!((addr->set) == 0)]"]
124 -> 126 [label="Address_print(addr);" style="dotted" arrowhead="empty"]
126 -> 123 [label=""]
123 -> 119 [label="default return"]
125 -> 127 [label="die(\"ID is not set\");" style="dotted" arrowhead="empty"]
127 -> 123 [label=""]}
subgraph cluster_Database_list {
label="Database_list()"
146 -> 144 [label=""]
144 -> 139 [label=" i = i + 1;"]
139 -> 141 [label="[i < 100]"]
139 -> 142 [label="[!(i < 100)]"]
142 -> 133 [label="default return"]
141 -> 143 [label="struct Address *cur = &((db->rows)[i]);"]
143 -> 144 [label="[(cur->set) == 0]"]
143 -> 145 [label="[!((cur->set) == 0)]"]
145 -> 146 [label="Address_print(cur);" style="dotted" arrowhead="empty"]
134 -> 135 [label="Function start dummy edge"]
135 -> 139 [label="int i = 0; struct Database *db = conn->db; for i = 0;"]}
subgraph cluster_Database_load {
label="Database_load()"
16 -> 17 [label="Function start dummy edge"]
17 -> 18 [label="int rc;"]
18 -> 19 [label="rc = fread(conn->db, 103200, 1, conn->file);"]
19 -> 21 [label="[rc != 1]"]
19 -> 20 [label="[!(rc != 1)]"]
20 -> 15 [label="default return"]
22 -> 20 [label=""]
21 -> 22 [label="die(\"Failed to load database.\");" style="dotted" arrowhead="empty"]}
subgraph cluster_Database_open {
label="Database_open()"
24 -> 25 [label="Function start dummy edge"]
25 -> 26 [label="struct Connection *conn;"]
26 -> 27 [label="conn = malloc(8);"]
27 -> 28 [label="Num = Num - 1;"]
28 -> 29 [label="[Num >= 0]"]
28 -> 30 [label="[!(Num >= 0)]"]
30 -> 31 [label="__assert_fail(\"Num >=0\", \"tf/database.c\", 56, \"__PRETTY_FUNCTION__\");"]
31 -> 33 [label="[conn == 0]"]
31 -> 32 [label="[!(conn == 0)]"]
32 -> 35 [label="conn->db = malloc(103200);"]
35 -> 36 [label="Num = Num - 1;"]
36 -> 37 [label="[Num >= 0]"]
36 -> 38 [label="[!(Num >= 0)]"]
38 -> 39 [label="__assert_fail(\"Num >=0\", \"tf/database.c\", 63, \"__PRETTY_FUNCTION__\");"]
39 -> 41 [label="[(conn->db) == 0]"]
39 -> 40 [label="[!((conn->db) == 0)]"]
40 -> 44 [label="[mode == 'c']"]
40 -> 45 [label="[!(mode == 'c')]"]
45 -> 51 [label="conn->file = fopen(filename, \"r+\");"]
51 -> 52 [label="Num = Num - 1;"]
52 -> 53 [label="[Num >= 0]"]
52 -> 54 [label="[!(Num >= 0)]"]
54 -> 55 [label="__assert_fail(\"Num >= 0\", \"tf/database.c\", 76, \"__PRETTY_FUNCTION__\");"]
55 -> 56 [label="[(conn->file) == 0]"]
55 -> 57 [label="[!((conn->file) == 0)]"]
57 -> 58 [label="Database_load(conn);" style="dotted" arrowhead="empty"]
58 -> 43 [label=""]
43 -> 60 [label="[(conn->file) == 0]"]
43 -> 59 [label="[!((conn->file) == 0)]"]
59 -> 23 [label="return conn;"]
34 -> 32 [label=""]
42 -> 40 [label=""]
61 -> 59 [label=""]
60 -> 61 [label="die(\"Failed to open the file\");" style="dotted" arrowhead="empty"]
56 -> 43 [label=""]
53 -> 55 [label="(void)0;"]
44 -> 46 [label="conn->file = fopen(filename, \"w\");"]
46 -> 47 [label="Num = Num - 1;"]
47 -> 48 [label="[Num >= 0]"]
47 -> 49 [label="[!(Num >= 0)]"]
49 -> 50 [label="__assert_fail(\"Num >= 0\", \"tf/database.c\", 71, \"__PRETTY_FUNCTION__\");"]
50 -> 43 [label=""]
48 -> 50 [label="(void)0;"]
41 -> 42 [label="die(\"Memory error\");" style="dotted" arrowhead="empty"]
37 -> 39 [label="(void)0;"]
33 -> 34 [label="die(\"Memory error\");" style="dotted" arrowhead="empty"]
29 -> 31 [label="(void)0;"]}
subgraph cluster_Database_set {
label="Database_set()"
103 -> 104 [label="Function start dummy edge"]
104 -> 105 [label="struct Address *addr = &((conn->db->rows)[id]);"]
105 -> 106 [label="[(addr->set) == 0]"]
105 -> 107 [label="[!((addr->set) == 0)]"]
107 -> 108 [label="die(\"Already set, delete it first\");" style="dotted" arrowhead="empty"]
108 -> 106 [label=""]
106 -> 110 [label="addr->set = 1; char *res;"]
110 -> 111 [label="res = strncpy(addr->name, name, 512);"]
111 -> 113 [label="[res == 0]"]
111 -> 112 [label="[!(res == 0)]"]
112 -> 115 [label="res = strncpy(addr->email, email, 512);"]
115 -> 117 [label="[res == 0]"]
115 -> 116 [label="[!(res == 0)]"]
116 -> 102 [label="default return"]
117 -> 118 [label="die(\"Email copy failed\");" style="dotted" arrowhead="empty"]
118 -> 116 [label=""]
113 -> 114 [label="die(\"Name copy failed\");" style="dotted" arrowhead="empty"]
114 -> 112 [label=""]}
subgraph cluster_Database_write {
label="Database_write()"
79 -> 80 [label="Function start dummy edge"]
80 -> 81 [label="rewind(conn->file);"]
81 -> 82 [label="int rc;"]
82 -> 83 [label="rc = fwrite(conn->db, 103200, 1, conn->file);"]
83 -> 85 [label="[rc != 1]"]
83 -> 84 [label="[!(rc != 1)]"]
84 -> 87 [label="rc = fflush(conn->file);"]
87 -> 89 [label="[rc == -1]"]
87 -> 88 [label="[!(rc == -1)]"]
88 -> 78 [label="default return"]
89 -> 90 [label="die(\"Cannot flush database.\");" style="dotted" arrowhead="empty"]
90 -> 88 [label=""]
85 -> 86 [label="die(\"Failed to write database.\");" style="dotted" arrowhead="empty"]
86 -> 84 [label=""]}
subgraph cluster_die {
label="die()"
1 -> 2 [label="Function start dummy edge"]
2 -> 6 [label="int *__CPAchecker_TMP_0;"]
6 -> 7 [label="__CPAchecker_TMP_0 = __errno_location();"]
7 -> 5 [label="[(*__CPAchecker_TMP_0) == 0]"]
7 -> 4 [label="[!((*__CPAchecker_TMP_0) == 0)]"]
4 -> 8 [label="perror(message);"]
8 -> 3 [label=""]
3 -> 10 [label="exit(1);"]
10 -> 0 [label="default return"]
5 -> 9 [label="printf(\"ERROR: %s\n\", message);"]
9 -> 3 [label=""]}
subgraph cluster_main {
label="main()"
148 -> 203 [label="INIT GLOBAL VARS"]
203 -> 149 [label="typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); int * __errno_location(); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); int Num = 3; struct Address {   int id;   int set;   char name[512];   char email[512]; } ; struct Database {   struct Address rows[100]; } ; struct Connection {   FILE *file;   struct Database *db; } ; void die(const char *message); void Address_print(struct Address *addr); void Database_load(struct Connection *conn); struct Connection * Database_open(const char *filename, char mode); void Database_close(struct Connection *conn); void Database_write(struct Connection *conn); void Database_create(struct Connection *conn); void Database_set(struct Connection *conn, int id, const char *name, const char *email); void Database_get(struct Connection *conn, int id); void Database_delete(struct Connection *conn, int id); void Database_list(struct Connection *conn); int main(int argc, char *argv[]); Function start dummy edge"]
149 -> 151 [label="[argc < 3]"]
149 -> 150 [label="[!(argc < 3)]"]
150 -> 155 [label="char *filename = argv[1]; char action = argv[2][0]; struct Connection *conn;"]
155 -> 156 [label="conn = Database_open(filename, action);" style="dotted" arrowhead="empty"]
156 -> 157 [label="int id = 0;"]
157 -> 159 [label="[argc > 3]"]
157 -> 158 [label="[!(argc > 3)]"]
158 -> 162 [label="[id >= 100]"]
158 -> 161 [label="[!(id >= 100)]"]
161 -> 164 [label="switch (action)"]
164 -> 167 [label="[action == 'c']"]
164 -> 168 [label="[!(action == 'c')]"]
168 -> 172 [label="[action == 'g']"]
168 -> 173 [label="[!(action == 'g')]"]
173 -> 179 [label="[action == 's']"]
173 -> 180 [label="[!(action == 's')]"]
180 -> 187 [label="[action == 'd']"]
180 -> 188 [label="[!(action == 'd')]"]
188 -> 195 [label="[action == 'l']"]
188 -> 196 [label="[!(action == 'l')]"]
196 -> 199 [label="default"]
199 -> 200 [label="die(\"Invalid action, only: c=create, g=get, s=set, d=del, l=list\");" style="dotted" arrowhead="empty"]
152 -> 150 [label=""]
163 -> 161 [label=""]
176 -> 174 [label=""]
174 -> 177 [label="Database_get(conn, id);" style="dotted" arrowhead="empty"]
197 -> 165 [label="break"]
165 -> 201 [label="Database_close(conn);" style="dotted" arrowhead="empty"]
201 -> 147 [label="return 0;"]
177 -> 165 [label="break"]
183 -> 181 [label=""]
181 -> 184 [label="Database_set(conn, id, argv[4], argv[5]);" style="dotted" arrowhead="empty"]
184 -> 185 [label="Database_write(conn);" style="dotted" arrowhead="empty"]
170 -> 165 [label="break"]
185 -> 165 [label="break"]
193 -> 165 [label="break"]
191 -> 189 [label=""]
189 -> 192 [label="Database_delete(conn, id);" style="dotted" arrowhead="empty"]
192 -> 193 [label="Database_write(conn);" style="dotted" arrowhead="empty"]
200 -> 165 [label=""]
195 -> 197 [label="Database_list(conn);" style="dotted" arrowhead="empty"]
187 -> 190 [label="[argc != 4]"]
187 -> 189 [label="[!(argc != 4)]"]
190 -> 191 [label="die(\"Need id to delete\");" style="dotted" arrowhead="empty"]
179 -> 182 [label="[argc != 6]"]
179 -> 181 [label="[!(argc != 6)]"]
182 -> 183 [label="die(\"Need id, name, email to set\");" style="dotted" arrowhead="empty"]
172 -> 175 [label="[argc != 4]"]
172 -> 174 [label="[!(argc != 4)]"]
175 -> 176 [label="die(\"Need an id to get\");" style="dotted" arrowhead="empty"]
167 -> 169 [label="Database_create(conn);" style="dotted" arrowhead="empty"]
169 -> 170 [label="Database_write(conn);" style="dotted" arrowhead="empty"]
162 -> 163 [label="die(\"There's not that many records.\");" style="dotted" arrowhead="empty"]
159 -> 160 [label="id = atoi(argv[3]);"]
160 -> 158 [label=""]
151 -> 152 [label="die(\"USAGE: ex17 <dbfile> <action> [action params]\");" style="dotted" arrowhead="empty"]}
155 -> 24 [label="Database_open(filename, action)"]
57 -> 16 [label="Database_load(conn)"]
15 -> 58 [label="Return edge from Database_load to Database_open"]
23 -> 156 [label="Return edge from Database_open to main"]
199 -> 1 [label="die(\"Invalid action, only: c=create, g=get, s=set, d=del, l=list\")"]
0 -> 127 [label="Return edge from die to Database_get"]
0 -> 22 [label="Return edge from die to Database_load"]
0 -> 61 [label="Return edge from die to Database_open"]
0 -> 42 [label="Return edge from die to Database_open"]
0 -> 34 [label="Return edge from die to Database_open"]
0 -> 108 [label="Return edge from die to Database_set"]
0 -> 118 [label="Return edge from die to Database_set"]
0 -> 114 [label="Return edge from die to Database_set"]
0 -> 90 [label="Return edge from die to Database_write"]
0 -> 86 [label="Return edge from die to Database_write"]
0 -> 200 [label="Return edge from die to main"]
0 -> 191 [label="Return edge from die to main"]
0 -> 183 [label="Return edge from die to main"]
0 -> 176 [label="Return edge from die to main"]
0 -> 163 [label="Return edge from die to main"]
0 -> 152 [label="Return edge from die to main"]
174 -> 120 [label="Database_get(conn, id)"]
124 -> 12 [label="Address_print(addr)"]
11 -> 126 [label="Return edge from Address_print to Database_get"]
11 -> 146 [label="Return edge from Address_print to Database_list"]
133 -> 197 [label="Return edge from Database_list to main"]
165 -> 64 [label="Database_close(conn)"]
63 -> 201 [label="Return edge from Database_close to main"]
145 -> 12 [label="Address_print(cur)"]
119 -> 177 [label="Return edge from Database_get to main"]
125 -> 1 [label="die(\"ID is not set\")"]
181 -> 103 [label="Database_set(conn, id, argv[4], argv[5])"]
107 -> 1 [label="die(\"Already set, delete it first\")"]
102 -> 184 [label="Return edge from Database_set to main"]
184 -> 79 [label="Database_write(conn)"]
78 -> 193 [label="Return edge from Database_write to main"]
78 -> 185 [label="Return edge from Database_write to main"]
78 -> 170 [label="Return edge from Database_write to main"]
89 -> 1 [label="die(\"Cannot flush database.\")"]
85 -> 1 [label="die(\"Failed to write database.\")"]
117 -> 1 [label="die(\"Email copy failed\")"]
113 -> 1 [label="die(\"Name copy failed\")"]
189 -> 129 [label="Database_delete(conn, id)"]
128 -> 192 [label="Return edge from Database_delete to main"]
192 -> 79 [label="Database_write(conn)"]
195 -> 134 [label="Database_list(conn)"]
190 -> 1 [label="die(\"Need id to delete\")"]
182 -> 1 [label="die(\"Need id, name, email to set\")"]
175 -> 1 [label="die(\"Need an id to get\")"]
167 -> 92 [label="Database_create(conn)"]
91 -> 169 [label="Return edge from Database_create to main"]
169 -> 79 [label="Database_write(conn)"]
162 -> 1 [label="die(\"There's not that many records.\")"]
60 -> 1 [label="die(\"Failed to open the file\")"]
21 -> 1 [label="die(\"Failed to load database.\")"]
41 -> 1 [label="die(\"Memory error\")"]
33 -> 1 [label="die(\"Memory error\")"]
151 -> 1 [label="die(\"USAGE: ex17 <dbfile> <action> [action params]\")"]}