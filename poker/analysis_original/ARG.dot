digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N75\nmain entry\nABS0: true" id="1"]
2 [label="2 @ N79\nmain" id="2"]
3 [label="3 @ N80\nmain" id="3"]
4 [label="4 @ N81\nmain" id="4"]
5 [label="5 @ N82\nmain" id="5"]
51 [label="51 @ N83\nmain" id="51"]
52 [label="52 @ N30\nPoker_print entry" id="52"]
53 [label="53 @ N32\nPoker_print" id="53"]
55 [label="55 @ N36\nPoker_print" id="55"]
96 [label="96 @ N37\nPoker_print" id="96"]
98 [label="98 @ N39\nPoker_print" id="98"]
100 [label="100 @ N41\nPoker_print" id="100"]
102 [label="102 @ N43\nPoker_print" id="102"]
104 [label="104 @ N45\nPoker_print" id="104"]
106 [label="106 @ N47\nPoker_print" id="106"]
108 [label="108 @ N49\nPoker_print" id="108"]
110 [label="110 @ N51\nPoker_print" id="110"]
111 [label="111 @ N53\nPoker_print" id="111"]
113 [label="113 @ N33\nPoker_print" id="113"]
114 [label="114 @ N29\nPoker_print exit" id="114"]
115 [label="115 @ N95\nmain" id="115"]
116 [label="116 @ N30\nPoker_print entry" id="116"]
117 [label="117 @ N32\nPoker_print" id="117"]
119 [label="119 @ N36\nPoker_print" id="119"]
160 [label="160 @ N37\nPoker_print" id="160"]
162 [label="162 @ N39\nPoker_print" id="162"]
164 [label="164 @ N41\nPoker_print" id="164"]
166 [label="166 @ N43\nPoker_print" id="166"]
168 [label="168 @ N45\nPoker_print" id="168"]
170 [label="170 @ N47\nPoker_print" id="170"]
172 [label="172 @ N49\nPoker_print" id="172"]
174 [label="174 @ N51\nPoker_print" id="174"]
175 [label="175 @ N53\nPoker_print" id="175"]
177 [label="177 @ N33\nPoker_print" id="177"]
178 [label="178 @ N29\nPoker_print exit" id="178"]
179 [label="179 @ N96\nmain" id="179"]
203 [label="203 @ N97\nmain" id="203"]
204 [label="204 @ N74\nmain exit" id="204"]
180 [label="180 @ N98\nmain" id="180"]
182 [label="182 @ N20\nPoker_destroy entry" id="182"]
183 [label="183 @ N21\nPoker_destroy" id="183"]
185 [label="185 @ N23\nPoker_destroy" id="185"]
184 [label="184 @ N22\nPoker_destroy" id="184"]
186 [label="186 @ N24\nPoker_destroy" id="186"]
187 [label="187 @ N25\nPoker_destroy" id="187"]
188 [label="188 @ N26\nPoker_destroy" id="188"]
189 [label="189 @ N27\nPoker_destroy" id="189"]
190 [label="190 @ N19\nPoker_destroy exit" id="190"]
191 [label="191 @ N99\nmain" id="191"]
192 [label="192 @ N20\nPoker_destroy entry" id="192"]
193 [label="193 @ N21\nPoker_destroy" id="193"]
195 [label="195 @ N23\nPoker_destroy" id="195"]
194 [label="194 @ N22\nPoker_destroy" id="194"]
196 [label="196 @ N24\nPoker_destroy" id="196"]
197 [label="197 @ N25\nPoker_destroy" id="197"]
198 [label="198 @ N26\nPoker_destroy" id="198"]
199 [label="199 @ N27\nPoker_destroy" id="199"]
200 [label="200 @ N19\nPoker_destroy exit" id="200"]
201 [label="201 @ N100\nmain" id="201"]
121 [label="121 @ N38\nPoker_print" id="121"]
123 [label="123 @ N40\nPoker_print" id="123"]
125 [label="125 @ N42\nPoker_print" id="125"]
127 [label="127 @ N44\nPoker_print" id="127"]
129 [label="129 @ N46\nPoker_print" id="129"]
131 [label="131 @ N48\nPoker_print" id="131"]
133 [label="133 @ N50\nPoker_print" id="133"]
135 [label="135 @ N52\nPoker_print" id="135"]
137 [label="137 @ N56\nPoker_print" id="137"]
139 [label="139 @ N60\nPoker_print" id="139"]
141 [label="141 @ N64\nPoker_print" id="141"]
143 [label="143 @ N68\nPoker_print" id="143"]
144 [label="144 @ N71\nPoker_print" id="144"]
145 [label="145 @ N72\nPoker_print" id="145"]
142 [label="142 @ N67\nPoker_print" id="142"]
147 [label="147 @ N69\nPoker_print" id="147"]
140 [label="140 @ N63\nPoker_print" id="140"]
150 [label="150 @ N65\nPoker_print" id="150"]
138 [label="138 @ N59\nPoker_print" id="138"]
153 [label="153 @ N61\nPoker_print" id="153"]
136 [label="136 @ N55\nPoker_print" id="136"]
156 [label="156 @ N57\nPoker_print" id="156"]
118 [label="118 @ N35\nPoker_print" id="118"]
57 [label="57 @ N38\nPoker_print" id="57"]
59 [label="59 @ N40\nPoker_print" id="59"]
61 [label="61 @ N42\nPoker_print" id="61"]
63 [label="63 @ N44\nPoker_print" id="63"]
65 [label="65 @ N46\nPoker_print" id="65"]
67 [label="67 @ N48\nPoker_print" id="67"]
69 [label="69 @ N50\nPoker_print" id="69"]
71 [label="71 @ N52\nPoker_print" id="71"]
73 [label="73 @ N56\nPoker_print" id="73"]
75 [label="75 @ N60\nPoker_print" id="75"]
77 [label="77 @ N64\nPoker_print" id="77"]
79 [label="79 @ N68\nPoker_print" id="79"]
80 [label="80 @ N71\nPoker_print" id="80"]
81 [label="81 @ N72\nPoker_print" id="81"]
78 [label="78 @ N67\nPoker_print" id="78"]
83 [label="83 @ N69\nPoker_print" id="83"]
76 [label="76 @ N63\nPoker_print" id="76"]
86 [label="86 @ N65\nPoker_print" id="86"]
74 [label="74 @ N59\nPoker_print" id="74"]
89 [label="89 @ N61\nPoker_print" id="89"]
72 [label="72 @ N55\nPoker_print" id="72"]
92 [label="92 @ N57\nPoker_print" id="92"]
54 [label="54 @ N35\nPoker_print" id="54"]
6 [label="6 @ N84\nmain" id="6"]
8 [label="8 @ N85\nmain" id="8"]
9 [label="9 @ N86\nmain" id="9"]
10 [label="10 @ N87\nmain" id="10"]
11 [label="11 @ N88\nmain" id="11"]
12 [label="12 @ N1\nPoker_create entry" id="12"]
13 [label="13 @ N3\nPoker_create" id="13"]
14 [label="14 @ N4\nPoker_create" id="14"]
15 [label="15 @ N5\nPoker_create" id="15"]
17 [label="17 @ N7\nPoker_create" id="17"]
16 [label="16 @ N6\nPoker_create" id="16"]
18 [label="18 @ N8\nPoker_create" id="18"]
20 [label="20 @ N10\nPoker_create" id="20"]
19 [label="19 @ N9\nPoker_create" id="19"]
21 [label="21 @ N11\nPoker_create" id="21"]
22 [label="22 @ N12\nPoker_create" id="22"]
23 [label="23 @ N13\nPoker_create" id="23"]
25 [label="25 @ N15\nPoker_create" id="25"]
24 [label="24 @ N14\nPoker_create" id="24"]
26 [label="26 @ N16\nPoker_create" id="26"]
27 [label="27 @ N0\nPoker_create exit" id="27"]
28 [label="28 @ N89\nmain" id="28"]
29 [label="29 @ N90\nmain" id="29"]
30 [label="30 @ N91\nmain" id="30"]
31 [label="31 @ N92\nmain" id="31"]
32 [label="32 @ N93\nmain" id="32"]
33 [label="33 @ N1\nPoker_create entry" id="33"]
34 [label="34 @ N3\nPoker_create" id="34"]
35 [label="35 @ N4\nPoker_create" id="35"]
36 [label="36 @ N5\nPoker_create" id="36"]
38 [label="38 @ N7\nPoker_create" id="38"]
37 [label="37 @ N6\nPoker_create" id="37"]
39 [label="39 @ N8\nPoker_create" id="39"]
41 [label="41 @ N10\nPoker_create" id="41"]
40 [label="40 @ N9\nPoker_create" id="40"]
42 [label="42 @ N11\nPoker_create" id="42"]
43 [label="43 @ N12\nPoker_create" id="43"]
44 [label="44 @ N13\nPoker_create" id="44"]
46 [label="46 @ N15\nPoker_create" id="46"]
45 [label="45 @ N14\nPoker_create" id="45"]
47 [label="47 @ N16\nPoker_create" id="47"]
48 [label="48 @ N0\nPoker_create exit" id="48"]
49 [label="49 @ N94\nmain" id="49"]
1 -> 2 [label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); int Num = 4; struct Poker {   char *name;   int num; } ; struct Poker * Poker_create(char *name, int num); void Poker_destroy(struct Poker *pn); void Poker_print(struct Poker *pn); int main(int argc, char *argv[]); Function start dummy edge struct Poker *fst; struct Poker *sec; char *pname[] = { 'Diamond', 'Spade', 'Heart', 'Club' };" id="1 -> 2"]
2 -> 3 [label="Line 2343: printf('Do you have time to play poker? 1 is Yes, to start\n');" id="2 -> 3"]
3 -> 4 [label="Line 2344: int play;" id="3 -> 4"]
4 -> 5 [label="Line 2345: scanf('%d', &play);" id="4 -> 5"]
5 -> 6 [label="Line 2347: [play > 0]" id="5 -> 6"]
5 -> 51 [label="Line 2347: [!(play > 0)]" id="5 -> 51"]
51 -> 52 [label="Line 2355: Poker_print(fst)" id="51 -> 52"]
52 -> 53 [label="Line 2324: Function start dummy edge switch (pn->num)" id="52 -> 53"]
53 -> 54 [label="Line 2326: [(pn->num) == 2]" id="53 -> 54"]
53 -> 55 [label="Line 2326: [!((pn->num) == 2)]" id="53 -> 55"]
55 -> 57 [label="Line 2326: [!((pn->num) == 3)]" id="55 -> 57"]
55 -> 96 [label="Line 2326: [(pn->num) == 3]" id="55 -> 96"]
96 -> 98 [label="Line 2326: fall through" id="96 -> 98"]
98 -> 100 [label="Line 2326: fall through" id="98 -> 100"]
100 -> 102 [label="Line 2327: fall through" id="100 -> 102"]
102 -> 104 [label="Line 2327: fall through" id="102 -> 104"]
104 -> 106 [label="Line 2327: fall through" id="104 -> 106"]
106 -> 108 [label="Line 2328: fall through" id="106 -> 108"]
108 -> 110 [label="Line 2328: fall through" id="108 -> 110"]
110 -> 111 [label="Line 2328: printf('%s, %d\n', pn->name, pn->num);" id="110 -> 111"]
111 -> 113 [label="Line 2328: break" id="111 -> 113"]
113 -> 114 [label="Line 0: default return" id="113 -> 114"]
114 -> 115 [label="Line 2355: Return edge from Poker_print to main" id="114 -> 115"]
115 -> 116 [label="Line 2356: Poker_print(sec)" id="115 -> 116"]
116 -> 117 [label="Line 2324: Function start dummy edge switch (pn->num)" id="116 -> 117"]
117 -> 118 [label="Line 2326: [(pn->num) == 2]" id="117 -> 118"]
117 -> 119 [label="Line 2326: [!((pn->num) == 2)]" id="117 -> 119"]
119 -> 121 [label="Line 2326: [!((pn->num) == 3)]" id="119 -> 121"]
119 -> 160 [label="Line 2326: [(pn->num) == 3]" id="119 -> 160"]
160 -> 162 [label="Line 2326: fall through" id="160 -> 162"]
162 -> 164 [label="Line 2326: fall through" id="162 -> 164"]
164 -> 166 [label="Line 2327: fall through" id="164 -> 166"]
166 -> 168 [label="Line 2327: fall through" id="166 -> 168"]
168 -> 170 [label="Line 2327: fall through" id="168 -> 170"]
170 -> 172 [label="Line 2328: fall through" id="170 -> 172"]
172 -> 174 [label="Line 2328: fall through" id="172 -> 174"]
174 -> 175 [label="Line 2328: printf('%s, %d\n', pn->name, pn->num);" id="174 -> 175"]
175 -> 177 [label="Line 2328: break" id="175 -> 177"]
177 -> 178 [label="Line 0: default return" id="177 -> 178"]
178 -> 179 [label="Line 2356: Return edge from Poker_print to main" id="178 -> 179"]
179 -> 180 [label="Line 2360: [play > 0]" id="179 -> 180"]
179 -> 203 [label="Line 2360: [!(play > 0)]" id="179 -> 203"]
203 -> 204 [label="Line 2366: return 1;" id="203 -> 204"]
180 -> 182 [label="Line 2362: Poker_destroy(fst)" id="180 -> 182"]
182 -> 183 [label="Line 0: Function start dummy edge" id="182 -> 183"]
183 -> 184 [label="Line 2310: [pn != ((void *)0)]" id="183 -> 184"]
183 -> 185 [label="Line 2310: [!(pn != ((void *)0))]" id="183 -> 185"]
184 -> 186 [label="Line 2310: 0;" id="184 -> 186"]
186 -> 187 [label="Line 2312: free(pn->name);" id="186 -> 187"]
187 -> 188 [label="Line 2314: Num = Num + 1;" id="187 -> 188"]
188 -> 189 [label="Line 2316: free(pn);" id="188 -> 189"]
189 -> 190 [label="Line 2318: Num = Num + 1; default return" id="189 -> 190"]
190 -> 191 [label="Line 2362: Return edge from Poker_destroy to main" id="190 -> 191"]
191 -> 192 [label="Line 2363: Poker_destroy(sec)" id="191 -> 192"]
192 -> 193 [label="Line 0: Function start dummy edge" id="192 -> 193"]
193 -> 194 [label="Line 2310: [pn != ((void *)0)]" id="193 -> 194"]
193 -> 195 [label="Line 2310: [!(pn != ((void *)0))]" id="193 -> 195"]
194 -> 196 [label="Line 2310: 0;" id="194 -> 196"]
196 -> 197 [label="Line 2312: free(pn->name);" id="196 -> 197"]
197 -> 198 [label="Line 2314: Num = Num + 1;" id="197 -> 198"]
198 -> 199 [label="Line 2316: free(pn);" id="198 -> 199"]
199 -> 200 [label="Line 2318: Num = Num + 1; default return" id="199 -> 200"]
200 -> 201 [label="Line 2363: Return edge from Poker_destroy to main" id="200 -> 201"]
201 -> 203 [label="Line 0: " id="201 -> 203"]
121 -> 123 [label="Line 2326: [!((pn->num) == 4)]" id="121 -> 123"]
121 -> 162 [label="Line 2326: [(pn->num) == 4]" id="121 -> 162"]
123 -> 125 [label="Line 2326: [!((pn->num) == 5)]" id="123 -> 125"]
123 -> 164 [label="Line 2326: [(pn->num) == 5]" id="123 -> 164"]
125 -> 127 [label="Line 2327: [!((pn->num) == 6)]" id="125 -> 127"]
125 -> 166 [label="Line 2327: [(pn->num) == 6]" id="125 -> 166"]
127 -> 129 [label="Line 2327: [!((pn->num) == 7)]" id="127 -> 129"]
127 -> 168 [label="Line 2327: [(pn->num) == 7]" id="127 -> 168"]
129 -> 131 [label="Line 2327: [!((pn->num) == 8)]" id="129 -> 131"]
129 -> 170 [label="Line 2327: [(pn->num) == 8]" id="129 -> 170"]
131 -> 133 [label="Line 2328: [!((pn->num) == 9)]" id="131 -> 133"]
131 -> 172 [label="Line 2328: [(pn->num) == 9]" id="131 -> 172"]
133 -> 135 [label="Line 2328: [!((pn->num) == 10)]" id="133 -> 135"]
133 -> 174 [label="Line 2328: [(pn->num) == 10]" id="133 -> 174"]
135 -> 136 [label="Line 2330: [(pn->num) == 1]" id="135 -> 136"]
135 -> 137 [label="Line 2330: [!((pn->num) == 1)]" id="135 -> 137"]
137 -> 138 [label="Line 2331: [(pn->num) == 11]" id="137 -> 138"]
137 -> 139 [label="Line 2331: [!((pn->num) == 11)]" id="137 -> 139"]
139 -> 140 [label="Line 2332: [(pn->num) == 12]" id="139 -> 140"]
139 -> 141 [label="Line 2332: [!((pn->num) == 12)]" id="139 -> 141"]
141 -> 142 [label="Line 2333: [(pn->num) == 13]" id="141 -> 142"]
141 -> 143 [label="Line 2333: [!((pn->num) == 13)]" id="141 -> 143"]
143 -> 144 [label="Line 0: default" id="143 -> 144"]
144 -> 145 [label="Line 2334: printf('%s, %d\n', pn->name, 1);" id="144 -> 145"]
145 -> 177 [label="Line 2334: break" id="145 -> 177"]
142 -> 147 [label="Line 2333: printf('%s, %s\n', pn->name, 'K');" id="142 -> 147"]
147 -> 177 [label="Line 2333: break" id="147 -> 177"]
140 -> 150 [label="Line 2332: printf('%s, %s\n', pn->name, 'Q');" id="140 -> 150"]
150 -> 177 [label="Line 2332: break" id="150 -> 177"]
138 -> 153 [label="Line 2331: printf('%s, %s\n', pn->name, 'J');" id="138 -> 153"]
153 -> 177 [label="Line 2331: break" id="153 -> 177"]
136 -> 156 [label="Line 2330: printf('%s, %s\n', pn->name, 'A');" id="136 -> 156"]
156 -> 177 [label="Line 2330: break" id="156 -> 177"]
118 -> 160 [label="Line 2326: fall through" id="118 -> 160"]
57 -> 59 [label="Line 2326: [!((pn->num) == 4)]" id="57 -> 59"]
57 -> 98 [label="Line 2326: [(pn->num) == 4]" id="57 -> 98"]
59 -> 61 [label="Line 2326: [!((pn->num) == 5)]" id="59 -> 61"]
59 -> 100 [label="Line 2326: [(pn->num) == 5]" id="59 -> 100"]
61 -> 63 [label="Line 2327: [!((pn->num) == 6)]" id="61 -> 63"]
61 -> 102 [label="Line 2327: [(pn->num) == 6]" id="61 -> 102"]
63 -> 65 [label="Line 2327: [!((pn->num) == 7)]" id="63 -> 65"]
63 -> 104 [label="Line 2327: [(pn->num) == 7]" id="63 -> 104"]
65 -> 67 [label="Line 2327: [!((pn->num) == 8)]" id="65 -> 67"]
65 -> 106 [label="Line 2327: [(pn->num) == 8]" id="65 -> 106"]
67 -> 69 [label="Line 2328: [!((pn->num) == 9)]" id="67 -> 69"]
67 -> 108 [label="Line 2328: [(pn->num) == 9]" id="67 -> 108"]
69 -> 71 [label="Line 2328: [!((pn->num) == 10)]" id="69 -> 71"]
69 -> 110 [label="Line 2328: [(pn->num) == 10]" id="69 -> 110"]
71 -> 72 [label="Line 2330: [(pn->num) == 1]" id="71 -> 72"]
71 -> 73 [label="Line 2330: [!((pn->num) == 1)]" id="71 -> 73"]
73 -> 74 [label="Line 2331: [(pn->num) == 11]" id="73 -> 74"]
73 -> 75 [label="Line 2331: [!((pn->num) == 11)]" id="73 -> 75"]
75 -> 76 [label="Line 2332: [(pn->num) == 12]" id="75 -> 76"]
75 -> 77 [label="Line 2332: [!((pn->num) == 12)]" id="75 -> 77"]
77 -> 78 [label="Line 2333: [(pn->num) == 13]" id="77 -> 78"]
77 -> 79 [label="Line 2333: [!((pn->num) == 13)]" id="77 -> 79"]
79 -> 80 [label="Line 0: default" id="79 -> 80"]
80 -> 81 [label="Line 2334: printf('%s, %d\n', pn->name, 1);" id="80 -> 81"]
81 -> 113 [label="Line 2334: break" id="81 -> 113"]
78 -> 83 [label="Line 2333: printf('%s, %s\n', pn->name, 'K');" id="78 -> 83"]
83 -> 113 [label="Line 2333: break" id="83 -> 113"]
76 -> 86 [label="Line 2332: printf('%s, %s\n', pn->name, 'Q');" id="76 -> 86"]
86 -> 113 [label="Line 2332: break" id="86 -> 113"]
74 -> 89 [label="Line 2331: printf('%s, %s\n', pn->name, 'J');" id="74 -> 89"]
89 -> 113 [label="Line 2331: break" id="89 -> 113"]
72 -> 92 [label="Line 2330: printf('%s, %s\n', pn->name, 'A');" id="72 -> 92"]
92 -> 113 [label="Line 2330: break" id="92 -> 113"]
54 -> 96 [label="Line 2326: fall through" id="54 -> 96"]
6 -> 8 [label="Line 2349: int __CPAchecker_TMP_0;" id="6 -> 8"]
8 -> 9 [label="Line 2349: __CPAchecker_TMP_0 = rand();" id="8 -> 9"]
9 -> 10 [label="Line 2349: int __CPAchecker_TMP_1;" id="9 -> 10"]
10 -> 11 [label="Line 2349: __CPAchecker_TMP_1 = rand();" id="10 -> 11"]
11 -> 12 [label="Line 2349: Poker_create(pname[__CPAchecker_TMP_0 % 4], (__CPAchecker_TMP_1 % 13) + 1)" id="11 -> 12"]
12 -> 13 [label="Line 2292: Function start dummy edge struct Poker *pn;" id="12 -> 13"]
13 -> 14 [label="Line 2292: pn = malloc(8);" id="13 -> 14"]
14 -> 15 [label="Line 2294: Num = Num - 1;" id="14 -> 15"]
15 -> 16 [label="Line 2295: [Num >= 0]" id="15 -> 16"]
15 -> 17 [label="Line 2295: [!(Num >= 0)]" id="15 -> 17"]
16 -> 18 [label="Line 2295: 0;" id="16 -> 18"]
18 -> 19 [label="Line 2297: [pn != ((void *)0)]" id="18 -> 19"]
18 -> 20 [label="Line 2297: [!(pn != ((void *)0))]" id="18 -> 20"]
19 -> 21 [label="Line 2297: 0;" id="19 -> 21"]
21 -> 22 [label="Line 2299: pn->name = strdup(name);" id="21 -> 22"]
22 -> 23 [label="Line 2301: Num = Num - 1;" id="22 -> 23"]
23 -> 24 [label="Line 2302: [Num >= 0]" id="23 -> 24"]
23 -> 25 [label="Line 2302: [!(Num >= 0)]" id="23 -> 25"]
24 -> 26 [label="Line 2302: 0;" id="24 -> 26"]
26 -> 27 [label="Line 2304: pn->num = num; return pn;" id="26 -> 27"]
27 -> 28 [label="Line 2349: Return edge from Poker_create to main" id="27 -> 28"]
28 -> 29 [label="Line 2350: int __CPAchecker_TMP_2;" id="28 -> 29"]
29 -> 30 [label="Line 2350: __CPAchecker_TMP_2 = rand();" id="29 -> 30"]
30 -> 31 [label="Line 2350: int __CPAchecker_TMP_3;" id="30 -> 31"]
31 -> 32 [label="Line 2350: __CPAchecker_TMP_3 = rand();" id="31 -> 32"]
32 -> 33 [label="Line 2350: Poker_create(pname[__CPAchecker_TMP_2 % 4], (__CPAchecker_TMP_3 % 13) + 1)" id="32 -> 33"]
33 -> 34 [label="Line 2292: Function start dummy edge struct Poker *pn;" id="33 -> 34"]
34 -> 35 [label="Line 2292: pn = malloc(8);" id="34 -> 35"]
35 -> 36 [label="Line 2294: Num = Num - 1;" id="35 -> 36"]
36 -> 37 [label="Line 2295: [Num >= 0]" id="36 -> 37"]
36 -> 38 [label="Line 2295: [!(Num >= 0)]" id="36 -> 38"]
37 -> 39 [label="Line 2295: 0;" id="37 -> 39"]
39 -> 40 [label="Line 2297: [pn != ((void *)0)]" id="39 -> 40"]
39 -> 41 [label="Line 2297: [!(pn != ((void *)0))]" id="39 -> 41"]
40 -> 42 [label="Line 2297: 0;" id="40 -> 42"]
42 -> 43 [label="Line 2299: pn->name = strdup(name);" id="42 -> 43"]
43 -> 44 [label="Line 2301: Num = Num - 1;" id="43 -> 44"]
44 -> 45 [label="Line 2302: [Num >= 0]" id="44 -> 45"]
44 -> 46 [label="Line 2302: [!(Num >= 0)]" id="44 -> 46"]
45 -> 47 [label="Line 2302: 0;" id="45 -> 47"]
47 -> 48 [label="Line 2304: pn->num = num; return pn;" id="47 -> 48"]
48 -> 49 [label="Line 2350: Return edge from Poker_create to main" id="48 -> 49"]
49 -> 51 [label="Line 0: " id="49 -> 51"]
}
