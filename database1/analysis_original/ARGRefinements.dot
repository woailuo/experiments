digraph ARG {
node [style="filled" shape="box" color="white"]
subgraph cluster_0 {
label="Refinement 0"
2 [label="2 @ N94\nmain" id="2"]
16 [fillcolor="cornflowerblue" label="16 @ N101\nmain\nABS1: true" id="16"]
20 [label="20 @ N1\ndie entry" id="20"]
33 [fillcolor="red" label="33 @ N109\nmain\nAssertionAutomaton: _predefinedState_ERROR\nABS2: true" id="33"]
31 [fillcolor="orange" label="31 @ N107\nmain" id="31"]
5 [label="5 @ N1\ndie entry" id="5"]
2 -> 5 []
2 -> 16 []
16 -> 31 []
16 -> 33 []
16 -> 20 []
}
1 -> 2
subgraph cluster_1 {
label="Refinement 1"
48 [fillcolor="cornflowerblue" label="48 @ N101\nmain\nABS3" id="48"]
63 [fillcolor="orange" label="63 @ N107\nmain" id="63"]
65 [fillcolor="red" label="65 @ N109\nmain\nAssertionAutomaton: _predefinedState_ERROR\nABS4: true" id="65"]
52 [label="52 @ N1\ndie entry" id="52"]
48 -> 52 []
48 -> 65 []
48 -> 63 []
}
1 -> 48
subgraph cluster_2 {
label="Refinement 2"
184 [fillcolor="cornflowerblue" label="184 @ N84\nDatabase_list\nABS6" id="184"]
187 [label="187 @ N78\nDatabase_list exit" id="187"]
463 [fillcolor="cornflowerblue" label="463 @ N101\nmain\nABS10" id="463"]
478 [fillcolor="orange" label="478 @ N107\nmain" id="478"]
467 [label="467 @ N1\ndie entry" id="467"]
480 [fillcolor="red" label="480 @ N109\nmain\nAssertionAutomaton: _predefinedState_ERROR\nABS11: true" id="480"]
200 [fillcolor="green" label="200 @ N84\nDatabase_list\nABS7" id="200"]
192 [label="192 @ N12\nAddress_print entry" id="192"]
195 [label="195 @ N11\nAddress_print exit" id="195"]
200 -> 184 [style="dashed" weight="0" label="covered by"]
184 -> 192 []
184 -> 200 []
184 -> 187 []
187 -> 463 []
463 -> 480 []
463 -> 467 []
463 -> 478 []
192 -> 195 []
}
182 -> 184
subgraph cluster_3 {
label="Refinement 3"
377 [fillcolor="cornflowerblue" label="377 @ N41\nDatabase_create\nABS8" id="377"]
383 [fillcolor="green" label="383 @ N41\nDatabase_create\nABS9" id="383"]
380 [label="380 @ N36\nDatabase_create exit" id="380"]
384 [label="384 @ N24\nDatabase_write entry" id="384"]
404 [label="404 @ N1\ndie entry" id="404"]
391 [label="391 @ N1\ndie entry" id="391"]
414 [label="414 @ N23\nDatabase_write exit" id="414"]
550 [fillcolor="cornflowerblue" label="550 @ N101\nmain\nABS16" id="550"]
567 [fillcolor="red" label="567 @ N109\nmain\nAssertionAutomaton: _predefinedState_ERROR\nABS17: true" id="567"]
565 [fillcolor="orange" label="565 @ N107\nmain" id="565"]
554 [label="554 @ N1\ndie entry" id="554"]
383 -> 377 [style="dashed" weight="0" label="covered by"]
377 -> 380 []
377 -> 383 []
380 -> 384 []
384 -> 414 []
384 -> 391 []
384 -> 404 []
414 -> 550 []
550 -> 554 []
550 -> 565 []
550 -> 567 []
}
375 -> 377
1 [fillcolor="cornflowerblue" label="1 @ N93\nmain entry\nABS0: true" id="1"]
37 [label="37 @ N1\ndie entry" id="37"]
67 [fillcolor="cornflowerblue" label="67 @ N101\nmain\nABS5" id="67"]
71 [label="71 @ N1\ndie entry" id="71"]
107 [label="107 @ N16\nDatabase_load entry" id="107"]
112 [label="112 @ N1\ndie entry" id="112"]
122 [label="122 @ N15\nDatabase_load exit" id="122"]
262 [label="262 @ N48\nDatabase_set entry" id="262"]
266 [label="266 @ N1\ndie entry" id="266"]
280 [label="280 @ N1\ndie entry" id="280"]
303 [label="303 @ N47\nDatabase_set exit" id="303"]
305 [label="305 @ N24\nDatabase_write entry" id="305"]
335 [label="335 @ N23\nDatabase_write exit" id="335"]
312 [label="312 @ N1\ndie entry" id="312"]
325 [label="325 @ N1\ndie entry" id="325"]
293 [label="293 @ N1\ndie entry" id="293"]
150 [label="150 @ N1\ndie entry" id="150"]
341 [label="341 @ N1\ndie entry" id="341"]
252 [label="252 @ N1\ndie entry" id="252"]
214 [label="214 @ N74\nDatabase_delete entry" id="214"]
215 [label="215 @ N73\nDatabase_delete exit" id="215"]
217 [label="217 @ N24\nDatabase_write entry" id="217"]
237 [label="237 @ N1\ndie entry" id="237"]
224 [label="224 @ N1\ndie entry" id="224"]
247 [label="247 @ N23\nDatabase_write exit" id="247"]
548 [fillcolor="green" label="548 @ N101\nmain\nABS15" id="548"]
351 [label="351 @ N65\nDatabase_get entry" id="351"]
361 [label="361 @ N1\ndie entry" id="361"]
355 [label="355 @ N12\nAddress_print entry" id="355"]
358 [label="358 @ N11\nAddress_print exit" id="358"]
371 [label="371 @ N64\nDatabase_get exit" id="371"]
132 [label="132 @ N1\ndie entry" id="132"]
182 [label="182 @ N79\nDatabase_list entry" id="182"]
482 [fillcolor="cornflowerblue" label="482 @ N84\nDatabase_list\nABS12" id="482"]
490 [label="490 @ N12\nAddress_print entry" id="490"]
493 [label="493 @ N11\nAddress_print exit" id="493"]
498 [fillcolor="cornflowerblue" label="498 @ N84\nDatabase_list\nABS13" id="498"]
514 [fillcolor="green" label="514 @ N84\nDatabase_list\nABS14" id="514"]
501 [label="501 @ N78\nDatabase_list exit" id="501"]
681 [fillcolor="green" label="681 @ N101\nmain\nABS22" id="681"]
506 [label="506 @ N12\nAddress_print entry" id="506"]
509 [label="509 @ N11\nAddress_print exit" id="509"]
485 [label="485 @ N78\nDatabase_list exit" id="485"]
679 [fillcolor="cornflowerblue" label="679 @ N101\nmain\nABS21: false" id="679"]
375 [label="375 @ N37\nDatabase_create entry" id="375"]
569 [fillcolor="cornflowerblue" label="569 @ N41\nDatabase_create\nABS18" id="569"]
572 [label="572 @ N36\nDatabase_create exit" id="572"]
582 [label="582 @ N24\nDatabase_write entry" id="582"]
612 [label="612 @ N23\nDatabase_write exit" id="612"]
683 [fillcolor="green" label="683 @ N101\nmain\nABS23: false" id="683"]
602 [label="602 @ N1\ndie entry" id="602"]
589 [label="589 @ N1\ndie entry" id="589"]
575 [fillcolor="cornflowerblue" label="575 @ N41\nDatabase_create\nABS19" id="575"]
581 [fillcolor="green" label="581 @ N41\nDatabase_create\nABS20" id="581"]
578 [label="578 @ N36\nDatabase_create exit" id="578"]
614 [label="614 @ N24\nDatabase_write entry" id="614"]
634 [label="634 @ N1\ndie entry" id="634"]
621 [label="621 @ N1\ndie entry" id="621"]
644 [label="644 @ N23\nDatabase_write exit" id="644"]
685 [fillcolor="green" label="685 @ N101\nmain\nABS24" id="685"]
204 [label="204 @ N1\ndie entry" id="204"]
172 [label="172 @ N1\ndie entry" id="172"]
88 [label="88 @ N1\ndie entry" id="88"]
1 -> 67 []
1 -> 37 []
548 -> 67 [style="dashed" weight="0" label="covered by"]
681 -> 67 [style="dashed" weight="0" label="covered by"]
685 -> 67 [style="dashed" weight="0" label="covered by"]
67 -> 88 []
67 -> 107 []
67 -> 71 []
107 -> 122 []
107 -> 112 []
122 -> 172 []
122 -> 204 []
122 -> 375 []
122 -> 182 []
122 -> 132 []
122 -> 351 []
122 -> 214 []
122 -> 252 []
122 -> 341 []
122 -> 150 []
122 -> 262 []
262 -> 293 []
262 -> 303 []
262 -> 280 []
262 -> 266 []
303 -> 305 []
305 -> 325 []
305 -> 312 []
305 -> 335 []
214 -> 215 [label="Line 2183: Function start dummy edge struct Address addr = { .id = id, .set = 0 }; (conn->db->rows)[id] = addr; default return" id="214 -> 215"]
215 -> 217 []
217 -> 247 []
217 -> 224 []
217 -> 237 []
247 -> 548 []
351 -> 355 []
351 -> 361 []
355 -> 358 []
358 -> 371 []
182 -> 482 [label="Line 2189: Function start dummy edge int i = 0; struct Database *db = conn->db; for i = 0;" id="182 -> 482"]
482 -> 485 []
482 -> 498 []
482 -> 490 []
490 -> 493 []
514 -> 498 [style="dashed" weight="0" label="covered by"]
498 -> 506 []
498 -> 501 []
498 -> 514 []
501 -> 681 []
506 -> 509 []
485 -> 679 []
683 -> 679 [style="dashed" weight="0" label="covered by"]
375 -> 569 [label="Line 2145: Function start dummy edge int i = 0; for i = 0;" id="375 -> 569"]
569 -> 575 []
569 -> 572 []
572 -> 582 []
582 -> 589 []
582 -> 602 []
582 -> 612 []
612 -> 683 []
581 -> 575 [style="dashed" weight="0" label="covered by"]
575 -> 578 []
575 -> 581 []
578 -> 614 []
614 -> 644 []
614 -> 621 []
614 -> 634 []
644 -> 685 []
}
