digraph build_type_list {
367 [shape="circle" label="367\n32"]
375 [shape="doublecircle" label="375\n31"]
377 [shape="diamond" label="377\n3"]
378 [shape="diamond" label="378\n30"]
386 [shape="circle" label="386\n29"]
385 [shape="circle" label="385\n26"]
389 [shape="circle" label="389\n25"]
391 [shape="diamond" label="391\n23"]
393 [shape="circle" label="393\n22"]
392 [shape="circle" label="392\n19"]
396 [shape="diamond" label="396\n18"]
398 [shape="circle" label="398\n17"]
397 [shape="circle" label="397\n14"]
404 [shape="doublecircle" label="404\n13"]
406 [shape="diamond" label="406\n7"]
407 [shape="circle" label="407\n12"]
410 [shape="diamond" label="410\n6"]
408 [shape="circle" label="408\n4"]
409 [shape="circle" label="409\n5"]
399 [shape="circle" label="399\n16"]
394 [shape="circle" label="394\n21"]
387 [shape="circle" label="387\n28"]
381 [shape="diamond" label="381\n2"]
379 [shape="circle" label="379\n0"]
380 [shape="circle" label="380\n1"]
389 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">389</td><td align="left">type_list = calloc(nr + 1, 20);</td></tr><tr><td align="right">390</td><td align="left">types = type_list;</td></tr></table>>]
389 -> 391[label=""]
407 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">407</td><td align="left">(types[t]).name = &amp;(token_list[n + 1]); (types[t]).flags = ((types[t]).flags) &amp;#124; 1;</td></tr><tr><td align="right">417</td><td align="left">qsort(type_index, nr, 4, &amp;type_index_compare);</td></tr><tr><td align="right">418</td><td align="left">printf(\"Extracted %u types\n\", nr_types);</td></tr><tr><td align="right">419</td><td align="left">default return</td></tr></table>>]
407 -> 366[label=""]
399 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">399</td><td align="left">exit(1);</td></tr><tr><td align="right">400</td><td align="left"></td></tr></table>>]
399 -> 397[label=""]
394 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">394</td><td align="left">exit(1);</td></tr><tr><td align="right">395</td><td align="left"></td></tr></table>>]
394 -> 392[label=""]
387 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">387</td><td align="left">exit(1);</td></tr><tr><td align="right">388</td><td align="left"></td></tr></table>>]
387 -> 385[label=""]
367 -> 375 [label="Function start dummy edge struct type *types; unsigned nr; unsigned t; unsigned n; nr = 0; for n = 0;" fontname="Courier New"]
375 -> 377 [label="[n < (nr_tokens - 1)]" fontname="Courier New"]
375 -> 378 [label="[!(n < (nr_tokens - 1))]" fontname="Courier New"]
378 -> 386 [label="[nr == 0]" fontname="Courier New"]
378 -> 385 [label="[!(nr == 0)]" fontname="Courier New"]
385 -> 389 [label="nr_types = nr;" fontname="Courier New"]
391 -> 393 [label="[type_list == 0]" fontname="Courier New"]
391 -> 392 [label="[!(type_list == 0)]" fontname="Courier New"]
392 -> 396 [label="type_index = calloc(nr, 4);" fontname="Courier New"]
396 -> 398 [label="[type_index == 0]" fontname="Courier New"]
396 -> 397 [label="[!(type_index == 0)]" fontname="Courier New"]
397 -> 404 [label="t = 0; (types[t]).flags = ((types[t]).flags) | 2; for n = 0;" fontname="Courier New"]
404 -> 406 [label="[n < (nr_tokens - 1)]" fontname="Courier New"]
404 -> 407 [label="[!(n < (nr_tokens - 1))]" fontname="Courier New"]
406 -> 410 [label="[((token_list[n + 0]).token_type) == 91]" fontname="Courier New"]
406 -> 408 [label="[!(((token_list[n + 0]).token_type) == 91)]" fontname="Courier New"]
408 -> 404 [label=" n = n + 1;" fontname="Courier New"]
410 -> 409 [label="[((token_list[n + 1]).token_type) == 82]" fontname="Courier New"]
410 -> 408 [label="[!(((token_list[n + 1]).token_type) == 82)]" fontname="Courier New"]
398 -> 399 [label="perror((void *)0);" fontname="Courier New"]
393 -> 394 [label="perror((void *)0);" fontname="Courier New"]
386 -> 387 [label="fprintf(stderr, \"%s: No defined types\n\", filename);" fontname="Courier New"]
377 -> 381 [label="[((token_list[n + 0]).token_type) == 91]" fontname="Courier New"]
377 -> 379 [label="[!(((token_list[n + 0]).token_type) == 91)]" fontname="Courier New"]
379 -> 375 [label=" n = n + 1;" fontname="Courier New"]
381 -> 380 [label="[((token_list[n + 1]).token_type) == 82]" fontname="Courier New"]
381 -> 379 [label="[!(((token_list[n + 1]).token_type) == 82)]" fontname="Courier New"]
409 -> 408 [label="(types[t]).name = &(token_list[n]); type_index[t] = &(types[t]); unsigned __CPAchecker_TMP_1 = t; t = t + 1; __CPAchecker_TMP_1; " fontname="Courier New"]
380 -> 379 [label="unsigned __CPAchecker_TMP_0 = nr; nr = nr + 1; __CPAchecker_TMP_0; " fontname="Courier New"]
}