digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N379\nmain entry\nABS0: true" id="1"]
410 [label="410 @ N387\nmain" id="410"]
411 [label="411 @ N388\nmain" id="411"]
4490 [fillcolor="cornflowerblue" label="4490 @ N389\nmain\nABS203" id="4490"]
4491 [label="4491 @ N392\nmain" id="4491"]
4492 [label="4492 @ N393\nmain" id="4492"]
4493 [label="4493 @ N394\nmain" id="4493"]
4495 [label="4495 @ N395\nmain" id="4495"]
4496 [label="4496 @ N398\nmain" id="4496"]
4498 [label="4498 @ N402\nmain" id="4498"]
4500 [label="4500 @ N412\nmain" id="4500"]
4505 [label="4505 @ N413\nmain" id="4505"]
4506 [label="4506 @ N375\nusage entry" id="4506"]
4507 [label="4507 @ N376\nusage" id="4507"]
4508 [label="4508 @ N377\nusage" id="4508"]
4509 [label="4509 @ N374\nusage exit" id="4509"]
4510 [label="4510 @ N415\nmain" id="4510"]
4511 [label="4511 @ N416\nmain" id="4511"]
4513 [label="4513 @ N418\nmain" id="4513"]
4516 [label="4516 @ N419\nmain" id="4516"]
4512 [label="4512 @ N417\nmain" id="4512"]
4502 [label="4502 @ N414\nmain" id="4502"]
4530 [label="4530 @ N399\nmain" id="4530"]
4532 [fillcolor="green" label="4532 @ N389\nmain\nABS204" id="4532"]
4499 [label="4499 @ N411\nmain" id="4499"]
4497 [label="4497 @ N401\nmain" id="4497"]
4517 [label="4517 @ N403\nmain" id="4517"]
4522 [label="4522 @ N405\nmain" id="4522"]
4523 [label="4523 @ N407\nmain" id="4523"]
4524 [label="4524 @ N375\nusage entry" id="4524"]
4525 [label="4525 @ N376\nusage" id="4525"]
4526 [label="4526 @ N377\nusage" id="4526"]
4527 [label="4527 @ N374\nusage exit" id="4527"]
4528 [label="4528 @ N408\nmain" id="4528"]
4519 [label="4519 @ N406\nmain" id="4519"]
4520 [label="4520 @ N404\nmain" id="4520"]
4494 [label="4494 @ N396\nmain" id="4494"]
4533 [label="4533 @ N391\nmain" id="4533"]
4535 [label="4535 @ N421\nmain" id="4535"]
4541 [label="4541 @ N429\nmain" id="4541"]
4542 [label="4542 @ N430\nmain" id="4542"]
4544 [label="4544 @ N428\nmain" id="4544"]
4545 [label="4545 @ N434\nmain" id="4545"]
4547 [label="4547 @ N432\nmain" id="4547"]
4560 [label="4560 @ N426\nmain" id="4560"]
4562 [fillcolor="cornflowerblue" label="4562 @ N442\nmain\nABS205" id="4562"]
4563 [label="4563 @ N446\nmain" id="4563"]
4564 [label="4564 @ N447\nmain" id="4564"]
4565 [label="4565 @ N450\nmain" id="4565"]
4567 [label="4567 @ N451\nmain" id="4567"]
4568 [label="4568 @ N456\nmain" id="4568"]
4570 [label="4570 @ N454\nmain" id="4570"]
4572 [label="4572 @ N460\nmain" id="4572"]
4573 [label="4573 @ N465\nmain" id="4573"]
4574 [label="4574 @ N466\nmain" id="4574"]
4576 [label="4576 @ N463\nmain" id="4576"]
4577 [label="4577 @ N470\nmain" id="4577"]
4582 [label="4582 @ N468\nmain" id="4582"]
4584 [fillcolor="cornflowerblue" label="4584 @ N474\nmain\nABS206" id="4584"]
5289 [label="5289 @ N477\nmain" id="5289"]
5344 [label="5344 @ N489\nmain" id="5344"]
5366 [fillcolor="green" label="5366 @ N442\nmain\nABS246" id="5366"]
5310 [label="5310 @ N490\nmain" id="5310"]
5322 [label="5322 @ N491\nmain" id="5322"]
4586 [label="4586 @ N476\nmain" id="4586"]
4587 [label="4587 @ N481\nmain" id="4587"]
4588 [label="4588 @ N482\nmain" id="4588"]
4590 [label="4590 @ N479\nmain" id="4590"]
4592 [fillcolor="green" label="4592 @ N474\nmain\nABS207" id="4592"]
4589 [label="4589 @ N480\nmain" id="4589"]
4594 [label="4594 @ N497\nmain" id="4594"]
4596 [label="4596 @ N500\nmain" id="4596"]
4598 [label="4598 @ N503\nmain" id="4598"]
4600 [label="4600 @ N506\nmain" id="4600"]
4602 [label="4602 @ N509\nmain" id="4602"]
4604 [label="4604 @ N512\nmain" id="4604"]
5211 [label="5211 @ N485\nmain" id="5211"]
5277 [label="5277 @ N483\nmain" id="5277"]
5233 [label="5233 @ N484\nmain" id="5233"]
5244 [label="5244 @ N486\nmain" id="5244"]
5255 [label="5255 @ N487\nmain" id="5255"]
4603 [label="4603 @ N511\nmain" id="4603"]
4606 [label="4606 @ N150\ncpio_mksock_line entry" id="4606"]
4607 [label="4607 @ N152\ncpio_mksock_line" id="4607"]
4608 [label="4608 @ N120\ncpio_mkgeneric_line entry" id="4608"]
4609 [label="4609 @ N129\ncpio_mkgeneric_line" id="4609"]
4610 [label="4610 @ N130\ncpio_mkgeneric_line" id="4610"]
4612 [label="4612 @ N127\ncpio_mkgeneric_line" id="4612"]
4613 [label="4613 @ N133\ncpio_mkgeneric_line" id="4613"]
4614 [label="4614 @ N103\ncpio_mkgeneric entry" id="4614"]
4615 [label="4615 @ N105\ncpio_mkgeneric" id="4615"]
4619 [label="4619 @ N106\ncpio_mkgeneric" id="4619"]
4620 [label="4620 @ N113\ncpio_mkgeneric" id="4620"]
4621 [label="4621 @ N114\ncpio_mkgeneric" id="4621"]
4622 [label="4622 @ N115\ncpio_mkgeneric" id="4622"]
4623 [label="4623 @ N41\npush_hdr entry" id="4623"]
4624 [label="4624 @ N42\npush_hdr" id="4624"]
4625 [label="4625 @ N43\npush_hdr" id="4625"]
4626 [label="4626 @ N40\npush_hdr exit" id="4626"]
4627 [label="4627 @ N116\ncpio_mkgeneric" id="4627"]
4628 [label="4628 @ N20\npush_rest entry" id="4628"]
4629 [label="4629 @ N22\npush_rest" id="4629"]
4630 [label="4630 @ N23\npush_rest" id="4630"]
4631 [label="4631 @ N25\npush_rest" id="4631"]
4632 [label="4632 @ N26\npush_rest" id="4632"]
4633 [label="4633 @ N27\npush_rest" id="4633"]
4635 [fillcolor="cornflowerblue" label="4635 @ N30\npush_rest\nABS208" id="4635"]
4637 [label="4637 @ N31\npush_rest" id="4637"]
4638 [label="4638 @ N33\npush_rest" id="4638"]
4640 [fillcolor="green" label="4640 @ N30\npush_rest\nABS209" id="4640"]
4636 [label="4636 @ N32\npush_rest" id="4636"]
4641 [label="4641 @ N19\npush_rest exit" id="4641"]
4642 [label="4642 @ N117\ncpio_mkgeneric" id="4642"]
4643 [label="4643 @ N102\ncpio_mkgeneric exit" id="4643"]
4644 [label="4644 @ N134\ncpio_mkgeneric_line" id="4644"]
4645 [label="4645 @ N135\ncpio_mkgeneric_line" id="4645"]
4648 [label="4648 @ N119\ncpio_mkgeneric_line exit" id="4648"]
4650 [label="4650 @ N153\ncpio_mksock_line" id="4650"]
4652 [label="4652 @ N149\ncpio_mksock_line exit" id="4652"]
4654 [label="4654 @ N513\nmain" id="4654"]
4656 [label="4656 @ N485\nmain" id="4656"]
5257 [label="5257 @ N483\nmain" id="5257"]
5278 [label="5278 @ N477\nmain" id="5278"]
5324 [label="5324 @ N489\nmain" id="5324"]
5346 [fillcolor="green" label="5346 @ N442\nmain\nABS236" id="5346"]
5290 [label="5290 @ N490\nmain" id="5290"]
5312 [label="5312 @ N491\nmain" id="5312"]
5213 [label="5213 @ N484\nmain" id="5213"]
5234 [label="5234 @ N486\nmain" id="5234"]
5245 [label="5245 @ N487\nmain" id="5245"]
4616 [label="4616 @ N107\ncpio_mkgeneric" id="4616"]
4611 [label="4611 @ N128\ncpio_mkgeneric_line" id="4611"]
4646 [label="4646 @ N131\ncpio_mkgeneric_line" id="4646"]
4647 [label="4647 @ N135\ncpio_mkgeneric_line" id="4647"]
4649 [label="4649 @ N119\ncpio_mkgeneric_line exit" id="4649"]
4651 [label="4651 @ N153\ncpio_mksock_line" id="4651"]
4653 [label="4653 @ N149\ncpio_mksock_line exit" id="4653"]
4655 [label="4655 @ N513\nmain" id="4655"]
4601 [label="4601 @ N508\nmain" id="4601"]
4659 [label="4659 @ N138\ncpio_mkdir_line entry" id="4659"]
4660 [label="4660 @ N140\ncpio_mkdir_line" id="4660"]
4661 [label="4661 @ N120\ncpio_mkgeneric_line entry" id="4661"]
4662 [label="4662 @ N129\ncpio_mkgeneric_line" id="4662"]
4663 [label="4663 @ N130\ncpio_mkgeneric_line" id="4663"]
4665 [label="4665 @ N127\ncpio_mkgeneric_line" id="4665"]
4666 [label="4666 @ N133\ncpio_mkgeneric_line" id="4666"]
4667 [label="4667 @ N103\ncpio_mkgeneric entry" id="4667"]
4668 [label="4668 @ N105\ncpio_mkgeneric" id="4668"]
4672 [label="4672 @ N106\ncpio_mkgeneric" id="4672"]
4673 [label="4673 @ N113\ncpio_mkgeneric" id="4673"]
4674 [label="4674 @ N114\ncpio_mkgeneric" id="4674"]
4675 [label="4675 @ N115\ncpio_mkgeneric" id="4675"]
4676 [label="4676 @ N41\npush_hdr entry" id="4676"]
4677 [label="4677 @ N42\npush_hdr" id="4677"]
4678 [label="4678 @ N43\npush_hdr" id="4678"]
4679 [label="4679 @ N40\npush_hdr exit" id="4679"]
4680 [label="4680 @ N116\ncpio_mkgeneric" id="4680"]
4681 [label="4681 @ N20\npush_rest entry" id="4681"]
4682 [label="4682 @ N22\npush_rest" id="4682"]
4683 [label="4683 @ N23\npush_rest" id="4683"]
4684 [label="4684 @ N25\npush_rest" id="4684"]
4685 [label="4685 @ N26\npush_rest" id="4685"]
4686 [label="4686 @ N27\npush_rest" id="4686"]
4688 [fillcolor="cornflowerblue" label="4688 @ N30\npush_rest\nABS210" id="4688"]
4690 [label="4690 @ N31\npush_rest" id="4690"]
4691 [label="4691 @ N33\npush_rest" id="4691"]
4693 [fillcolor="green" label="4693 @ N30\npush_rest\nABS211" id="4693"]
4689 [label="4689 @ N32\npush_rest" id="4689"]
4694 [label="4694 @ N19\npush_rest exit" id="4694"]
4695 [label="4695 @ N117\ncpio_mkgeneric" id="4695"]
4696 [label="4696 @ N102\ncpio_mkgeneric exit" id="4696"]
4697 [label="4697 @ N134\ncpio_mkgeneric_line" id="4697"]
4698 [label="4698 @ N135\ncpio_mkgeneric_line" id="4698"]
4701 [label="4701 @ N119\ncpio_mkgeneric_line exit" id="4701"]
4703 [label="4703 @ N141\ncpio_mkdir_line" id="4703"]
4705 [label="4705 @ N137\ncpio_mkdir_line exit" id="4705"]
4707 [label="4707 @ N510\nmain" id="4707"]
4709 [label="4709 @ N485\nmain" id="4709"]
5259 [label="5259 @ N483\nmain" id="5259"]
5279 [label="5279 @ N477\nmain" id="5279"]
5326 [label="5326 @ N489\nmain" id="5326"]
5348 [fillcolor="green" label="5348 @ N442\nmain\nABS237" id="5348"]
5292 [label="5292 @ N490\nmain" id="5292"]
5313 [label="5313 @ N491\nmain" id="5313"]
5215 [label="5215 @ N484\nmain" id="5215"]
5235 [label="5235 @ N486\nmain" id="5235"]
5246 [label="5246 @ N487\nmain" id="5246"]
4669 [label="4669 @ N107\ncpio_mkgeneric" id="4669"]
4664 [label="4664 @ N128\ncpio_mkgeneric_line" id="4664"]
4699 [label="4699 @ N131\ncpio_mkgeneric_line" id="4699"]
4700 [label="4700 @ N135\ncpio_mkgeneric_line" id="4700"]
4702 [label="4702 @ N119\ncpio_mkgeneric_line exit" id="4702"]
4704 [label="4704 @ N141\ncpio_mkdir_line" id="4704"]
4706 [label="4706 @ N137\ncpio_mkdir_line exit" id="4706"]
4708 [label="4708 @ N510\nmain" id="4708"]
4599 [label="4599 @ N505\nmain" id="4599"]
4712 [label="4712 @ N85\ncpio_mkslink_line entry" id="4712"]
4713 [label="4713 @ N95\ncpio_mkslink_line" id="4713"]
4714 [label="4714 @ N96\ncpio_mkslink_line" id="4714"]
4716 [label="4716 @ N93\ncpio_mkslink_line" id="4716"]
4717 [label="4717 @ N63\ncpio_mkslink entry" id="4717"]
4718 [label="4718 @ N65\ncpio_mkslink" id="4718"]
4722 [label="4722 @ N66\ncpio_mkslink" id="4722"]
4723 [label="4723 @ N73\ncpio_mkslink" id="4723"]
4724 [label="4724 @ N74\ncpio_mkslink" id="4724"]
4725 [label="4725 @ N75\ncpio_mkslink" id="4725"]
4726 [label="4726 @ N76\ncpio_mkslink" id="4726"]
4727 [label="4727 @ N77\ncpio_mkslink" id="4727"]
4728 [label="4728 @ N41\npush_hdr entry" id="4728"]
4729 [label="4729 @ N42\npush_hdr" id="4729"]
4730 [label="4730 @ N43\npush_hdr" id="4730"]
4731 [label="4731 @ N40\npush_hdr exit" id="4731"]
4732 [label="4732 @ N78\ncpio_mkslink" id="4732"]
4733 [label="4733 @ N1\npush_string entry" id="4733"]
4734 [label="4734 @ N3\npush_string" id="4734"]
4735 [label="4735 @ N4\npush_string" id="4735"]
4736 [label="4736 @ N5\npush_string" id="4736"]
4737 [label="4737 @ N6\npush_string" id="4737"]
4738 [label="4738 @ N7\npush_string" id="4738"]
4739 [label="4739 @ N0\npush_string exit" id="4739"]
4740 [label="4740 @ N79\ncpio_mkslink" id="4740"]
4741 [label="4741 @ N10\npush_pad entry" id="4741"]
4743 [fillcolor="cornflowerblue" label="4743 @ N12\npush_pad\nABS212" id="4743"]
4745 [label="4745 @ N13\npush_pad" id="4745"]
4746 [label="4746 @ N15\npush_pad" id="4746"]
4748 [fillcolor="green" label="4748 @ N12\npush_pad\nABS213" id="4748"]
4744 [label="4744 @ N14\npush_pad" id="4744"]
4749 [label="4749 @ N9\npush_pad exit" id="4749"]
4750 [label="4750 @ N80\ncpio_mkslink" id="4750"]
4751 [label="4751 @ N1\npush_string entry" id="4751"]
4752 [label="4752 @ N3\npush_string" id="4752"]
4753 [label="4753 @ N4\npush_string" id="4753"]
4754 [label="4754 @ N5\npush_string" id="4754"]
4755 [label="4755 @ N6\npush_string" id="4755"]
4756 [label="4756 @ N7\npush_string" id="4756"]
4757 [label="4757 @ N0\npush_string exit" id="4757"]
4758 [label="4758 @ N81\ncpio_mkslink" id="4758"]
4759 [label="4759 @ N10\npush_pad entry" id="4759"]
4761 [fillcolor="cornflowerblue" label="4761 @ N12\npush_pad\nABS214" id="4761"]
4763 [label="4763 @ N13\npush_pad" id="4763"]
4764 [label="4764 @ N15\npush_pad" id="4764"]
4766 [fillcolor="green" label="4766 @ N12\npush_pad\nABS215" id="4766"]
4762 [label="4762 @ N14\npush_pad" id="4762"]
4767 [label="4767 @ N9\npush_pad exit" id="4767"]
4768 [label="4768 @ N82\ncpio_mkslink" id="4768"]
4769 [label="4769 @ N62\ncpio_mkslink exit" id="4769"]
4770 [label="4770 @ N99\ncpio_mkslink_line" id="4770"]
4771 [label="4771 @ N100\ncpio_mkslink_line" id="4771"]
4774 [label="4774 @ N84\ncpio_mkslink_line exit" id="4774"]
4776 [label="4776 @ N507\nmain" id="4776"]
4778 [label="4778 @ N485\nmain" id="4778"]
5261 [label="5261 @ N483\nmain" id="5261"]
5280 [label="5280 @ N477\nmain" id="5280"]
5328 [label="5328 @ N489\nmain" id="5328"]
5350 [fillcolor="green" label="5350 @ N442\nmain\nABS238" id="5350"]
5294 [label="5294 @ N490\nmain" id="5294"]
5314 [label="5314 @ N491\nmain" id="5314"]
5217 [label="5217 @ N484\nmain" id="5217"]
5236 [label="5236 @ N486\nmain" id="5236"]
5247 [label="5247 @ N487\nmain" id="5247"]
4719 [label="4719 @ N67\ncpio_mkslink" id="4719"]
4715 [label="4715 @ N94\ncpio_mkslink_line" id="4715"]
4772 [label="4772 @ N97\ncpio_mkslink_line" id="4772"]
4773 [label="4773 @ N100\ncpio_mkslink_line" id="4773"]
4775 [label="4775 @ N84\ncpio_mkslink_line exit" id="4775"]
4777 [label="4777 @ N507\nmain" id="4777"]
4597 [label="4597 @ N502\nmain" id="4597"]
4781 [label="4781 @ N303\ncpio_mkfile_line entry" id="4781"]
4782 [label="4782 @ N317\ncpio_mkfile_line" id="4782"]
4783 [label="4783 @ N318\ncpio_mkfile_line" id="4783"]
4785 [label="4785 @ N315\ncpio_mkfile_line" id="4785"]
4792 [label="4792 @ N323\ncpio_mkfile_line" id="4792"]
4810 [label="4810 @ N321\ncpio_mkfile_line" id="4810"]
4811 [label="4811 @ N365\ncpio_mkfile_line" id="4811"]
4812 [label="4812 @ N280\ncpio_replace_env entry" id="4812"]
4814 [fillcolor="cornflowerblue" label="4814 @ N286\ncpio_replace_env\nABS217" id="4814"]
4815 [label="4815 @ N290\ncpio_replace_env" id="4815"]
4821 [label="4821 @ N288\ncpio_replace_env" id="4821"]
4834 [label="4834 @ N279\ncpio_replace_env exit" id="4834"]
4835 [label="4835 @ N366\ncpio_mkfile_line" id="4835"]
4836 [label="4836 @ N198\ncpio_mkfile entry" id="4836"]
4837 [label="4837 @ N209\ncpio_mkfile" id="4837"]
4838 [label="4838 @ N210\ncpio_mkfile" id="4838"]
4840 [label="4840 @ N211\ncpio_mkfile" id="4840"]
4841 [label="4841 @ N215\ncpio_mkfile" id="4841"]
4843 [label="4843 @ N217\ncpio_mkfile" id="4843"]
4844 [label="4844 @ N218\ncpio_mkfile" id="4844"]
4990 [label="4990 @ N270\ncpio_mkfile" id="4990"]
5015 [label="5015 @ N271\ncpio_mkfile" id="5015"]
5040 [label="5040 @ N275\ncpio_mkfile" id="5040"]
5045 [label="5045 @ N197\ncpio_mkfile exit" id="5045"]
5050 [label="5050 @ N367\ncpio_mkfile_line" id="5050"]
5055 [label="5055 @ N368\ncpio_mkfile_line" id="5055"]
5086 [label="5086 @ N369\ncpio_mkfile_line" id="5086"]
5093 [label="5093 @ N302\ncpio_mkfile_line exit" id="5093"]
5099 [label="5099 @ N504\nmain" id="5099"]
5105 [label="5105 @ N485\nmain" id="5105"]
5271 [label="5271 @ N483\nmain" id="5271"]
5285 [label="5285 @ N477\nmain" id="5285"]
5338 [label="5338 @ N489\nmain" id="5338"]
5360 [fillcolor="green" label="5360 @ N442\nmain\nABS243" id="5360"]
5304 [label="5304 @ N490\nmain" id="5304"]
5319 [label="5319 @ N491\nmain" id="5319"]
5227 [label="5227 @ N484\nmain" id="5227"]
5241 [label="5241 @ N486\nmain" id="5241"]
5252 [label="5252 @ N487\nmain" id="5252"]
5068 [label="5068 @ N370\ncpio_mkfile_line" id="5068"]
5075 [label="5075 @ N371\ncpio_mkfile_line" id="5075"]
5024 [label="5024 @ N276\ncpio_mkfile" id="5024"]
5030 [label="5030 @ N277\ncpio_mkfile" id="5030"]
5000 [label="5000 @ N272\ncpio_mkfile" id="5000"]
5005 [label="5005 @ N273\ncpio_mkfile" id="5005"]
4842 [label="4842 @ N216\ncpio_mkfile" id="4842"]
4846 [label="4846 @ N220\ncpio_mkfile" id="4846"]
4848 [label="4848 @ N221\ncpio_mkfile" id="4848"]
4849 [label="4849 @ N225\ncpio_mkfile" id="4849"]
4851 [label="4851 @ N227\ncpio_mkfile" id="4851"]
4850 [label="4850 @ N226\ncpio_mkfile" id="4850"]
4852 [label="4852 @ N228\ncpio_mkfile" id="4852"]
4853 [label="4853 @ N229\ncpio_mkfile" id="4853"]
4855 [label="4855 @ N230\ncpio_mkfile" id="4855"]
4857 [fillcolor="cornflowerblue" label="4857 @ N236\ncpio_mkfile\nABS219" id="4857"]
4859 [label="4859 @ N239\ncpio_mkfile" id="4859"]
4860 [label="4860 @ N270\ncpio_mkfile" id="4860"]
5007 [label="5007 @ N271\ncpio_mkfile" id="5007"]
5032 [label="5032 @ N275\ncpio_mkfile" id="5032"]
5041 [label="5041 @ N197\ncpio_mkfile exit" id="5041"]
5046 [label="5046 @ N367\ncpio_mkfile_line" id="5046"]
5051 [label="5051 @ N368\ncpio_mkfile_line" id="5051"]
5078 [label="5078 @ N369\ncpio_mkfile_line" id="5078"]
5089 [label="5089 @ N302\ncpio_mkfile_line exit" id="5089"]
5095 [label="5095 @ N504\nmain" id="5095"]
5101 [label="5101 @ N485\nmain" id="5101"]
5263 [label="5263 @ N483\nmain" id="5263"]
5281 [label="5281 @ N477\nmain" id="5281"]
5330 [label="5330 @ N489\nmain" id="5330"]
5352 [fillcolor="cornflowerblue" label="5352 @ N442\nmain\nABS239: false" id="5352"]
5296 [label="5296 @ N490\nmain" id="5296"]
5315 [label="5315 @ N491\nmain" id="5315"]
5219 [label="5219 @ N484\nmain" id="5219"]
5237 [label="5237 @ N486\nmain" id="5237"]
5248 [label="5248 @ N487\nmain" id="5248"]
5060 [label="5060 @ N370\ncpio_mkfile_line" id="5060"]
5071 [label="5071 @ N371\ncpio_mkfile_line" id="5071"]
5016 [label="5016 @ N276\ncpio_mkfile" id="5016"]
5026 [label="5026 @ N277\ncpio_mkfile" id="5026"]
4992 [label="4992 @ N272\ncpio_mkfile" id="4992"]
5001 [label="5001 @ N273\ncpio_mkfile" id="5001"]
4858 [label="4858 @ N238\ncpio_mkfile" id="4858"]
4864 [label="4864 @ N240\ncpio_mkfile" id="4864"]
4868 [label="4868 @ N243\ncpio_mkfile" id="4868"]
4869 [label="4869 @ N248\ncpio_mkfile" id="4869"]
4870 [label="4870 @ N249\ncpio_mkfile" id="4870"]
4871 [label="4871 @ N250\ncpio_mkfile" id="4871"]
4872 [label="4872 @ N251\ncpio_mkfile" id="4872"]
4873 [label="4873 @ N41\npush_hdr entry" id="4873"]
4874 [label="4874 @ N42\npush_hdr" id="4874"]
4875 [label="4875 @ N43\npush_hdr" id="4875"]
4876 [label="4876 @ N40\npush_hdr exit" id="4876"]
4877 [label="4877 @ N252\ncpio_mkfile" id="4877"]
4878 [label="4878 @ N1\npush_string entry" id="4878"]
4879 [label="4879 @ N3\npush_string" id="4879"]
4880 [label="4880 @ N4\npush_string" id="4880"]
4881 [label="4881 @ N5\npush_string" id="4881"]
4882 [label="4882 @ N6\npush_string" id="4882"]
4883 [label="4883 @ N7\npush_string" id="4883"]
4884 [label="4884 @ N0\npush_string exit" id="4884"]
4885 [label="4885 @ N253\ncpio_mkfile" id="4885"]
4886 [label="4886 @ N10\npush_pad entry" id="4886"]
4888 [fillcolor="cornflowerblue" label="4888 @ N12\npush_pad\nABS220" id="4888"]
4890 [label="4890 @ N13\npush_pad" id="4890"]
4891 [label="4891 @ N15\npush_pad" id="4891"]
4893 [fillcolor="green" label="4893 @ N12\npush_pad\nABS221" id="4893"]
4889 [label="4889 @ N14\npush_pad" id="4889"]
4894 [label="4894 @ N9\npush_pad exit" id="4894"]
4895 [label="4895 @ N254\ncpio_mkfile" id="4895"]
4897 [label="4897 @ N256\ncpio_mkfile" id="4897"]
4898 [label="4898 @ N259\ncpio_mkfile" id="4898"]
4899 [label="4899 @ N260\ncpio_mkfile" id="4899"]
4901 [label="4901 @ N257\ncpio_mkfile" id="4901"]
4902 [label="4902 @ N263\ncpio_mkfile" id="4902"]
4903 [label="4903 @ N10\npush_pad entry" id="4903"]
4905 [fillcolor="cornflowerblue" label="4905 @ N12\npush_pad\nABS222" id="4905"]
4907 [label="4907 @ N13\npush_pad" id="4907"]
4908 [label="4908 @ N15\npush_pad" id="4908"]
4910 [fillcolor="green" label="4910 @ N12\npush_pad\nABS223" id="4910"]
4906 [label="4906 @ N14\npush_pad" id="4906"]
4911 [label="4911 @ N9\npush_pad exit" id="4911"]
4912 [label="4912 @ N264\ncpio_mkfile" id="4912"]
4913 [label="4913 @ N255\ncpio_mkfile" id="4913"]
4977 [fillcolor="green" label="4977 @ N236\ncpio_mkfile\nABS229" id="4977"]
4900 [label="4900 @ N258\ncpio_mkfile" id="4900"]
4914 [label="4914 @ N261\ncpio_mkfile" id="4914"]
4915 [label="4915 @ N270\ncpio_mkfile" id="4915"]
5009 [label="5009 @ N271\ncpio_mkfile" id="5009"]
5034 [label="5034 @ N275\ncpio_mkfile" id="5034"]
5042 [label="5042 @ N197\ncpio_mkfile exit" id="5042"]
5047 [label="5047 @ N367\ncpio_mkfile_line" id="5047"]
5052 [label="5052 @ N368\ncpio_mkfile_line" id="5052"]
5080 [label="5080 @ N369\ncpio_mkfile_line" id="5080"]
5090 [label="5090 @ N302\ncpio_mkfile_line exit" id="5090"]
5096 [label="5096 @ N504\nmain" id="5096"]
5102 [label="5102 @ N485\nmain" id="5102"]
5265 [label="5265 @ N483\nmain" id="5265"]
5282 [label="5282 @ N477\nmain" id="5282"]
5332 [label="5332 @ N489\nmain" id="5332"]
5354 [fillcolor="green" label="5354 @ N442\nmain\nABS240" id="5354"]
5298 [label="5298 @ N490\nmain" id="5298"]
5316 [label="5316 @ N491\nmain" id="5316"]
5221 [label="5221 @ N484\nmain" id="5221"]
5238 [label="5238 @ N486\nmain" id="5238"]
5249 [label="5249 @ N487\nmain" id="5249"]
5062 [label="5062 @ N370\ncpio_mkfile_line" id="5062"]
5072 [label="5072 @ N371\ncpio_mkfile_line" id="5072"]
5018 [label="5018 @ N276\ncpio_mkfile" id="5018"]
5027 [label="5027 @ N277\ncpio_mkfile" id="5027"]
4994 [label="4994 @ N272\ncpio_mkfile" id="4994"]
5002 [label="5002 @ N273\ncpio_mkfile" id="5002"]
4896 [label="4896 @ N255\ncpio_mkfile" id="4896"]
4917 [fillcolor="cornflowerblue" label="4917 @ N236\ncpio_mkfile\nABS224" id="4917"]
4919 [label="4919 @ N239\ncpio_mkfile" id="4919"]
4920 [label="4920 @ N270\ncpio_mkfile" id="4920"]
5011 [label="5011 @ N271\ncpio_mkfile" id="5011"]
5036 [label="5036 @ N275\ncpio_mkfile" id="5036"]
5043 [label="5043 @ N197\ncpio_mkfile exit" id="5043"]
5048 [label="5048 @ N367\ncpio_mkfile_line" id="5048"]
5053 [label="5053 @ N368\ncpio_mkfile_line" id="5053"]
5082 [label="5082 @ N369\ncpio_mkfile_line" id="5082"]
5091 [label="5091 @ N302\ncpio_mkfile_line exit" id="5091"]
5097 [label="5097 @ N504\nmain" id="5097"]
5103 [label="5103 @ N485\nmain" id="5103"]
5267 [label="5267 @ N483\nmain" id="5267"]
5283 [label="5283 @ N477\nmain" id="5283"]
5334 [label="5334 @ N489\nmain" id="5334"]
5356 [fillcolor="green" label="5356 @ N442\nmain\nABS241" id="5356"]
5300 [label="5300 @ N490\nmain" id="5300"]
5317 [label="5317 @ N491\nmain" id="5317"]
5223 [label="5223 @ N484\nmain" id="5223"]
5239 [label="5239 @ N486\nmain" id="5239"]
5250 [label="5250 @ N487\nmain" id="5250"]
5064 [label="5064 @ N370\ncpio_mkfile_line" id="5064"]
5073 [label="5073 @ N371\ncpio_mkfile_line" id="5073"]
5020 [label="5020 @ N276\ncpio_mkfile" id="5020"]
5028 [label="5028 @ N277\ncpio_mkfile" id="5028"]
4996 [label="4996 @ N272\ncpio_mkfile" id="4996"]
5003 [label="5003 @ N273\ncpio_mkfile" id="5003"]
4918 [label="4918 @ N238\ncpio_mkfile" id="4918"]
4924 [label="4924 @ N240\ncpio_mkfile" id="4924"]
4928 [label="4928 @ N243\ncpio_mkfile" id="4928"]
4929 [label="4929 @ N248\ncpio_mkfile" id="4929"]
4930 [label="4930 @ N249\ncpio_mkfile" id="4930"]
4931 [label="4931 @ N250\ncpio_mkfile" id="4931"]
4932 [label="4932 @ N251\ncpio_mkfile" id="4932"]
4933 [label="4933 @ N41\npush_hdr entry" id="4933"]
4934 [label="4934 @ N42\npush_hdr" id="4934"]
4935 [label="4935 @ N43\npush_hdr" id="4935"]
4936 [label="4936 @ N40\npush_hdr exit" id="4936"]
4937 [label="4937 @ N252\ncpio_mkfile" id="4937"]
4938 [label="4938 @ N1\npush_string entry" id="4938"]
4939 [label="4939 @ N3\npush_string" id="4939"]
4940 [label="4940 @ N4\npush_string" id="4940"]
4941 [label="4941 @ N5\npush_string" id="4941"]
4942 [label="4942 @ N6\npush_string" id="4942"]
4943 [label="4943 @ N7\npush_string" id="4943"]
4944 [label="4944 @ N0\npush_string exit" id="4944"]
4945 [label="4945 @ N253\ncpio_mkfile" id="4945"]
4946 [label="4946 @ N10\npush_pad entry" id="4946"]
4948 [fillcolor="cornflowerblue" label="4948 @ N12\npush_pad\nABS225" id="4948"]
4950 [label="4950 @ N13\npush_pad" id="4950"]
4951 [label="4951 @ N15\npush_pad" id="4951"]
4953 [fillcolor="green" label="4953 @ N12\npush_pad\nABS226" id="4953"]
4949 [label="4949 @ N14\npush_pad" id="4949"]
4954 [label="4954 @ N9\npush_pad exit" id="4954"]
4955 [label="4955 @ N254\ncpio_mkfile" id="4955"]
4957 [label="4957 @ N256\ncpio_mkfile" id="4957"]
4958 [label="4958 @ N259\ncpio_mkfile" id="4958"]
4959 [label="4959 @ N260\ncpio_mkfile" id="4959"]
4961 [label="4961 @ N257\ncpio_mkfile" id="4961"]
4962 [label="4962 @ N263\ncpio_mkfile" id="4962"]
4963 [label="4963 @ N10\npush_pad entry" id="4963"]
4965 [fillcolor="cornflowerblue" label="4965 @ N12\npush_pad\nABS227" id="4965"]
4967 [label="4967 @ N13\npush_pad" id="4967"]
4968 [label="4968 @ N15\npush_pad" id="4968"]
4970 [fillcolor="green" label="4970 @ N12\npush_pad\nABS228" id="4970"]
4966 [label="4966 @ N14\npush_pad" id="4966"]
4971 [label="4971 @ N9\npush_pad exit" id="4971"]
4972 [label="4972 @ N264\ncpio_mkfile" id="4972"]
4973 [label="4973 @ N255\ncpio_mkfile" id="4973"]
4981 [fillcolor="green" label="4981 @ N236\ncpio_mkfile\nABS231" id="4981"]
4960 [label="4960 @ N258\ncpio_mkfile" id="4960"]
4974 [label="4974 @ N261\ncpio_mkfile" id="4974"]
4975 [label="4975 @ N270\ncpio_mkfile" id="4975"]
5013 [label="5013 @ N271\ncpio_mkfile" id="5013"]
5038 [label="5038 @ N275\ncpio_mkfile" id="5038"]
5044 [label="5044 @ N197\ncpio_mkfile exit" id="5044"]
5049 [label="5049 @ N367\ncpio_mkfile_line" id="5049"]
5054 [label="5054 @ N368\ncpio_mkfile_line" id="5054"]
5084 [label="5084 @ N369\ncpio_mkfile_line" id="5084"]
5092 [label="5092 @ N302\ncpio_mkfile_line exit" id="5092"]
5098 [label="5098 @ N504\nmain" id="5098"]
5104 [label="5104 @ N485\nmain" id="5104"]
5269 [label="5269 @ N483\nmain" id="5269"]
5284 [label="5284 @ N477\nmain" id="5284"]
5336 [label="5336 @ N489\nmain" id="5336"]
5358 [fillcolor="green" label="5358 @ N442\nmain\nABS242" id="5358"]
5302 [label="5302 @ N490\nmain" id="5302"]
5318 [label="5318 @ N491\nmain" id="5318"]
5225 [label="5225 @ N484\nmain" id="5225"]
5240 [label="5240 @ N486\nmain" id="5240"]
5251 [label="5251 @ N487\nmain" id="5251"]
5066 [label="5066 @ N370\ncpio_mkfile_line" id="5066"]
5074 [label="5074 @ N371\ncpio_mkfile_line" id="5074"]
5022 [label="5022 @ N276\ncpio_mkfile" id="5022"]
5029 [label="5029 @ N277\ncpio_mkfile" id="5029"]
4998 [label="4998 @ N272\ncpio_mkfile" id="4998"]
5004 [label="5004 @ N273\ncpio_mkfile" id="5004"]
4956 [label="4956 @ N255\ncpio_mkfile" id="4956"]
4979 [fillcolor="green" label="4979 @ N236\ncpio_mkfile\nABS230" id="4979"]
4925 [label="4925 @ N244\ncpio_mkfile" id="4925"]
4921 [label="4921 @ N241\ncpio_mkfile" id="4921"]
4865 [label="4865 @ N244\ncpio_mkfile" id="4865"]
4861 [label="4861 @ N241\ncpio_mkfile" id="4861"]
4854 [label="4854 @ N231\ncpio_mkfile" id="4854"]
4982 [label="4982 @ N232\ncpio_mkfile" id="4982"]
4847 [label="4847 @ N222\ncpio_mkfile" id="4847"]
4985 [label="4985 @ N223\ncpio_mkfile" id="4985"]
4839 [label="4839 @ N212\ncpio_mkfile" id="4839"]
4988 [label="4988 @ N213\ncpio_mkfile" id="4988"]
4817 [label="4817 @ N289\ncpio_replace_env" id="4817"]
4818 [label="4818 @ N291\ncpio_replace_env" id="4818"]
4820 [label="4820 @ N287\ncpio_replace_env" id="4820"]
4822 [label="4822 @ N293\ncpio_replace_env" id="4822"]
4823 [label="4823 @ N294\ncpio_replace_env" id="4823"]
4824 [label="4824 @ N295\ncpio_replace_env" id="4824"]
4826 [label="4826 @ N296\ncpio_replace_env" id="4826"]
4829 [label="4829 @ N298\ncpio_replace_env" id="4829"]
4830 [label="4830 @ N299\ncpio_replace_env" id="4830"]
4831 [label="4831 @ N300\ncpio_replace_env" id="4831"]
4833 [fillcolor="green" label="4833 @ N286\ncpio_replace_env\nABS218" id="4833"]
4825 [label="4825 @ N297\ncpio_replace_env" id="4825"]
4787 [label="4787 @ N324\ncpio_mkfile_line" id="4787"]
4788 [label="4788 @ N325\ncpio_mkfile_line" id="4788"]
4789 [label="4789 @ N326\ncpio_mkfile_line" id="4789"]
4791 [label="4791 @ N322\ncpio_mkfile_line" id="4791"]
4793 [label="4793 @ N329\ncpio_mkfile_line" id="4793"]
4794 [label="4794 @ N330\ncpio_mkfile_line" id="4794"]
4795 [label="4795 @ N331\ncpio_mkfile_line" id="4795"]
4796 [label="4796 @ N332\ncpio_mkfile_line" id="4796"]
4798 [label="4798 @ N334\ncpio_mkfile_line" id="4798"]
4797 [label="4797 @ N333\ncpio_mkfile_line" id="4797"]
4799 [label="4799 @ N335\ncpio_mkfile_line" id="4799"]
4801 [label="4801 @ N336\ncpio_mkfile_line" id="4801"]
4802 [label="4802 @ N340\ncpio_mkfile_line" id="4802"]
4803 [label="4803 @ N341\ncpio_mkfile_line" id="4803"]
4804 [label="4804 @ N342\ncpio_mkfile_line" id="4804"]
4805 [label="4805 @ N343\ncpio_mkfile_line" id="4805"]
4807 [fillcolor="cornflowerblue" label="4807 @ N345\ncpio_mkfile_line\nABS216: false" id="4807"]
4800 [label="4800 @ N337\ncpio_mkfile_line" id="4800"]
4808 [label="4808 @ N338\ncpio_mkfile_line" id="4808"]
5058 [label="5058 @ N368\ncpio_mkfile_line" id="5058"]
5088 [label="5088 @ N369\ncpio_mkfile_line" id="5088"]
5094 [label="5094 @ N302\ncpio_mkfile_line exit" id="5094"]
5100 [label="5100 @ N504\nmain" id="5100"]
5070 [label="5070 @ N370\ncpio_mkfile_line" id="5070"]
5076 [label="5076 @ N371\ncpio_mkfile_line" id="5076"]
4784 [label="4784 @ N316\ncpio_mkfile_line" id="4784"]
5056 [label="5056 @ N319\ncpio_mkfile_line" id="5056"]
4595 [label="4595 @ N499\nmain" id="4595"]
5108 [label="5108 @ N144\ncpio_mkpipe_line entry" id="5108"]
5109 [label="5109 @ N146\ncpio_mkpipe_line" id="5109"]
5110 [label="5110 @ N120\ncpio_mkgeneric_line entry" id="5110"]
5111 [label="5111 @ N129\ncpio_mkgeneric_line" id="5111"]
5112 [label="5112 @ N130\ncpio_mkgeneric_line" id="5112"]
5114 [label="5114 @ N127\ncpio_mkgeneric_line" id="5114"]
5115 [label="5115 @ N133\ncpio_mkgeneric_line" id="5115"]
5116 [label="5116 @ N103\ncpio_mkgeneric entry" id="5116"]
5117 [label="5117 @ N105\ncpio_mkgeneric" id="5117"]
5121 [label="5121 @ N106\ncpio_mkgeneric" id="5121"]
5122 [label="5122 @ N113\ncpio_mkgeneric" id="5122"]
5123 [label="5123 @ N114\ncpio_mkgeneric" id="5123"]
5124 [label="5124 @ N115\ncpio_mkgeneric" id="5124"]
5125 [label="5125 @ N41\npush_hdr entry" id="5125"]
5126 [label="5126 @ N42\npush_hdr" id="5126"]
5127 [label="5127 @ N43\npush_hdr" id="5127"]
5128 [label="5128 @ N40\npush_hdr exit" id="5128"]
5129 [label="5129 @ N116\ncpio_mkgeneric" id="5129"]
5130 [label="5130 @ N20\npush_rest entry" id="5130"]
5131 [label="5131 @ N22\npush_rest" id="5131"]
5132 [label="5132 @ N23\npush_rest" id="5132"]
5133 [label="5133 @ N25\npush_rest" id="5133"]
5134 [label="5134 @ N26\npush_rest" id="5134"]
5135 [label="5135 @ N27\npush_rest" id="5135"]
5137 [fillcolor="cornflowerblue" label="5137 @ N30\npush_rest\nABS232" id="5137"]
5139 [label="5139 @ N31\npush_rest" id="5139"]
5140 [label="5140 @ N33\npush_rest" id="5140"]
5142 [fillcolor="green" label="5142 @ N30\npush_rest\nABS233" id="5142"]
5138 [label="5138 @ N32\npush_rest" id="5138"]
5143 [label="5143 @ N19\npush_rest exit" id="5143"]
5144 [label="5144 @ N117\ncpio_mkgeneric" id="5144"]
5145 [label="5145 @ N102\ncpio_mkgeneric exit" id="5145"]
5146 [label="5146 @ N134\ncpio_mkgeneric_line" id="5146"]
5147 [label="5147 @ N135\ncpio_mkgeneric_line" id="5147"]
5150 [label="5150 @ N119\ncpio_mkgeneric_line exit" id="5150"]
5152 [label="5152 @ N147\ncpio_mkpipe_line" id="5152"]
5154 [label="5154 @ N143\ncpio_mkpipe_line exit" id="5154"]
5156 [label="5156 @ N501\nmain" id="5156"]
5158 [label="5158 @ N485\nmain" id="5158"]
5273 [label="5273 @ N483\nmain" id="5273"]
5286 [label="5286 @ N477\nmain" id="5286"]
5340 [label="5340 @ N489\nmain" id="5340"]
5362 [fillcolor="green" label="5362 @ N442\nmain\nABS244" id="5362"]
5306 [label="5306 @ N490\nmain" id="5306"]
5320 [label="5320 @ N491\nmain" id="5320"]
5229 [label="5229 @ N484\nmain" id="5229"]
5242 [label="5242 @ N486\nmain" id="5242"]
5253 [label="5253 @ N487\nmain" id="5253"]
5118 [label="5118 @ N107\ncpio_mkgeneric" id="5118"]
5113 [label="5113 @ N128\ncpio_mkgeneric_line" id="5113"]
5148 [label="5148 @ N131\ncpio_mkgeneric_line" id="5148"]
5149 [label="5149 @ N135\ncpio_mkgeneric_line" id="5149"]
5151 [label="5151 @ N119\ncpio_mkgeneric_line exit" id="5151"]
5153 [label="5153 @ N147\ncpio_mkpipe_line" id="5153"]
5155 [label="5155 @ N143\ncpio_mkpipe_line exit" id="5155"]
5157 [label="5157 @ N501\nmain" id="5157"]
4593 [label="4593 @ N496\nmain" id="4593"]
5161 [label="5161 @ N178\ncpio_mknod_line entry" id="5161"]
5162 [label="5162 @ N190\ncpio_mknod_line" id="5162"]
5163 [label="5163 @ N191\ncpio_mknod_line" id="5163"]
5165 [label="5165 @ N188\ncpio_mknod_line" id="5165"]
5166 [label="5166 @ N156\ncpio_mknod entry" id="5166"]
5167 [label="5167 @ N158\ncpio_mknod" id="5167"]
5169 [label="5169 @ N161\ncpio_mknod" id="5169"]
5172 [label="5172 @ N159\ncpio_mknod" id="5172"]
5176 [label="5176 @ N164\ncpio_mknod" id="5176"]
5177 [label="5177 @ N171\ncpio_mknod" id="5177"]
5178 [label="5178 @ N172\ncpio_mknod" id="5178"]
5179 [label="5179 @ N173\ncpio_mknod" id="5179"]
5180 [label="5180 @ N41\npush_hdr entry" id="5180"]
5181 [label="5181 @ N42\npush_hdr" id="5181"]
5182 [label="5182 @ N43\npush_hdr" id="5182"]
5183 [label="5183 @ N40\npush_hdr exit" id="5183"]
5184 [label="5184 @ N174\ncpio_mknod" id="5184"]
5185 [label="5185 @ N20\npush_rest entry" id="5185"]
5186 [label="5186 @ N22\npush_rest" id="5186"]
5187 [label="5187 @ N23\npush_rest" id="5187"]
5188 [label="5188 @ N25\npush_rest" id="5188"]
5189 [label="5189 @ N26\npush_rest" id="5189"]
5190 [label="5190 @ N27\npush_rest" id="5190"]
5192 [fillcolor="cornflowerblue" label="5192 @ N30\npush_rest\nABS234" id="5192"]
5194 [label="5194 @ N31\npush_rest" id="5194"]
5195 [label="5195 @ N33\npush_rest" id="5195"]
5197 [fillcolor="green" label="5197 @ N30\npush_rest\nABS235" id="5197"]
5193 [label="5193 @ N32\npush_rest" id="5193"]
5198 [label="5198 @ N19\npush_rest exit" id="5198"]
5199 [label="5199 @ N175\ncpio_mknod" id="5199"]
5200 [label="5200 @ N155\ncpio_mknod exit" id="5200"]
5201 [label="5201 @ N194\ncpio_mknod_line" id="5201"]
5202 [label="5202 @ N195\ncpio_mknod_line" id="5202"]
5205 [label="5205 @ N177\ncpio_mknod_line exit" id="5205"]
5207 [label="5207 @ N498\nmain" id="5207"]
5209 [label="5209 @ N485\nmain" id="5209"]
5275 [label="5275 @ N483\nmain" id="5275"]
5287 [label="5287 @ N477\nmain" id="5287"]
5342 [label="5342 @ N489\nmain" id="5342"]
5364 [fillcolor="green" label="5364 @ N442\nmain\nABS245" id="5364"]
5308 [label="5308 @ N490\nmain" id="5308"]
5321 [label="5321 @ N491\nmain" id="5321"]
5231 [label="5231 @ N484\nmain" id="5231"]
5243 [label="5243 @ N486\nmain" id="5243"]
5254 [label="5254 @ N487\nmain" id="5254"]
5173 [label="5173 @ N165\ncpio_mknod" id="5173"]
5168 [label="5168 @ N160\ncpio_mknod" id="5168"]
5164 [label="5164 @ N189\ncpio_mknod_line" id="5164"]
5203 [label="5203 @ N192\ncpio_mknod_line" id="5203"]
5204 [label="5204 @ N195\ncpio_mknod_line" id="5204"]
5206 [label="5206 @ N177\ncpio_mknod_line exit" id="5206"]
5208 [label="5208 @ N498\nmain" id="5208"]
4578 [label="4578 @ N469\nmain" id="4578"]
4580 [label="4580 @ N471\nmain" id="4580"]
4575 [label="4575 @ N464\nmain" id="4575"]
5368 [fillcolor="green" label="5368 @ N442\nmain\nABS247" id="5368"]
4571 [label="4571 @ N461\nmain" id="4571"]
5370 [fillcolor="green" label="5370 @ N442\nmain\nABS248" id="5370"]
4569 [label="4569 @ N455\nmain" id="4569"]
5371 [label="5371 @ N457\nmain" id="5371"]
5372 [label="5372 @ N444\nmain" id="5372"]
5374 [label="5374 @ N492\nmain" id="5374"]
5373 [label="5373 @ N493\nmain" id="5373"]
5375 [label="5375 @ N46\ncpio_trailer entry" id="5375"]
5376 [label="5376 @ N50\ncpio_trailer" id="5376"]
5377 [label="5377 @ N51\ncpio_trailer" id="5377"]
5378 [label="5378 @ N52\ncpio_trailer" id="5378"]
5379 [label="5379 @ N41\npush_hdr entry" id="5379"]
5380 [label="5380 @ N42\npush_hdr" id="5380"]
5381 [label="5381 @ N43\npush_hdr" id="5381"]
5382 [label="5382 @ N40\npush_hdr exit" id="5382"]
5383 [label="5383 @ N53\ncpio_trailer" id="5383"]
5384 [label="5384 @ N20\npush_rest entry" id="5384"]
5385 [label="5385 @ N22\npush_rest" id="5385"]
5386 [label="5386 @ N23\npush_rest" id="5386"]
5387 [label="5387 @ N25\npush_rest" id="5387"]
5388 [label="5388 @ N26\npush_rest" id="5388"]
5389 [label="5389 @ N27\npush_rest" id="5389"]
5391 [fillcolor="cornflowerblue" label="5391 @ N30\npush_rest\nABS249: false" id="5391"]
4566 [label="4566 @ N452\nmain" id="4566"]
5393 [fillcolor="green" label="5393 @ N442\nmain\nABS250" id="5393"]
4546 [label="4546 @ N433\nmain" id="4546"]
4549 [label="4549 @ N435\nmain" id="4549"]
4550 [label="4550 @ N436\nmain" id="4550"]
4551 [label="4551 @ N437\nmain" id="4551"]
4552 [label="4552 @ N438\nmain" id="4552"]
4553 [label="4553 @ N439\nmain" id="4553"]
4554 [label="4554 @ N375\nusage entry" id="4554"]
4555 [label="4555 @ N376\nusage" id="4555"]
4556 [label="4556 @ N377\nusage" id="4556"]
4557 [label="4557 @ N374\nusage exit" id="4557"]
4558 [label="4558 @ N440\nmain" id="4558"]
4543 [label="4543 @ N427\nmain" id="4543"]
4534 [label="4534 @ N422\nmain" id="4534"]
4536 [label="4536 @ N375\nusage entry" id="4536"]
4537 [label="4537 @ N376\nusage" id="4537"]
4538 [label="4538 @ N377\nusage" id="4538"]
4539 [label="4539 @ N374\nusage exit" id="4539"]
4540 [label="4540 @ N423\nmain" id="4540"]
1 -> 410 [label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; typedef __intptr_t intptr_t; typedef __socklen_t socklen_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int lockf(int __fd, int __cmd, __off_t __len); int fdatasync(int __fildes); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); int * __errno_location(); enum  {   _ISupper = 256,   _ISlower = 512,   _ISalpha = 1024,   _ISdigit = 2048,   _ISxdigit = 4096,   _ISspace = 8192,   _ISprint = 16384,   _ISgraph = 32768,   _ISblank = 1,   _IScntrl = 2,   _ISpunct = 4,   _ISalnum = 8 } ; const unsigned short int ** __ctype_b_loc(); const __int32_t ** __ctype_tolower_loc(); const __int32_t ** __ctype_toupper_loc(); int isalnum(int); int isalpha(int); int iscntrl(int); int isdigit(int); int islower(int); int isgraph(int); int isprint(int); int ispunct(int); int isspace(int); int isupper(int); int isxdigit(int); int tolower(int __c); int toupper(int __c); int isblank(int); int isascii(int __c); int toascii(int __c); int _toupper(int); int _tolower(int); int isalnum_l(int, __locale_t ); int isalpha_l(int, __locale_t ); int iscntrl_l(int, __locale_t ); int isdigit_l(int, __locale_t ); int islower_l(int, __locale_t ); int isgraph_l(int, __locale_t ); int isprint_l(int, __locale_t ); int ispunct_l(int, __locale_t ); int isspace_l(int, __locale_t ); int isupper_l(int, __locale_t ); int isxdigit_l(int, __locale_t ); int isblank_l(int, __locale_t ); int __tolower_l(int __c, __locale_t __l); int tolower_l(int __c, __locale_t __l); int __toupper_l(int __c, __locale_t __l); int toupper_l(int __c, __locale_t __l); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 2; unsigned int offset = 0U; unsigned int ino = 721; time_t default_mtime = 0L; struct file_handler {   const char *type;   int (*handler)(const char *line); } ; void push_string(const char *name); void push_pad(); void push_rest(const char *name); void push_hdr(const char *s); void cpio_trailer(); int cpio_mkslink(const char *name, const char *target, unsigned int mode, uid_t uid, gid_t gid); int cpio_mkslink_line(const char *line); int cpio_mkgeneric(const char *name, unsigned int mode, uid_t uid, gid_t gid); enum generic_types {   GT_DIR = 0,   GT_PIPE = 1,   GT_SOCK = 2 } ; struct generic_type {   const char *type;   mode_t mode; } ; struct generic_type generic_type_table[] = { [0] = { .type = 'dir', .mode = 16384 }, [1] = { .type = 'pipe', .mode = 4096 }, [2] = { .type = 'sock', .mode = 49152 } }; int cpio_mkgeneric_line(const char *line, enum generic_types gt); int cpio_mkdir_line(const char *line); int cpio_mkpipe_line(const char *line); int cpio_mksock_line(const char *line); int cpio_mknod(const char *name, unsigned int mode, uid_t uid, gid_t gid, char dev_type, unsigned int maj, unsigned int min); int cpio_mknod_line(const char *line); int cpio_mkfile(const char *name, const char *location, unsigned int mode, uid_t uid, gid_t gid, unsigned int nlinks); char * cpio_replace_env(char *new_location); int cpio_mkfile_line(const char *line); void usage(const char *prog); struct file_handler file_handler_table[] = { { .type = 'file', .handler = &cpio_mkfile_line }, { .type = 'nod', .handler = &cpio_mknod_line }, { .type = 'dir', .handler = &cpio_mkdir_line }, { .type = 'slink', .handler = &cpio_mkslink_line }, { .type = 'pipe', .handler = &cpio_mkpipe_line }, { .type = 'sock', .handler = &cpio_mksock_line }, { .type = (void *)0, .handler = (void *)0 } }; int main(int argc, char *argv[]); Function start dummy edge FILE *cpio_list; char line[8242]; char *args; char *type; int ec = 0; int line_nr = 0; const char *filename;" id="1 -> 410"]
410 -> 411 [label="Line 4338: default_mtime = time((void *)0);" id="410 -> 411"]
411 -> 4490 [label="Line 4339: while" id="411 -> 4490"]
4532 -> 4490 [style="dashed" weight="0" label="covered by"]
4490 -> 4491 [label="Line 4339:  int opt;" id="4490 -> 4491"]
4491 -> 4492 [label="Line 4340: opt = getopt(argc, argv, 't:h');" id="4491 -> 4492"]
4492 -> 4493 [label="Line 4341: char *invalid;" id="4492 -> 4493"]
4493 -> 4494 [label="Line 4343: [opt == -1]" id="4493 -> 4494"]
4493 -> 4495 [label="Line 4343: [!(opt == -1)]" id="4493 -> 4495"]
4495 -> 4496 [label="Line 4345: switch (opt)" id="4495 -> 4496"]
4496 -> 4497 [label="Line 4346: [opt == 't']" id="4496 -> 4497"]
4496 -> 4498 [label="Line 4346: [!(opt == 't')]" id="4496 -> 4498"]
4498 -> 4499 [label="Line 4355: [opt == 'h']" id="4498 -> 4499"]
4498 -> 4500 [label="Line 4355: [!(opt == 'h')]" id="4498 -> 4500"]
4500 -> 4502 [label="Line 4356: [!(opt == '?')]" id="4500 -> 4502"]
4500 -> 4505 [label="Line 4356: [opt == '?']" id="4500 -> 4505"]
4505 -> 4506 [label="Line 4357: usage(argv[0])" id="4505 -> 4506"]
4506 -> 4507 [label="Line 0: Function start dummy edge" id="4506 -> 4507"]
4507 -> 4508 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="4507 -> 4508"]
4508 -> 4509 [label="Line 0: default return" id="4508 -> 4509"]
4509 -> 4510 [label="Line 4357: Return edge from usage to main" id="4509 -> 4510"]
4510 -> 4511 [label="Line 4358: int __CPAchecker_TMP_0;" id="4510 -> 4511"]
4511 -> 4512 [label="Line 4358: [opt == 'h']" id="4511 -> 4512"]
4511 -> 4513 [label="Line 4358: [!(opt == 'h')]" id="4511 -> 4513"]
4513 -> 4516 [label="Line 4358: __CPAchecker_TMP_0 = 1;" id="4513 -> 4516"]
4512 -> 4516 [label="Line 4358: __CPAchecker_TMP_0 = 0;" id="4512 -> 4516"]
4502 -> 4530 [label="Line 0: " id="4502 -> 4530"]
4530 -> 4532 [label="Line 0: " id="4530 -> 4532"]
4499 -> 4505 [label="Line 4356: fall through" id="4499 -> 4505"]
4497 -> 4517 [label="Line 4347: default_mtime = strtol(optarg, &invalid, 10);" id="4497 -> 4517"]
4517 -> 4519 [label="Line 4348: [!((*optarg) == 0)]" id="4517 -> 4519"]
4517 -> 4522 [label="Line 4348: [(*optarg) == 0]" id="4517 -> 4522"]
4522 -> 4523 [label="Line 4349: fprintf(stderr, 'Invalid timestamp: %s\n', optarg);" id="4522 -> 4523"]
4523 -> 4524 [label="Line 4351: usage(argv[0])" id="4523 -> 4524"]
4524 -> 4525 [label="Line 0: Function start dummy edge" id="4524 -> 4525"]
4525 -> 4526 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="4525 -> 4526"]
4526 -> 4527 [label="Line 0: default return" id="4526 -> 4527"]
4527 -> 4528 [label="Line 4351: Return edge from usage to main" id="4527 -> 4528"]
4519 -> 4520 [label="Line 4348: [(*invalid) == 0]" id="4519 -> 4520"]
4519 -> 4522 [label="Line 4348: [!((*invalid) == 0)]" id="4519 -> 4522"]
4520 -> 4530 [label="Line 4354: break" id="4520 -> 4530"]
4494 -> 4533 [label="Line 4344: break" id="4494 -> 4533"]
4533 -> 4534 [label="Line 4362: [(argc - optind) != 1]" id="4533 -> 4534"]
4533 -> 4535 [label="Line 4362: [!((argc - optind) != 1)]" id="4533 -> 4535"]
4535 -> 4541 [label="Line 4366: filename = argv[optind]; int __CPAchecker_TMP_1;" id="4535 -> 4541"]
4541 -> 4542 [label="Line 4367: __CPAchecker_TMP_1 = strcmp(filename, '-');" id="4541 -> 4542"]
4542 -> 4543 [label="Line 4367: [__CPAchecker_TMP_1 == 0]" id="4542 -> 4543"]
4542 -> 4544 [label="Line 4367: [!(__CPAchecker_TMP_1 == 0)]" id="4542 -> 4544"]
4544 -> 4545 [label="Line 4369: cpio_list = fopen(filename, 'r');" id="4544 -> 4545"]
4545 -> 4546 [label="Line 4369: [cpio_list == 0]" id="4545 -> 4546"]
4545 -> 4547 [label="Line 4369: [!(cpio_list == 0)]" id="4545 -> 4547"]
4547 -> 4560 [label="Line 0: " id="4547 -> 4560"]
4560 -> 4562 [label="Line 4376: while" id="4560 -> 4562"]
5346 -> 4562 [style="dashed" weight="0" label="covered by"]
5348 -> 4562 [style="dashed" weight="0" label="covered by"]
5350 -> 4562 [style="dashed" weight="0" label="covered by"]
5354 -> 4562 [style="dashed" weight="0" label="covered by"]
5356 -> 4562 [style="dashed" weight="0" label="covered by"]
5358 -> 4562 [style="dashed" weight="0" label="covered by"]
5360 -> 4562 [style="dashed" weight="0" label="covered by"]
5362 -> 4562 [style="dashed" weight="0" label="covered by"]
5364 -> 4562 [style="dashed" weight="0" label="covered by"]
5366 -> 4562 [style="dashed" weight="0" label="covered by"]
5368 -> 4562 [style="dashed" weight="0" label="covered by"]
5370 -> 4562 [style="dashed" weight="0" label="covered by"]
5393 -> 4562 [style="dashed" weight="0" label="covered by"]
4562 -> 4563 [label="Line 4376:  int type_idx; size_t slen;" id="4562 -> 4563"]
4563 -> 4564 [label="Line 4378: slen = strlen(line);" id="4563 -> 4564"]
4564 -> 4565 [label="Line 4380: int __CPAchecker_TMP_4 = line_nr; line_nr = line_nr + 1; __CPAchecker_TMP_4;" id="4564 -> 4565"]
4565 -> 4566 [label="Line 4382: ['#' == (*line)]" id="4565 -> 4566"]
4565 -> 4567 [label="Line 4382: [!('#' == (*line))]" id="4565 -> 4567"]
4567 -> 4568 [label="Line 4387: type = strtok(line, ' \t');" id="4567 -> 4568"]
4568 -> 4569 [label="Line 4387: [type == 0]" id="4568 -> 4569"]
4568 -> 4570 [label="Line 4387: [!(type == 0)]" id="4568 -> 4570"]
4570 -> 4571 [label="Line 4395: ['\xa' == (*type)]" id="4570 -> 4571"]
4570 -> 4572 [label="Line 4395: [!('\xa' == (*type))]" id="4570 -> 4572"]
4572 -> 4573 [label="Line 4400: size_t __CPAchecker_TMP_5;" id="4572 -> 4573"]
4573 -> 4574 [label="Line 4400: __CPAchecker_TMP_5 = strlen(type);" id="4573 -> 4574"]
4574 -> 4575 [label="Line 4400: [slen == __CPAchecker_TMP_5]" id="4574 -> 4575"]
4574 -> 4576 [label="Line 4400: [!(slen == __CPAchecker_TMP_5)]" id="4574 -> 4576"]
4576 -> 4577 [label="Line 4405: args = strtok((void *)0, '\n');" id="4576 -> 4577"]
4577 -> 4578 [label="Line 4405: [args == 0]" id="4577 -> 4578"]
4577 -> 4582 [label="Line 4405: [!(args == 0)]" id="4577 -> 4582"]
4582 -> 4584 [label="Line 4412: for type_idx = 0;" id="4582 -> 4584"]
4592 -> 4584 [style="dashed" weight="0" label="covered by"]
4584 -> 4586 [label="Line 4412: [!(((file_handler_table[type_idx]).type) == 0)]" id="4584 -> 4586"]
4584 -> 5289 [label="Line 4412: [((file_handler_table[type_idx]).type) == 0]" id="4584 -> 5289"]
5289 -> 5310 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5289 -> 5310"]
5289 -> 5344 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5289 -> 5344"]
5344 -> 5366 [label="Line 0: " id="5344 -> 5366"]
5310 -> 5322 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5310 -> 5322"]
5322 -> 5344 [label="Line 0: " id="5322 -> 5344"]
4586 -> 4587 [label="Line 4413: int rc; int __CPAchecker_TMP_6;" id="4586 -> 4587"]
4587 -> 4588 [label="Line 4414: __CPAchecker_TMP_6 = strcmp(line, (file_handler_table[type_idx]).type);" id="4587 -> 4588"]
4588 -> 4589 [label="Line 4414: [__CPAchecker_TMP_6 == 0]" id="4588 -> 4589"]
4588 -> 4590 [label="Line 4414: [!(__CPAchecker_TMP_6 == 0)]" id="4588 -> 4590"]
4590 -> 4592 [label="Line 4412:  type_idx = type_idx + 1;" id="4590 -> 4592"]
4589 -> 4593 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mknod_line)]" id="4589 -> 4593"]
4589 -> 4594 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mknod_line))]" id="4589 -> 4594"]
4594 -> 4595 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line)]" id="4594 -> 4595"]
4594 -> 4596 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line))]" id="4594 -> 4596"]
4596 -> 4597 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line)]" id="4596 -> 4597"]
4596 -> 4598 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line))]" id="4596 -> 4598"]
4598 -> 4599 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line)]" id="4598 -> 4599"]
4598 -> 4600 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line))]" id="4598 -> 4600"]
4600 -> 4601 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line)]" id="4600 -> 4601"]
4600 -> 4602 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line))]" id="4600 -> 4602"]
4602 -> 4603 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mksock_line)]" id="4602 -> 4603"]
4602 -> 4604 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mksock_line))]" id="4602 -> 4604"]
4604 -> 5211 [label="Line 4415: rc = ((file_handler_table[type_idx]).handler)(args);" id="4604 -> 5211"]
5211 -> 5233 [label="Line 4415: [!(rc == 0)]" id="5211 -> 5233"]
5211 -> 5277 [label="Line 4415: [rc == 0]" id="5211 -> 5277"]
5277 -> 5289 [label="Line 4419: break" id="5277 -> 5289"]
5233 -> 5244 [label="Line 4416: ec = rc;" id="5233 -> 5244"]
5244 -> 5255 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5244 -> 5255"]
5255 -> 5277 [label="Line 0: " id="5255 -> 5277"]
4603 -> 4606 [label="Line 4415: cpio_mksock_line(args)" id="4603 -> 4606"]
4606 -> 4607 [label="Line 4023: Function start dummy edge int __CPAchecker_TMP_0;" id="4606 -> 4607"]
4607 -> 4608 [label="Line 4023: cpio_mkgeneric_line(line, 2)" id="4607 -> 4608"]
4608 -> 4609 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="4608 -> 4609"]
4609 -> 4610 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="4609 -> 4610"]
4610 -> 4611 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="4610 -> 4611"]
4610 -> 4612 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="4610 -> 4612"]
4612 -> 4613 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="4612 -> 4613"]
4613 -> 4614 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="4613 -> 4614"]
4614 -> 4615 [label="Line 3942: Function start dummy edge char s[256];" id="4614 -> 4615"]
4615 -> 4616 [label="Line 3944: [(name[0]) == '/']" id="4615 -> 4616"]
4615 -> 4619 [label="Line 3944: [!((name[0]) == '/')]" id="4615 -> 4619"]
4619 -> 4620 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="4619 -> 4620"]
4620 -> 4621 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="4620 -> 4621"]
4621 -> 4622 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="4621 -> 4622"]
4622 -> 4623 [label="Line 3962: push_hdr(s)" id="4622 -> 4623"]
4623 -> 4624 [label="Line 0: Function start dummy edge" id="4623 -> 4624"]
4624 -> 4625 [label="Line 3856: fputs(s, stdout);" id="4624 -> 4625"]
4625 -> 4626 [label="Line 3857: offset = offset + 110; default return" id="4625 -> 4626"]
4626 -> 4627 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="4626 -> 4627"]
4627 -> 4628 [label="Line 3963: push_rest(name)" id="4627 -> 4628"]
4628 -> 4629 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4628 -> 4629"]
4629 -> 4630 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="4629 -> 4630"]
4630 -> 4631 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="4630 -> 4631"]
4631 -> 4632 [label="Line 3842: fputs(name, stdout);" id="4631 -> 4632"]
4632 -> 4633 [label="Line 3843: putchar(0);" id="4632 -> 4633"]
4633 -> 4635 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="4633 -> 4635"]
4640 -> 4635 [style="dashed" weight="0" label="covered by"]
4635 -> 4636 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="4635 -> 4636"]
4635 -> 4637 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="4635 -> 4637"]
4637 -> 4638 [label="Line 3848: putchar(0);" id="4637 -> 4638"]
4638 -> 4640 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="4638 -> 4640"]
4636 -> 4641 [label="Line 0: default return" id="4636 -> 4641"]
4641 -> 4642 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="4641 -> 4642"]
4642 -> 4643 [label="Line 3964: return 0;" id="4642 -> 4643"]
4643 -> 4644 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="4643 -> 4644"]
4644 -> 4645 [label="Line 4008: Label: fail" id="4644 -> 4645"]
4645 -> 4648 [label="Line 4009: return rc;" id="4645 -> 4648"]
4648 -> 4650 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="4648 -> 4650"]
4650 -> 4652 [label="Line 4023: return __CPAchecker_TMP_0;" id="4650 -> 4652"]
4652 -> 4654 [label="Line 4415: Return edge from cpio_mksock_line to main" id="4652 -> 4654"]
4654 -> 4656 [label="Line 4415: skip" id="4654 -> 4656"]
4656 -> 5213 [label="Line 4415: [!(rc == 0)]" id="4656 -> 5213"]
4656 -> 5257 [label="Line 4415: [rc == 0]" id="4656 -> 5257"]
5257 -> 5278 [label="Line 4419: break" id="5257 -> 5278"]
5278 -> 5290 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5278 -> 5290"]
5278 -> 5324 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5278 -> 5324"]
5324 -> 5346 [label="Line 0: " id="5324 -> 5346"]
5290 -> 5312 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5290 -> 5312"]
5312 -> 5324 [label="Line 0: " id="5312 -> 5324"]
5213 -> 5234 [label="Line 4416: ec = rc;" id="5213 -> 5234"]
5234 -> 5245 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5234 -> 5245"]
5245 -> 5257 [label="Line 0: " id="5245 -> 5257"]
4616 -> 4619 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="4616 -> 4619"]
4611 -> 4646 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="4611 -> 4646"]
4646 -> 4647 [label="Line 4004: Goto: fail" id="4646 -> 4647"]
4647 -> 4649 [label="Line 4009: return rc;" id="4647 -> 4649"]
4649 -> 4651 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="4649 -> 4651"]
4651 -> 4653 [label="Line 4023: return __CPAchecker_TMP_0;" id="4651 -> 4653"]
4653 -> 4655 [label="Line 4415: Return edge from cpio_mksock_line to main" id="4653 -> 4655"]
4655 -> 5211 [label="Line 4415: skip" id="4655 -> 5211"]
4601 -> 4659 [label="Line 4415: cpio_mkdir_line(args)" id="4601 -> 4659"]
4659 -> 4660 [label="Line 4014: Function start dummy edge int __CPAchecker_TMP_0;" id="4659 -> 4660"]
4660 -> 4661 [label="Line 4014: cpio_mkgeneric_line(line, 0)" id="4660 -> 4661"]
4661 -> 4662 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="4661 -> 4662"]
4662 -> 4663 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="4662 -> 4663"]
4663 -> 4664 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="4663 -> 4664"]
4663 -> 4665 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="4663 -> 4665"]
4665 -> 4666 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="4665 -> 4666"]
4666 -> 4667 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="4666 -> 4667"]
4667 -> 4668 [label="Line 3942: Function start dummy edge char s[256];" id="4667 -> 4668"]
4668 -> 4669 [label="Line 3944: [(name[0]) == '/']" id="4668 -> 4669"]
4668 -> 4672 [label="Line 3944: [!((name[0]) == '/')]" id="4668 -> 4672"]
4672 -> 4673 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="4672 -> 4673"]
4673 -> 4674 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="4673 -> 4674"]
4674 -> 4675 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="4674 -> 4675"]
4675 -> 4676 [label="Line 3962: push_hdr(s)" id="4675 -> 4676"]
4676 -> 4677 [label="Line 0: Function start dummy edge" id="4676 -> 4677"]
4677 -> 4678 [label="Line 3856: fputs(s, stdout);" id="4677 -> 4678"]
4678 -> 4679 [label="Line 3857: offset = offset + 110; default return" id="4678 -> 4679"]
4679 -> 4680 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="4679 -> 4680"]
4680 -> 4681 [label="Line 3963: push_rest(name)" id="4680 -> 4681"]
4681 -> 4682 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4681 -> 4682"]
4682 -> 4683 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="4682 -> 4683"]
4683 -> 4684 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="4683 -> 4684"]
4684 -> 4685 [label="Line 3842: fputs(name, stdout);" id="4684 -> 4685"]
4685 -> 4686 [label="Line 3843: putchar(0);" id="4685 -> 4686"]
4686 -> 4688 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="4686 -> 4688"]
4693 -> 4688 [style="dashed" weight="0" label="covered by"]
4688 -> 4689 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="4688 -> 4689"]
4688 -> 4690 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="4688 -> 4690"]
4690 -> 4691 [label="Line 3848: putchar(0);" id="4690 -> 4691"]
4691 -> 4693 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="4691 -> 4693"]
4689 -> 4694 [label="Line 0: default return" id="4689 -> 4694"]
4694 -> 4695 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="4694 -> 4695"]
4695 -> 4696 [label="Line 3964: return 0;" id="4695 -> 4696"]
4696 -> 4697 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="4696 -> 4697"]
4697 -> 4698 [label="Line 4008: Label: fail" id="4697 -> 4698"]
4698 -> 4701 [label="Line 4009: return rc;" id="4698 -> 4701"]
4701 -> 4703 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="4701 -> 4703"]
4703 -> 4705 [label="Line 4014: return __CPAchecker_TMP_0;" id="4703 -> 4705"]
4705 -> 4707 [label="Line 4415: Return edge from cpio_mkdir_line to main" id="4705 -> 4707"]
4707 -> 4709 [label="Line 4415: skip" id="4707 -> 4709"]
4709 -> 5215 [label="Line 4415: [!(rc == 0)]" id="4709 -> 5215"]
4709 -> 5259 [label="Line 4415: [rc == 0]" id="4709 -> 5259"]
5259 -> 5279 [label="Line 4419: break" id="5259 -> 5279"]
5279 -> 5292 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5279 -> 5292"]
5279 -> 5326 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5279 -> 5326"]
5326 -> 5348 [label="Line 0: " id="5326 -> 5348"]
5292 -> 5313 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5292 -> 5313"]
5313 -> 5326 [label="Line 0: " id="5313 -> 5326"]
5215 -> 5235 [label="Line 4416: ec = rc;" id="5215 -> 5235"]
5235 -> 5246 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5235 -> 5246"]
5246 -> 5259 [label="Line 0: " id="5246 -> 5259"]
4669 -> 4672 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="4669 -> 4672"]
4664 -> 4699 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="4664 -> 4699"]
4699 -> 4700 [label="Line 4004: Goto: fail" id="4699 -> 4700"]
4700 -> 4702 [label="Line 4009: return rc;" id="4700 -> 4702"]
4702 -> 4704 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="4702 -> 4704"]
4704 -> 4706 [label="Line 4014: return __CPAchecker_TMP_0;" id="4704 -> 4706"]
4706 -> 4708 [label="Line 4415: Return edge from cpio_mkdir_line to main" id="4706 -> 4708"]
4708 -> 5211 [label="Line 4415: skip" id="4708 -> 5211"]
4599 -> 4712 [label="Line 4415: cpio_mkslink_line(args)" id="4599 -> 4712"]
4712 -> 4713 [label="Line 3923: Function start dummy edge char name[4097]; char target[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="4712 -> 4713"]
4713 -> 4714 [label="Line 3930: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d', name, target, &mode, &uid, &gid);" id="4713 -> 4714"]
4714 -> 4715 [label="Line 3930: [5 != __CPAchecker_TMP_0]" id="4714 -> 4715"]
4714 -> 4716 [label="Line 3930: [!(5 != __CPAchecker_TMP_0)]" id="4714 -> 4716"]
4716 -> 4717 [label="Line 3934: cpio_mkslink(name, target, mode, uid, gid)" id="4716 -> 4717"]
4717 -> 4718 [label="Line 3893: Function start dummy edge char s[256];" id="4717 -> 4718"]
4718 -> 4719 [label="Line 3895: [(name[0]) == '/']" id="4718 -> 4719"]
4718 -> 4722 [label="Line 3895: [!((name[0]) == '/')]" id="4718 -> 4722"]
4722 -> 4723 [label="Line 3897: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="4722 -> 4723"]
4723 -> 4724 [label="Line 3897: __CPAchecker_TMP_2 = strlen(target);" id="4723 -> 4724"]
4724 -> 4725 [label="Line 3897: size_t __CPAchecker_TMP_3;" id="4724 -> 4725"]
4725 -> 4726 [label="Line 3897: __CPAchecker_TMP_3 = strlen(name);" id="4725 -> 4726"]
4726 -> 4727 [label="Line 3897: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, 40960 | mode, (long)uid, (long)gid, 1, (long)default_mtime, ((unsigned)__CPAchecker_TMP_2) + 1, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_3) + 1, 0);" id="4726 -> 4727"]
4727 -> 4728 [label="Line 3913: push_hdr(s)" id="4727 -> 4728"]
4728 -> 4729 [label="Line 0: Function start dummy edge" id="4728 -> 4729"]
4729 -> 4730 [label="Line 3856: fputs(s, stdout);" id="4729 -> 4730"]
4730 -> 4731 [label="Line 3857: offset = offset + 110; default return" id="4730 -> 4731"]
4731 -> 4732 [label="Line 3913: Return edge from push_hdr to cpio_mkslink" id="4731 -> 4732"]
4732 -> 4733 [label="Line 3914: push_string(name)" id="4732 -> 4733"]
4733 -> 4734 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4733 -> 4734"]
4734 -> 4735 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4734 -> 4735"]
4735 -> 4736 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4735 -> 4736"]
4736 -> 4737 [label="Line 3824: fputs(name, stdout);" id="4736 -> 4737"]
4737 -> 4738 [label="Line 3825: putchar(0);" id="4737 -> 4738"]
4738 -> 4739 [label="Line 3826: offset = offset + name_len; default return" id="4738 -> 4739"]
4739 -> 4740 [label="Line 3914: Return edge from push_string to cpio_mkslink" id="4739 -> 4740"]
4740 -> 4741 [label="Line 3915: push_pad()" id="4740 -> 4741"]
4741 -> 4743 [label="Line 3831: Function start dummy edge while" id="4741 -> 4743"]
4748 -> 4743 [style="dashed" weight="0" label="covered by"]
4743 -> 4744 [label="Line 3831: [(offset & 3) == 0]" id="4743 -> 4744"]
4743 -> 4745 [label="Line 3831: [!((offset & 3) == 0)]" id="4743 -> 4745"]
4745 -> 4746 [label="Line 3832: putchar(0);" id="4745 -> 4746"]
4746 -> 4748 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4746 -> 4748"]
4744 -> 4749 [label="Line 0: default return" id="4744 -> 4749"]
4749 -> 4750 [label="Line 3915: Return edge from push_pad to cpio_mkslink" id="4749 -> 4750"]
4750 -> 4751 [label="Line 3916: push_string(target)" id="4750 -> 4751"]
4751 -> 4752 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4751 -> 4752"]
4752 -> 4753 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4752 -> 4753"]
4753 -> 4754 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4753 -> 4754"]
4754 -> 4755 [label="Line 3824: fputs(name, stdout);" id="4754 -> 4755"]
4755 -> 4756 [label="Line 3825: putchar(0);" id="4755 -> 4756"]
4756 -> 4757 [label="Line 3826: offset = offset + name_len; default return" id="4756 -> 4757"]
4757 -> 4758 [label="Line 3916: Return edge from push_string to cpio_mkslink" id="4757 -> 4758"]
4758 -> 4759 [label="Line 3917: push_pad()" id="4758 -> 4759"]
4759 -> 4761 [label="Line 3831: Function start dummy edge while" id="4759 -> 4761"]
4766 -> 4761 [style="dashed" weight="0" label="covered by"]
4761 -> 4762 [label="Line 3831: [(offset & 3) == 0]" id="4761 -> 4762"]
4761 -> 4763 [label="Line 3831: [!((offset & 3) == 0)]" id="4761 -> 4763"]
4763 -> 4764 [label="Line 3832: putchar(0);" id="4763 -> 4764"]
4764 -> 4766 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4764 -> 4766"]
4762 -> 4767 [label="Line 0: default return" id="4762 -> 4767"]
4767 -> 4768 [label="Line 3917: Return edge from push_pad to cpio_mkslink" id="4767 -> 4768"]
4768 -> 4769 [label="Line 3918: return 0;" id="4768 -> 4769"]
4769 -> 4770 [label="Line 3934: Return edge from cpio_mkslink to cpio_mkslink_line" id="4769 -> 4770"]
4770 -> 4771 [label="Line 3935: Label: fail" id="4770 -> 4771"]
4771 -> 4774 [label="Line 3936: return rc;" id="4771 -> 4774"]
4774 -> 4776 [label="Line 4415: Return edge from cpio_mkslink_line to main" id="4774 -> 4776"]
4776 -> 4778 [label="Line 4415: skip" id="4776 -> 4778"]
4778 -> 5217 [label="Line 4415: [!(rc == 0)]" id="4778 -> 5217"]
4778 -> 5261 [label="Line 4415: [rc == 0]" id="4778 -> 5261"]
5261 -> 5280 [label="Line 4419: break" id="5261 -> 5280"]
5280 -> 5294 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5280 -> 5294"]
5280 -> 5328 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5280 -> 5328"]
5328 -> 5350 [label="Line 0: " id="5328 -> 5350"]
5294 -> 5314 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5294 -> 5314"]
5314 -> 5328 [label="Line 0: " id="5314 -> 5328"]
5217 -> 5236 [label="Line 4416: ec = rc;" id="5217 -> 5236"]
5236 -> 5247 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5236 -> 5247"]
5247 -> 5261 [label="Line 0: " id="5247 -> 5261"]
4719 -> 4722 [label="Line 3896: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="4719 -> 4722"]
4715 -> 4772 [label="Line 3931: fprintf(stderr, 'Unrecognized dir format '%s'', line);" id="4715 -> 4772"]
4772 -> 4773 [label="Line 3932: Goto: fail" id="4772 -> 4773"]
4773 -> 4775 [label="Line 3936: return rc;" id="4773 -> 4775"]
4775 -> 4777 [label="Line 4415: Return edge from cpio_mkslink_line to main" id="4775 -> 4777"]
4777 -> 5211 [label="Line 4415: skip" id="4777 -> 5211"]
4597 -> 4781 [label="Line 4415: cpio_mkfile_line(args)" id="4597 -> 4781"]
4781 -> 4782 [label="Line 4199: Function start dummy edge char name[4097]; char *dname = (void *)0; char location[4097]; unsigned int mode; int uid; int gid; int nlinks = 1; int end = 0; int dname_len = 0; int rc = -1; int __CPAchecker_TMP_0;" id="4781 -> 4782"]
4782 -> 4783 [label="Line 4209: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d %n', name, location, &mode, &uid, &gid, &end);" id="4782 -> 4783"]
4783 -> 4784 [label="Line 4209: [5 > __CPAchecker_TMP_0]" id="4783 -> 4784"]
4783 -> 4785 [label="Line 4209: [!(5 > __CPAchecker_TMP_0)]" id="4783 -> 4785"]
4785 -> 4787 [label="Line 4215: [!(end == 0)]" id="4785 -> 4787"]
4785 -> 4792 [label="Line 4215: [end == 0]" id="4785 -> 4792"]
4792 -> 4810 [label="Line 4244: dname = name; " id="4792 -> 4810"]
4810 -> 4811 [label="Line 4247: char *__CPAchecker_TMP_9;" id="4810 -> 4811"]
4811 -> 4812 [label="Line 4247: cpio_replace_env(location)" id="4811 -> 4812"]
4812 -> 4814 [label="Line 4182: Function start dummy edge char expanded[4097]; char *start; char *end; char *var; while" id="4812 -> 4814"]
4833 -> 4814 [style="dashed" weight="0" label="covered by"]
4814 -> 4815 [label="Line 4185: start = strstr(new_location, '${');" id="4814 -> 4815"]
4815 -> 4817 [label="Line 4185: [!(start == 0)]" id="4815 -> 4817"]
4815 -> 4821 [label="Line 4185: [start == 0]" id="4815 -> 4821"]
4821 -> 4834 [label="Line 4194: return new_location;" id="4821 -> 4834"]
4834 -> 4835 [label="Line 4247: Return edge from cpio_replace_env to cpio_mkfile_line" id="4834 -> 4835"]
4835 -> 4836 [label="Line 4247: cpio_mkfile(dname, __CPAchecker_TMP_9, mode, uid, gid, nlinks)" id="4835 -> 4836"]
4836 -> 4837 [label="Line 4085: Function start dummy edge char s[256]; char *filebuf = (void *)0; struct stat buf; long size; int file = -1; int retval; int rc = -1; int namesize; unsigned int i; mode = mode | 32768;" id="4836 -> 4837"]
4837 -> 4838 [label="Line 4097: file = open(location, 0);" id="4837 -> 4838"]
4838 -> 4839 [label="Line 4099: [file < 0]" id="4838 -> 4839"]
4838 -> 4840 [label="Line 4099: [!(file < 0)]" id="4838 -> 4840"]
4840 -> 4841 [label="Line 4104: retval = fstat(file, &buf);" id="4840 -> 4841"]
4841 -> 4842 [label="Line 4105: [retval == 0]" id="4841 -> 4842"]
4841 -> 4843 [label="Line 4105: [!(retval == 0)]" id="4841 -> 4843"]
4843 -> 4844 [label="Line 4106: fprintf(stderr, 'File %s could not be stat()'ed\n', location);" id="4843 -> 4844"]
4844 -> 4990 [label="Line 4107: Goto: l1" id="4844 -> 4990"]
4990 -> 5000 [label="Line 4170: [!(filebuf == 0)]" id="4990 -> 5000"]
4990 -> 5015 [label="Line 4170: [filebuf == 0]" id="4990 -> 5015"]
5015 -> 5024 [label="Line 4176: [file >= 0]" id="5015 -> 5024"]
5015 -> 5040 [label="Line 4176: [!(file >= 0)]" id="5015 -> 5040"]
5040 -> 5045 [label="Line 4177: return rc;" id="5040 -> 5045"]
5045 -> 5050 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="5045 -> 5050"]
5050 -> 5055 [label="Line 4249: Label: fail" id="5050 -> 5055"]
5055 -> 5068 [label="Line 4251: [!(dname_len == 0)]" id="5055 -> 5068"]
5055 -> 5086 [label="Line 4251: [dname_len == 0]" id="5055 -> 5086"]
5086 -> 5093 [label="Line 4257: return rc;" id="5086 -> 5093"]
5093 -> 5099 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5093 -> 5099"]
5099 -> 5105 [label="Line 4415: skip" id="5099 -> 5105"]
5105 -> 5227 [label="Line 4415: [!(rc == 0)]" id="5105 -> 5227"]
5105 -> 5271 [label="Line 4415: [rc == 0]" id="5105 -> 5271"]
5271 -> 5285 [label="Line 4419: break" id="5271 -> 5285"]
5285 -> 5304 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5285 -> 5304"]
5285 -> 5338 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5285 -> 5338"]
5338 -> 5360 [label="Line 0: " id="5338 -> 5360"]
5304 -> 5319 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5304 -> 5319"]
5319 -> 5338 [label="Line 0: " id="5319 -> 5338"]
5227 -> 5241 [label="Line 4416: ec = rc;" id="5227 -> 5241"]
5241 -> 5252 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5241 -> 5252"]
5252 -> 5271 [label="Line 0: " id="5252 -> 5271"]
5068 -> 5075 [label="Line 4253: free(dname);" id="5068 -> 5075"]
5075 -> 5086 [label="Line 4255: Num = Num + 1; " id="5075 -> 5086"]
5024 -> 5030 [label="Line 4176: close(file);" id="5024 -> 5030"]
5030 -> 5040 [label="Line 0: " id="5030 -> 5040"]
5000 -> 5005 [label="Line 4172: free(filebuf);" id="5000 -> 5005"]
5005 -> 5015 [label="Line 4174: Num = Num + 1; " id="5005 -> 5015"]
4842 -> 4846 [label="Line 4110: filebuf = malloc(buf.st_size);" id="4842 -> 4846"]
4846 -> 4847 [label="Line 4112: [filebuf == 0]" id="4846 -> 4847"]
4846 -> 4848 [label="Line 4112: [!(filebuf == 0)]" id="4846 -> 4848"]
4848 -> 4849 [label="Line 4117: Num = Num - 1;" id="4848 -> 4849"]
4849 -> 4850 [label="Line 4118: [Num >= 0]" id="4849 -> 4850"]
4849 -> 4851 [label="Line 4118: [!(Num >= 0)]" id="4849 -> 4851"]
4850 -> 4852 [label="Line 4118: 0;" id="4850 -> 4852"]
4852 -> 4853 [label="Line 4120: retval = read(file, filebuf, buf.st_size);" id="4852 -> 4853"]
4853 -> 4854 [label="Line 4121: [retval < 0]" id="4853 -> 4854"]
4853 -> 4855 [label="Line 4121: [!(retval < 0)]" id="4853 -> 4855"]
4855 -> 4857 [label="Line 4126: size = 0; for i = 1;" id="4855 -> 4857"]
4857 -> 4858 [label="Line 4127: [i <= nlinks]" id="4857 -> 4858"]
4857 -> 4859 [label="Line 4127: [!(i <= nlinks)]" id="4857 -> 4859"]
4859 -> 4860 [label="Line 4165: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4859 -> 4860"]
4860 -> 4992 [label="Line 4170: [!(filebuf == 0)]" id="4860 -> 4992"]
4860 -> 5007 [label="Line 4170: [filebuf == 0]" id="4860 -> 5007"]
5007 -> 5016 [label="Line 4176: [file >= 0]" id="5007 -> 5016"]
5007 -> 5032 [label="Line 4176: [!(file >= 0)]" id="5007 -> 5032"]
5032 -> 5041 [label="Line 4177: return rc;" id="5032 -> 5041"]
5041 -> 5046 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="5041 -> 5046"]
5046 -> 5051 [label="Line 4249: Label: fail" id="5046 -> 5051"]
5051 -> 5060 [label="Line 4251: [!(dname_len == 0)]" id="5051 -> 5060"]
5051 -> 5078 [label="Line 4251: [dname_len == 0]" id="5051 -> 5078"]
5078 -> 5089 [label="Line 4257: return rc;" id="5078 -> 5089"]
5089 -> 5095 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5089 -> 5095"]
5095 -> 5101 [label="Line 4415: skip" id="5095 -> 5101"]
5101 -> 5219 [label="Line 4415: [!(rc == 0)]" id="5101 -> 5219"]
5101 -> 5263 [label="Line 4415: [rc == 0]" id="5101 -> 5263"]
5263 -> 5281 [label="Line 4419: break" id="5263 -> 5281"]
5281 -> 5296 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5281 -> 5296"]
5281 -> 5330 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5281 -> 5330"]
5330 -> 5352 [label="Line 0: " id="5330 -> 5352"]
5296 -> 5315 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5296 -> 5315"]
5315 -> 5330 [label="Line 0: " id="5315 -> 5330"]
5219 -> 5237 [label="Line 4416: ec = rc;" id="5219 -> 5237"]
5237 -> 5248 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5237 -> 5248"]
5248 -> 5263 [label="Line 0: " id="5248 -> 5263"]
5060 -> 5071 [label="Line 4253: free(dname);" id="5060 -> 5071"]
5071 -> 5078 [label="Line 4255: Num = Num + 1; " id="5071 -> 5078"]
5016 -> 5026 [label="Line 4176: close(file);" id="5016 -> 5026"]
5026 -> 5032 [label="Line 0: " id="5026 -> 5032"]
4992 -> 5001 [label="Line 4172: free(filebuf);" id="4992 -> 5001"]
5001 -> 5007 [label="Line 4174: Num = Num + 1; " id="5001 -> 5007"]
4858 -> 4861 [label="Line 4129: [i == nlinks]" id="4858 -> 4861"]
4858 -> 4864 [label="Line 4129: [!(i == nlinks)]" id="4858 -> 4864"]
4864 -> 4865 [label="Line 4131: [(name[0]) == '/']" id="4864 -> 4865"]
4864 -> 4868 [label="Line 4131: [!((name[0]) == '/')]" id="4864 -> 4868"]
4868 -> 4869 [label="Line 4133: size_t __CPAchecker_TMP_2;" id="4868 -> 4869"]
4869 -> 4870 [label="Line 4133: __CPAchecker_TMP_2 = strlen(name);" id="4869 -> 4870"]
4870 -> 4871 [label="Line 4133: namesize = __CPAchecker_TMP_2 + 1;" id="4870 -> 4871"]
4871 -> 4872 [label="Line 4134: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4871 -> 4872"]
4872 -> 4873 [label="Line 4150: push_hdr(s)" id="4872 -> 4873"]
4873 -> 4874 [label="Line 0: Function start dummy edge" id="4873 -> 4874"]
4874 -> 4875 [label="Line 3856: fputs(s, stdout);" id="4874 -> 4875"]
4875 -> 4876 [label="Line 3857: offset = offset + 110; default return" id="4875 -> 4876"]
4876 -> 4877 [label="Line 4150: Return edge from push_hdr to cpio_mkfile" id="4876 -> 4877"]
4877 -> 4878 [label="Line 4151: push_string(name)" id="4877 -> 4878"]
4878 -> 4879 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4878 -> 4879"]
4879 -> 4880 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4879 -> 4880"]
4880 -> 4881 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4880 -> 4881"]
4881 -> 4882 [label="Line 3824: fputs(name, stdout);" id="4881 -> 4882"]
4882 -> 4883 [label="Line 3825: putchar(0);" id="4882 -> 4883"]
4883 -> 4884 [label="Line 3826: offset = offset + name_len; default return" id="4883 -> 4884"]
4884 -> 4885 [label="Line 4151: Return edge from push_string to cpio_mkfile" id="4884 -> 4885"]
4885 -> 4886 [label="Line 4152: push_pad()" id="4885 -> 4886"]
4886 -> 4888 [label="Line 3831: Function start dummy edge while" id="4886 -> 4888"]
4893 -> 4888 [style="dashed" weight="0" label="covered by"]
4888 -> 4889 [label="Line 3831: [(offset & 3) == 0]" id="4888 -> 4889"]
4888 -> 4890 [label="Line 3831: [!((offset & 3) == 0)]" id="4888 -> 4890"]
4890 -> 4891 [label="Line 3832: putchar(0);" id="4890 -> 4891"]
4891 -> 4893 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4891 -> 4893"]
4889 -> 4894 [label="Line 0: default return" id="4889 -> 4894"]
4894 -> 4895 [label="Line 4152: Return edge from push_pad to cpio_mkfile" id="4894 -> 4895"]
4895 -> 4896 [label="Line 4154: [size == 0]" id="4895 -> 4896"]
4895 -> 4897 [label="Line 4154: [!(size == 0)]" id="4895 -> 4897"]
4897 -> 4898 [label="Line 4155: size_t __CPAchecker_TMP_3;" id="4897 -> 4898"]
4898 -> 4899 [label="Line 4155: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4898 -> 4899"]
4899 -> 4900 [label="Line 4155: [__CPAchecker_TMP_3 != 1]" id="4899 -> 4900"]
4899 -> 4901 [label="Line 4155: [!(__CPAchecker_TMP_3 != 1)]" id="4899 -> 4901"]
4901 -> 4902 [label="Line 4159: offset = offset + size;" id="4901 -> 4902"]
4902 -> 4903 [label="Line 4160: push_pad()" id="4902 -> 4903"]
4903 -> 4905 [label="Line 3831: Function start dummy edge while" id="4903 -> 4905"]
4910 -> 4905 [style="dashed" weight="0" label="covered by"]
4905 -> 4906 [label="Line 3831: [(offset & 3) == 0]" id="4905 -> 4906"]
4905 -> 4907 [label="Line 3831: [!((offset & 3) == 0)]" id="4905 -> 4907"]
4907 -> 4908 [label="Line 3832: putchar(0);" id="4907 -> 4908"]
4908 -> 4910 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4908 -> 4910"]
4906 -> 4911 [label="Line 0: default return" id="4906 -> 4911"]
4911 -> 4912 [label="Line 4160: Return edge from push_pad to cpio_mkfile" id="4911 -> 4912"]
4912 -> 4913 [label="Line 0: " id="4912 -> 4913"]
4913 -> 4977 [label="Line 4127: name = name + namesize;  i = i + 1;" id="4913 -> 4977"]
4900 -> 4914 [label="Line 4156: fprintf(stderr, 'writing filebuf failed\n');" id="4900 -> 4914"]
4914 -> 4915 [label="Line 4157: Goto: l1" id="4914 -> 4915"]
4915 -> 4994 [label="Line 4170: [!(filebuf == 0)]" id="4915 -> 4994"]
4915 -> 5009 [label="Line 4170: [filebuf == 0]" id="4915 -> 5009"]
5009 -> 5018 [label="Line 4176: [file >= 0]" id="5009 -> 5018"]
5009 -> 5034 [label="Line 4176: [!(file >= 0)]" id="5009 -> 5034"]
5034 -> 5042 [label="Line 4177: return rc;" id="5034 -> 5042"]
5042 -> 5047 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="5042 -> 5047"]
5047 -> 5052 [label="Line 4249: Label: fail" id="5047 -> 5052"]
5052 -> 5062 [label="Line 4251: [!(dname_len == 0)]" id="5052 -> 5062"]
5052 -> 5080 [label="Line 4251: [dname_len == 0]" id="5052 -> 5080"]
5080 -> 5090 [label="Line 4257: return rc;" id="5080 -> 5090"]
5090 -> 5096 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5090 -> 5096"]
5096 -> 5102 [label="Line 4415: skip" id="5096 -> 5102"]
5102 -> 5221 [label="Line 4415: [!(rc == 0)]" id="5102 -> 5221"]
5102 -> 5265 [label="Line 4415: [rc == 0]" id="5102 -> 5265"]
5265 -> 5282 [label="Line 4419: break" id="5265 -> 5282"]
5282 -> 5298 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5282 -> 5298"]
5282 -> 5332 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5282 -> 5332"]
5332 -> 5354 [label="Line 0: " id="5332 -> 5354"]
5298 -> 5316 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5298 -> 5316"]
5316 -> 5332 [label="Line 0: " id="5316 -> 5332"]
5221 -> 5238 [label="Line 4416: ec = rc;" id="5221 -> 5238"]
5238 -> 5249 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5238 -> 5249"]
5249 -> 5265 [label="Line 0: " id="5249 -> 5265"]
5062 -> 5072 [label="Line 4253: free(dname);" id="5062 -> 5072"]
5072 -> 5080 [label="Line 4255: Num = Num + 1; " id="5072 -> 5080"]
5018 -> 5027 [label="Line 4176: close(file);" id="5018 -> 5027"]
5027 -> 5034 [label="Line 0: " id="5027 -> 5034"]
4994 -> 5002 [label="Line 4172: free(filebuf);" id="4994 -> 5002"]
5002 -> 5009 [label="Line 4174: Num = Num + 1; " id="5002 -> 5009"]
4896 -> 4917 [label="Line 4127: name = name + namesize;  i = i + 1;" id="4896 -> 4917"]
4977 -> 4917 [style="dashed" weight="0" label="covered by"]
4979 -> 4917 [style="dashed" weight="0" label="covered by"]
4981 -> 4917 [style="dashed" weight="0" label="covered by"]
4917 -> 4918 [label="Line 4127: [i <= nlinks]" id="4917 -> 4918"]
4917 -> 4919 [label="Line 4127: [!(i <= nlinks)]" id="4917 -> 4919"]
4919 -> 4920 [label="Line 4165: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4919 -> 4920"]
4920 -> 4996 [label="Line 4170: [!(filebuf == 0)]" id="4920 -> 4996"]
4920 -> 5011 [label="Line 4170: [filebuf == 0]" id="4920 -> 5011"]
5011 -> 5020 [label="Line 4176: [file >= 0]" id="5011 -> 5020"]
5011 -> 5036 [label="Line 4176: [!(file >= 0)]" id="5011 -> 5036"]
5036 -> 5043 [label="Line 4177: return rc;" id="5036 -> 5043"]
5043 -> 5048 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="5043 -> 5048"]
5048 -> 5053 [label="Line 4249: Label: fail" id="5048 -> 5053"]
5053 -> 5064 [label="Line 4251: [!(dname_len == 0)]" id="5053 -> 5064"]
5053 -> 5082 [label="Line 4251: [dname_len == 0]" id="5053 -> 5082"]
5082 -> 5091 [label="Line 4257: return rc;" id="5082 -> 5091"]
5091 -> 5097 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5091 -> 5097"]
5097 -> 5103 [label="Line 4415: skip" id="5097 -> 5103"]
5103 -> 5223 [label="Line 4415: [!(rc == 0)]" id="5103 -> 5223"]
5103 -> 5267 [label="Line 4415: [rc == 0]" id="5103 -> 5267"]
5267 -> 5283 [label="Line 4419: break" id="5267 -> 5283"]
5283 -> 5300 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5283 -> 5300"]
5283 -> 5334 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5283 -> 5334"]
5334 -> 5356 [label="Line 0: " id="5334 -> 5356"]
5300 -> 5317 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5300 -> 5317"]
5317 -> 5334 [label="Line 0: " id="5317 -> 5334"]
5223 -> 5239 [label="Line 4416: ec = rc;" id="5223 -> 5239"]
5239 -> 5250 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5239 -> 5250"]
5250 -> 5267 [label="Line 0: " id="5250 -> 5267"]
5064 -> 5073 [label="Line 4253: free(dname);" id="5064 -> 5073"]
5073 -> 5082 [label="Line 4255: Num = Num + 1; " id="5073 -> 5082"]
5020 -> 5028 [label="Line 4176: close(file);" id="5020 -> 5028"]
5028 -> 5036 [label="Line 0: " id="5028 -> 5036"]
4996 -> 5003 [label="Line 4172: free(filebuf);" id="4996 -> 5003"]
5003 -> 5011 [label="Line 4174: Num = Num + 1; " id="5003 -> 5011"]
4918 -> 4921 [label="Line 4129: [i == nlinks]" id="4918 -> 4921"]
4918 -> 4924 [label="Line 4129: [!(i == nlinks)]" id="4918 -> 4924"]
4924 -> 4925 [label="Line 4131: [(name[0]) == '/']" id="4924 -> 4925"]
4924 -> 4928 [label="Line 4131: [!((name[0]) == '/')]" id="4924 -> 4928"]
4928 -> 4929 [label="Line 4133: size_t __CPAchecker_TMP_2;" id="4928 -> 4929"]
4929 -> 4930 [label="Line 4133: __CPAchecker_TMP_2 = strlen(name);" id="4929 -> 4930"]
4930 -> 4931 [label="Line 4133: namesize = __CPAchecker_TMP_2 + 1;" id="4930 -> 4931"]
4931 -> 4932 [label="Line 4134: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4931 -> 4932"]
4932 -> 4933 [label="Line 4150: push_hdr(s)" id="4932 -> 4933"]
4933 -> 4934 [label="Line 0: Function start dummy edge" id="4933 -> 4934"]
4934 -> 4935 [label="Line 3856: fputs(s, stdout);" id="4934 -> 4935"]
4935 -> 4936 [label="Line 3857: offset = offset + 110; default return" id="4935 -> 4936"]
4936 -> 4937 [label="Line 4150: Return edge from push_hdr to cpio_mkfile" id="4936 -> 4937"]
4937 -> 4938 [label="Line 4151: push_string(name)" id="4937 -> 4938"]
4938 -> 4939 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4938 -> 4939"]
4939 -> 4940 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4939 -> 4940"]
4940 -> 4941 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4940 -> 4941"]
4941 -> 4942 [label="Line 3824: fputs(name, stdout);" id="4941 -> 4942"]
4942 -> 4943 [label="Line 3825: putchar(0);" id="4942 -> 4943"]
4943 -> 4944 [label="Line 3826: offset = offset + name_len; default return" id="4943 -> 4944"]
4944 -> 4945 [label="Line 4151: Return edge from push_string to cpio_mkfile" id="4944 -> 4945"]
4945 -> 4946 [label="Line 4152: push_pad()" id="4945 -> 4946"]
4946 -> 4948 [label="Line 3831: Function start dummy edge while" id="4946 -> 4948"]
4953 -> 4948 [style="dashed" weight="0" label="covered by"]
4948 -> 4949 [label="Line 3831: [(offset & 3) == 0]" id="4948 -> 4949"]
4948 -> 4950 [label="Line 3831: [!((offset & 3) == 0)]" id="4948 -> 4950"]
4950 -> 4951 [label="Line 3832: putchar(0);" id="4950 -> 4951"]
4951 -> 4953 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4951 -> 4953"]
4949 -> 4954 [label="Line 0: default return" id="4949 -> 4954"]
4954 -> 4955 [label="Line 4152: Return edge from push_pad to cpio_mkfile" id="4954 -> 4955"]
4955 -> 4956 [label="Line 4154: [size == 0]" id="4955 -> 4956"]
4955 -> 4957 [label="Line 4154: [!(size == 0)]" id="4955 -> 4957"]
4957 -> 4958 [label="Line 4155: size_t __CPAchecker_TMP_3;" id="4957 -> 4958"]
4958 -> 4959 [label="Line 4155: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4958 -> 4959"]
4959 -> 4960 [label="Line 4155: [__CPAchecker_TMP_3 != 1]" id="4959 -> 4960"]
4959 -> 4961 [label="Line 4155: [!(__CPAchecker_TMP_3 != 1)]" id="4959 -> 4961"]
4961 -> 4962 [label="Line 4159: offset = offset + size;" id="4961 -> 4962"]
4962 -> 4963 [label="Line 4160: push_pad()" id="4962 -> 4963"]
4963 -> 4965 [label="Line 3831: Function start dummy edge while" id="4963 -> 4965"]
4970 -> 4965 [style="dashed" weight="0" label="covered by"]
4965 -> 4966 [label="Line 3831: [(offset & 3) == 0]" id="4965 -> 4966"]
4965 -> 4967 [label="Line 3831: [!((offset & 3) == 0)]" id="4965 -> 4967"]
4967 -> 4968 [label="Line 3832: putchar(0);" id="4967 -> 4968"]
4968 -> 4970 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4968 -> 4970"]
4966 -> 4971 [label="Line 0: default return" id="4966 -> 4971"]
4971 -> 4972 [label="Line 4160: Return edge from push_pad to cpio_mkfile" id="4971 -> 4972"]
4972 -> 4973 [label="Line 0: " id="4972 -> 4973"]
4973 -> 4981 [label="Line 4127: name = name + namesize;  i = i + 1;" id="4973 -> 4981"]
4960 -> 4974 [label="Line 4156: fprintf(stderr, 'writing filebuf failed\n');" id="4960 -> 4974"]
4974 -> 4975 [label="Line 4157: Goto: l1" id="4974 -> 4975"]
4975 -> 4998 [label="Line 4170: [!(filebuf == 0)]" id="4975 -> 4998"]
4975 -> 5013 [label="Line 4170: [filebuf == 0]" id="4975 -> 5013"]
5013 -> 5022 [label="Line 4176: [file >= 0]" id="5013 -> 5022"]
5013 -> 5038 [label="Line 4176: [!(file >= 0)]" id="5013 -> 5038"]
5038 -> 5044 [label="Line 4177: return rc;" id="5038 -> 5044"]
5044 -> 5049 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="5044 -> 5049"]
5049 -> 5054 [label="Line 4249: Label: fail" id="5049 -> 5054"]
5054 -> 5066 [label="Line 4251: [!(dname_len == 0)]" id="5054 -> 5066"]
5054 -> 5084 [label="Line 4251: [dname_len == 0]" id="5054 -> 5084"]
5084 -> 5092 [label="Line 4257: return rc;" id="5084 -> 5092"]
5092 -> 5098 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5092 -> 5098"]
5098 -> 5104 [label="Line 4415: skip" id="5098 -> 5104"]
5104 -> 5225 [label="Line 4415: [!(rc == 0)]" id="5104 -> 5225"]
5104 -> 5269 [label="Line 4415: [rc == 0]" id="5104 -> 5269"]
5269 -> 5284 [label="Line 4419: break" id="5269 -> 5284"]
5284 -> 5302 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5284 -> 5302"]
5284 -> 5336 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5284 -> 5336"]
5336 -> 5358 [label="Line 0: " id="5336 -> 5358"]
5302 -> 5318 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5302 -> 5318"]
5318 -> 5336 [label="Line 0: " id="5318 -> 5336"]
5225 -> 5240 [label="Line 4416: ec = rc;" id="5225 -> 5240"]
5240 -> 5251 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5240 -> 5251"]
5251 -> 5269 [label="Line 0: " id="5251 -> 5269"]
5066 -> 5074 [label="Line 4253: free(dname);" id="5066 -> 5074"]
5074 -> 5084 [label="Line 4255: Num = Num + 1; " id="5074 -> 5084"]
5022 -> 5029 [label="Line 4176: close(file);" id="5022 -> 5029"]
5029 -> 5038 [label="Line 0: " id="5029 -> 5038"]
4998 -> 5004 [label="Line 4172: free(filebuf);" id="4998 -> 5004"]
5004 -> 5013 [label="Line 4174: Num = Num + 1; " id="5004 -> 5013"]
4956 -> 4979 [label="Line 4127: name = name + namesize;  i = i + 1;" id="4956 -> 4979"]
4925 -> 4928 [label="Line 4132: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4925 -> 4928"]
4921 -> 4924 [label="Line 4129: size = buf.st_size; " id="4921 -> 4924"]
4865 -> 4868 [label="Line 4132: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4865 -> 4868"]
4861 -> 4864 [label="Line 4129: size = buf.st_size; " id="4861 -> 4864"]
4854 -> 4982 [label="Line 4122: fprintf(stderr, 'Can not read %s file\n', location);" id="4854 -> 4982"]
4982 -> 4990 [label="Line 4123: Goto: l1" id="4982 -> 4990"]
4847 -> 4985 [label="Line 4113: fprintf(stderr, 'out of memory\n');" id="4847 -> 4985"]
4985 -> 4990 [label="Line 4114: Goto: l1" id="4985 -> 4990"]
4839 -> 4988 [label="Line 4100: fprintf(stderr, 'File %s could not be opened for reading\n', location);" id="4839 -> 4988"]
4988 -> 4990 [label="Line 4101: Goto: l1" id="4988 -> 4990"]
4817 -> 4818 [label="Line 4185: end = strchr(start + 2, '}');" id="4817 -> 4818"]
4818 -> 4820 [label="Line 4186: [!(end == 0)]" id="4818 -> 4820"]
4818 -> 4821 [label="Line 4186: [end == 0]" id="4818 -> 4821"]
4820 -> 4822 [label="Line 4187: *end = 0; *start = *end;" id="4820 -> 4822"]
4822 -> 4823 [label="Line 4188: var = getenv(start + 2);" id="4822 -> 4823"]
4823 -> 4824 [label="Line 4189: const char *__CPAchecker_TMP_0;" id="4823 -> 4824"]
4824 -> 4825 [label="Line 4190: [var == 0]" id="4824 -> 4825"]
4824 -> 4826 [label="Line 4190: [!(var == 0)]" id="4824 -> 4826"]
4826 -> 4829 [label="Line 4190: __CPAchecker_TMP_0 = var;" id="4826 -> 4829"]
4829 -> 4830 [label="Line 4189: snprintf(expanded, 4097, '%s%s%s', new_location, __CPAchecker_TMP_0, end + 1);" id="4829 -> 4830"]
4830 -> 4831 [label="Line 4191: strcpy(new_location, expanded);" id="4830 -> 4831"]
4831 -> 4833 [label="Line 0: " id="4831 -> 4833"]
4825 -> 4829 [label="Line 4190: __CPAchecker_TMP_0 = '';" id="4825 -> 4829"]
4787 -> 4788 [label="Line 4215: const unsigned short int **__CPAchecker_TMP_1;" id="4787 -> 4788"]
4788 -> 4789 [label="Line 4215: __CPAchecker_TMP_1 = __ctype_b_loc();" id="4788 -> 4789"]
4789 -> 4791 [label="Line 4215: [!((((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0)]" id="4789 -> 4791"]
4789 -> 4792 [label="Line 4215: [(((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0]" id="4789 -> 4792"]
4791 -> 4793 [label="Line 4216: int len; int nend; size_t __CPAchecker_TMP_2;" id="4791 -> 4793"]
4793 -> 4794 [label="Line 4219: __CPAchecker_TMP_2 = strlen(line);" id="4793 -> 4794"]
4794 -> 4795 [label="Line 4219: dname = malloc(__CPAchecker_TMP_2);" id="4794 -> 4795"]
4795 -> 4796 [label="Line 4221: Num = Num - 1;" id="4795 -> 4796"]
4796 -> 4797 [label="Line 4222: [Num >= 0]" id="4796 -> 4797"]
4796 -> 4798 [label="Line 4222: [!(Num >= 0)]" id="4796 -> 4798"]
4797 -> 4799 [label="Line 4222: 0;" id="4797 -> 4799"]
4799 -> 4800 [label="Line 4224: [dname == 0]" id="4799 -> 4800"]
4799 -> 4801 [label="Line 4224: [!(dname == 0)]" id="4799 -> 4801"]
4801 -> 4802 [label="Line 4229: size_t __CPAchecker_TMP_4;" id="4801 -> 4802"]
4802 -> 4803 [label="Line 4229: __CPAchecker_TMP_4 = strlen(name);" id="4802 -> 4803"]
4803 -> 4804 [label="Line 4229: dname_len = __CPAchecker_TMP_4 + 1;" id="4803 -> 4804"]
4804 -> 4805 [label="Line 4230: memcpy(dname, name, dname_len);" id="4804 -> 4805"]
4805 -> 4807 [label="Line 4232: do" id="4805 -> 4807"]
4800 -> 4808 [label="Line 4225: fprintf(stderr, 'out of memory (%d)\n', dname_len);" id="4800 -> 4808"]
4808 -> 5058 [label="Line 4226: Goto: fail" id="4808 -> 5058"]
5058 -> 5070 [label="Line 4251: [!(dname_len == 0)]" id="5058 -> 5070"]
5058 -> 5088 [label="Line 4251: [dname_len == 0]" id="5058 -> 5088"]
5088 -> 5094 [label="Line 4257: return rc;" id="5088 -> 5094"]
5094 -> 5100 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="5094 -> 5100"]
5100 -> 5211 [label="Line 4415: skip" id="5100 -> 5211"]
5070 -> 5076 [label="Line 4253: free(dname);" id="5070 -> 5076"]
5076 -> 5088 [label="Line 4255: Num = Num + 1; " id="5076 -> 5088"]
4784 -> 5056 [label="Line 4212: fprintf(stderr, 'Unrecognized file format '%s'', line);" id="4784 -> 5056"]
5056 -> 5058 [label="Line 4213: Goto: fail" id="5056 -> 5058"]
4595 -> 5108 [label="Line 4415: cpio_mkpipe_line(args)" id="4595 -> 5108"]
5108 -> 5109 [label="Line 4019: Function start dummy edge int __CPAchecker_TMP_0;" id="5108 -> 5109"]
5109 -> 5110 [label="Line 4019: cpio_mkgeneric_line(line, 1)" id="5109 -> 5110"]
5110 -> 5111 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="5110 -> 5111"]
5111 -> 5112 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="5111 -> 5112"]
5112 -> 5113 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="5112 -> 5113"]
5112 -> 5114 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="5112 -> 5114"]
5114 -> 5115 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="5114 -> 5115"]
5115 -> 5116 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="5115 -> 5116"]
5116 -> 5117 [label="Line 3942: Function start dummy edge char s[256];" id="5116 -> 5117"]
5117 -> 5118 [label="Line 3944: [(name[0]) == '/']" id="5117 -> 5118"]
5117 -> 5121 [label="Line 3944: [!((name[0]) == '/')]" id="5117 -> 5121"]
5121 -> 5122 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="5121 -> 5122"]
5122 -> 5123 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="5122 -> 5123"]
5123 -> 5124 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="5123 -> 5124"]
5124 -> 5125 [label="Line 3962: push_hdr(s)" id="5124 -> 5125"]
5125 -> 5126 [label="Line 0: Function start dummy edge" id="5125 -> 5126"]
5126 -> 5127 [label="Line 3856: fputs(s, stdout);" id="5126 -> 5127"]
5127 -> 5128 [label="Line 3857: offset = offset + 110; default return" id="5127 -> 5128"]
5128 -> 5129 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="5128 -> 5129"]
5129 -> 5130 [label="Line 3963: push_rest(name)" id="5129 -> 5130"]
5130 -> 5131 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="5130 -> 5131"]
5131 -> 5132 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="5131 -> 5132"]
5132 -> 5133 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="5132 -> 5133"]
5133 -> 5134 [label="Line 3842: fputs(name, stdout);" id="5133 -> 5134"]
5134 -> 5135 [label="Line 3843: putchar(0);" id="5134 -> 5135"]
5135 -> 5137 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="5135 -> 5137"]
5142 -> 5137 [style="dashed" weight="0" label="covered by"]
5137 -> 5138 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="5137 -> 5138"]
5137 -> 5139 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="5137 -> 5139"]
5139 -> 5140 [label="Line 3848: putchar(0);" id="5139 -> 5140"]
5140 -> 5142 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="5140 -> 5142"]
5138 -> 5143 [label="Line 0: default return" id="5138 -> 5143"]
5143 -> 5144 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="5143 -> 5144"]
5144 -> 5145 [label="Line 3964: return 0;" id="5144 -> 5145"]
5145 -> 5146 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="5145 -> 5146"]
5146 -> 5147 [label="Line 4008: Label: fail" id="5146 -> 5147"]
5147 -> 5150 [label="Line 4009: return rc;" id="5147 -> 5150"]
5150 -> 5152 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="5150 -> 5152"]
5152 -> 5154 [label="Line 4019: return __CPAchecker_TMP_0;" id="5152 -> 5154"]
5154 -> 5156 [label="Line 4415: Return edge from cpio_mkpipe_line to main" id="5154 -> 5156"]
5156 -> 5158 [label="Line 4415: skip" id="5156 -> 5158"]
5158 -> 5229 [label="Line 4415: [!(rc == 0)]" id="5158 -> 5229"]
5158 -> 5273 [label="Line 4415: [rc == 0]" id="5158 -> 5273"]
5273 -> 5286 [label="Line 4419: break" id="5273 -> 5286"]
5286 -> 5306 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5286 -> 5306"]
5286 -> 5340 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5286 -> 5340"]
5340 -> 5362 [label="Line 0: " id="5340 -> 5362"]
5306 -> 5320 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5306 -> 5320"]
5320 -> 5340 [label="Line 0: " id="5320 -> 5340"]
5229 -> 5242 [label="Line 4416: ec = rc;" id="5229 -> 5242"]
5242 -> 5253 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5242 -> 5253"]
5253 -> 5273 [label="Line 0: " id="5253 -> 5273"]
5118 -> 5121 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="5118 -> 5121"]
5113 -> 5148 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="5113 -> 5148"]
5148 -> 5149 [label="Line 4004: Goto: fail" id="5148 -> 5149"]
5149 -> 5151 [label="Line 4009: return rc;" id="5149 -> 5151"]
5151 -> 5153 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="5151 -> 5153"]
5153 -> 5155 [label="Line 4019: return __CPAchecker_TMP_0;" id="5153 -> 5155"]
5155 -> 5157 [label="Line 4415: Return edge from cpio_mkpipe_line to main" id="5155 -> 5157"]
5157 -> 5211 [label="Line 4415: skip" id="5157 -> 5211"]
4593 -> 5161 [label="Line 4415: cpio_mknod_line(args)" id="4593 -> 5161"]
5161 -> 5162 [label="Line 4062: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; char dev_type; unsigned int maj; unsigned int min; int rc = -1; int __CPAchecker_TMP_0;" id="5161 -> 5162"]
5162 -> 5163 [label="Line 4071: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d %c %u %u', name, &mode, &uid, &gid, &dev_type, &maj, &min);" id="5162 -> 5163"]
5163 -> 5164 [label="Line 4071: [7 != __CPAchecker_TMP_0]" id="5163 -> 5164"]
5163 -> 5165 [label="Line 4071: [!(7 != __CPAchecker_TMP_0)]" id="5163 -> 5165"]
5165 -> 5166 [label="Line 4076: cpio_mknod(name, mode, uid, gid, dev_type, maj, min)" id="5165 -> 5166"]
5166 -> 5167 [label="Line 4030: Function start dummy edge char s[256];" id="5166 -> 5167"]
5167 -> 5168 [label="Line 4032: [dev_type == 'b']" id="5167 -> 5168"]
5167 -> 5169 [label="Line 4032: [!(dev_type == 'b')]" id="5167 -> 5169"]
5169 -> 5172 [label="Line 4035: mode = mode | 8192; " id="5169 -> 5172"]
5172 -> 5173 [label="Line 4037: [(name[0]) == '/']" id="5172 -> 5173"]
5172 -> 5176 [label="Line 4037: [!((name[0]) == '/')]" id="5172 -> 5176"]
5176 -> 5177 [label="Line 4039: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="5176 -> 5177"]
5177 -> 5178 [label="Line 4039: __CPAchecker_TMP_2 = strlen(name);" id="5177 -> 5178"]
5178 -> 5179 [label="Line 4039: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 1, (long)default_mtime, 0, 3, 1, maj, min, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="5178 -> 5179"]
5179 -> 5180 [label="Line 4055: push_hdr(s)" id="5179 -> 5180"]
5180 -> 5181 [label="Line 0: Function start dummy edge" id="5180 -> 5181"]
5181 -> 5182 [label="Line 3856: fputs(s, stdout);" id="5181 -> 5182"]
5182 -> 5183 [label="Line 3857: offset = offset + 110; default return" id="5182 -> 5183"]
5183 -> 5184 [label="Line 4055: Return edge from push_hdr to cpio_mknod" id="5183 -> 5184"]
5184 -> 5185 [label="Line 4056: push_rest(name)" id="5184 -> 5185"]
5185 -> 5186 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="5185 -> 5186"]
5186 -> 5187 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="5186 -> 5187"]
5187 -> 5188 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="5187 -> 5188"]
5188 -> 5189 [label="Line 3842: fputs(name, stdout);" id="5188 -> 5189"]
5189 -> 5190 [label="Line 3843: putchar(0);" id="5189 -> 5190"]
5190 -> 5192 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="5190 -> 5192"]
5197 -> 5192 [style="dashed" weight="0" label="covered by"]
5192 -> 5193 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="5192 -> 5193"]
5192 -> 5194 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="5192 -> 5194"]
5194 -> 5195 [label="Line 3848: putchar(0);" id="5194 -> 5195"]
5195 -> 5197 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="5195 -> 5197"]
5193 -> 5198 [label="Line 0: default return" id="5193 -> 5198"]
5198 -> 5199 [label="Line 4056: Return edge from push_rest to cpio_mknod" id="5198 -> 5199"]
5199 -> 5200 [label="Line 4057: return 0;" id="5199 -> 5200"]
5200 -> 5201 [label="Line 4076: Return edge from cpio_mknod to cpio_mknod_line" id="5200 -> 5201"]
5201 -> 5202 [label="Line 4077: Label: fail" id="5201 -> 5202"]
5202 -> 5205 [label="Line 4078: return rc;" id="5202 -> 5205"]
5205 -> 5207 [label="Line 4415: Return edge from cpio_mknod_line to main" id="5205 -> 5207"]
5207 -> 5209 [label="Line 4415: skip" id="5207 -> 5209"]
5209 -> 5231 [label="Line 4415: [!(rc == 0)]" id="5209 -> 5231"]
5209 -> 5275 [label="Line 4415: [rc == 0]" id="5209 -> 5275"]
5275 -> 5287 [label="Line 4419: break" id="5275 -> 5287"]
5287 -> 5308 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5287 -> 5308"]
5287 -> 5342 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5287 -> 5342"]
5342 -> 5364 [label="Line 0: " id="5342 -> 5364"]
5308 -> 5321 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5308 -> 5321"]
5321 -> 5342 [label="Line 0: " id="5321 -> 5342"]
5231 -> 5243 [label="Line 4416: ec = rc;" id="5231 -> 5243"]
5243 -> 5254 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5243 -> 5254"]
5254 -> 5275 [label="Line 0: " id="5254 -> 5275"]
5173 -> 5176 [label="Line 4038: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="5173 -> 5176"]
5168 -> 5172 [label="Line 4033: mode = mode | 24576; " id="5168 -> 5172"]
5164 -> 5203 [label="Line 4073: fprintf(stderr, 'Unrecognized nod format '%s'', line);" id="5164 -> 5203"]
5203 -> 5204 [label="Line 4074: Goto: fail" id="5203 -> 5204"]
5204 -> 5206 [label="Line 4078: return rc;" id="5204 -> 5206"]
5206 -> 5208 [label="Line 4415: Return edge from cpio_mknod_line to main" id="5206 -> 5208"]
5208 -> 5211 [label="Line 4415: skip" id="5208 -> 5211"]
4578 -> 4580 [label="Line 4406: fprintf(stderr, 'ERROR: incorrect format, newline required line %d: '%s'\n', line_nr, line);" id="4578 -> 4580"]
4580 -> 4582 [label="Line 4409: ec = -1; " id="4580 -> 4582"]
4575 -> 5368 [label="Line 4402: continue" id="4575 -> 5368"]
4571 -> 5370 [label="Line 4397: continue" id="4571 -> 5370"]
4569 -> 5371 [label="Line 4388: fprintf(stderr, 'ERROR: incorrect format, could not locate file type line %d: '%s'\n', line_nr, line);" id="4569 -> 5371"]
5371 -> 5372 [label="Line 4391: ec = -1; break" id="5371 -> 5372"]
5372 -> 5373 [label="Line 4428: [ec == 0]" id="5372 -> 5373"]
5372 -> 5374 [label="Line 4428: [!(ec == 0)]" id="5372 -> 5374"]
5373 -> 5375 [label="Line 4429: cpio_trailer()" id="5373 -> 5375"]
5375 -> 5376 [label="Line 3862: Function start dummy edge char s[256]; const char name[] = 'TRAILER!!!'; size_t __CPAchecker_TMP_0;" id="5375 -> 5376"]
5376 -> 5377 [label="Line 3865: __CPAchecker_TMP_0 = strlen(name);" id="5376 -> 5377"]
5377 -> 5378 [label="Line 3865: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', 0, 0, 0L, 0L, 1, 0L, 0, 0, 0, 0, 0, ((unsigned)__CPAchecker_TMP_0) + 1, 0);" id="5377 -> 5378"]
5378 -> 5379 [label="Line 3881: push_hdr(s)" id="5378 -> 5379"]
5379 -> 5380 [label="Line 0: Function start dummy edge" id="5379 -> 5380"]
5380 -> 5381 [label="Line 3856: fputs(s, stdout);" id="5380 -> 5381"]
5381 -> 5382 [label="Line 3857: offset = offset + 110; default return" id="5381 -> 5382"]
5382 -> 5383 [label="Line 3881: Return edge from push_hdr to cpio_trailer" id="5382 -> 5383"]
5383 -> 5384 [label="Line 3882: push_rest(name)" id="5383 -> 5384"]
5384 -> 5385 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="5384 -> 5385"]
5385 -> 5386 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="5385 -> 5386"]
5386 -> 5387 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="5386 -> 5387"]
5387 -> 5388 [label="Line 3842: fputs(name, stdout);" id="5387 -> 5388"]
5388 -> 5389 [label="Line 3843: putchar(0);" id="5388 -> 5389"]
5389 -> 5391 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="5389 -> 5391"]
4566 -> 5393 [label="Line 4384: continue" id="4566 -> 5393"]
4546 -> 4549 [label="Line 4370: int *__CPAchecker_TMP_2;" id="4546 -> 4549"]
4549 -> 4550 [label="Line 4370: __CPAchecker_TMP_2 = __errno_location();" id="4549 -> 4550"]
4550 -> 4551 [label="Line 4370: char *__CPAchecker_TMP_3;" id="4550 -> 4551"]
4551 -> 4552 [label="Line 4370: __CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);" id="4551 -> 4552"]
4552 -> 4553 [label="Line 4370: fprintf(stderr, 'ERROR: unable to open '%s': %s\n\n', filename, __CPAchecker_TMP_3);" id="4552 -> 4553"]
4553 -> 4554 [label="Line 4372: usage(argv[0])" id="4553 -> 4554"]
4554 -> 4555 [label="Line 0: Function start dummy edge" id="4554 -> 4555"]
4555 -> 4556 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="4555 -> 4556"]
4556 -> 4557 [label="Line 0: default return" id="4556 -> 4557"]
4557 -> 4558 [label="Line 4372: Return edge from usage to main" id="4557 -> 4558"]
4543 -> 4560 [label="Line 4368: cpio_list = stdin; " id="4543 -> 4560"]
4534 -> 4536 [label="Line 4363: usage(argv[0])" id="4534 -> 4536"]
4536 -> 4537 [label="Line 0: Function start dummy edge" id="4536 -> 4537"]
4537 -> 4538 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="4537 -> 4538"]
4538 -> 4539 [label="Line 0: default return" id="4538 -> 4539"]
4539 -> 4540 [label="Line 4363: Return edge from usage to main" id="4539 -> 4540"]
}
