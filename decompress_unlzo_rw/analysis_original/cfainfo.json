{"nodes":{"128":{"no":128,"func":"main"},"0":{"no":0,"func":"parse_header"},"129":{"no":129,"func":"main"},"1":{"no":1,"func":"parse_header"},"130":{"no":130,"func":"main"},"131":{"no":131,"func":"main"},"133":{"no":133,"func":"main"},"134":{"no":134,"func":"main"},"135":{"no":135,"func":"main"},"7":{"no":7,"func":"parse_header"},"136":{"no":136,"func":"main"},"8":{"no":8,"func":"parse_header"},"9":{"no":9,"func":"parse_header"},"138":{"no":138,"func":"main"},"139":{"no":139,"func":"main"},"140":{"no":140,"func":"main"},"12":{"no":12,"func":"parse_header"},"141":{"no":141,"func":"main"},"14":{"no":14,"func":"parse_header"},"143":{"no":143,"func":"main"},"15":{"no":15,"func":"parse_header"},"16":{"no":16,"func":"parse_header"},"17":{"no":17,"func":"parse_header"},"19":{"no":19,"func":"parse_header"},"21":{"no":21,"func":"parse_header"},"22":{"no":22,"func":"parse_header"},"23":{"no":23,"func":"parse_header"},"24":{"no":24,"func":"parse_header"},"28":{"no":28,"func":"parse_header"},"29":{"no":29,"func":"parse_header"},"30":{"no":30,"func":"parse_header"},"31":{"no":31,"func":"parse_header"},"32":{"no":32,"func":"parse_header"},"35":{"no":35,"func":"parse_header"},"36":{"no":36,"func":"parse_header"},"38":{"no":38,"func":"parse_header"},"39":{"no":39,"func":"parse_header"},"40":{"no":40,"func":"parse_header"},"44":{"no":44,"func":"parse_header"},"45":{"no":45,"func":"parse_header"},"46":{"no":46,"func":"parse_header"},"51":{"no":51,"func":"main"},"52":{"no":52,"func":"main"},"62":{"no":62,"func":"main"},"63":{"no":63,"func":"main"},"64":{"no":64,"func":"main"},"65":{"no":65,"func":"main"},"66":{"no":66,"func":"main"},"67":{"no":67,"func":"main"},"68":{"no":68,"func":"main"},"69":{"no":69,"func":"main"},"70":{"no":70,"func":"main"},"71":{"no":71,"func":"main"},"74":{"no":74,"func":"main"},"75":{"no":75,"func":"main"},"78":{"no":78,"func":"main"},"79":{"no":79,"func":"main"},"80":{"no":80,"func":"main"},"82":{"no":82,"func":"main"},"83":{"no":83,"func":"main"},"84":{"no":84,"func":"main"},"85":{"no":85,"func":"main"},"87":{"no":87,"func":"main"},"88":{"no":88,"func":"main"},"89":{"no":89,"func":"main"},"90":{"no":90,"func":"main"},"91":{"no":91,"func":"main"},"94":{"no":94,"func":"main"},"95":{"no":95,"func":"main"},"96":{"no":96,"func":"main"},"98":{"no":98,"func":"main"},"99":{"no":99,"func":"main"},"100":{"no":100,"func":"main"},"101":{"no":101,"func":"main"},"103":{"no":103,"func":"main"},"104":{"no":104,"func":"main"},"105":{"no":105,"func":"main"},"106":{"no":106,"func":"main"},"108":{"no":108,"func":"main"},"109":{"no":109,"func":"main"},"110":{"no":110,"func":"main"},"111":{"no":111,"func":"main"},"114":{"no":114,"func":"main"},"115":{"no":115,"func":"main"},"118":{"no":118,"func":"main"},"119":{"no":119,"func":"main"},"120":{"no":120,"func":"main"},"122":{"no":122,"func":"main"},"123":{"no":123,"func":"main"},"124":{"no":124,"func":"main"},"125":{"no":125,"func":"main"},"127":{"no":127,"func":"main"}},"edges":{"82->84":{"file":"nf\/decompress_unlzo_rw.c","line":2159,"source":82,"type":"AssumeEdge","stmt":"[in_buf == 0]","target":84},"82->83":{"file":"nf\/decompress_unlzo_rw.c","line":2159,"source":82,"type":"AssumeEdge","stmt":"[!(in_buf == 0)]","target":83},"130->131":{"file":"nf\/decompress_unlzo_rw.c","line":2205,"source":130,"type":"StatementEdge","stmt":"free(in_buf);","target":131},"7->9":{"file":"nf\/decompress_unlzo_rw.c","line":2087,"source":7,"type":"AssumeEdge","stmt":"[in_len < 33]","target":9},"7->8":{"file":"nf\/decompress_unlzo_rw.c","line":2087,"source":7,"type":"AssumeEdge","stmt":"[!(in_len < 33)]","target":8},"52->62":{"file":"<multiple files>","line":0,"source":52,"type":"MultiEdge","stmt":"INIT GLOBAL VARS void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 { int __val[2]; }; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 { unsigned int __wch; char __wchb[4]; }; struct __anon_type_2 { int __count; union __anon_type_1 __value; }; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 { __off_t __pos; __mbstate_t __state; }; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 { __off64_t __pos; __mbstate_t __state; }; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t; typedef void _IO_lock_t; struct _IO_marker { struct _IO_marker *_next; struct _IO_FILE *_sbuf; int _pos; }; enum __codecvt_result { __codecvt_ok = 0, __codecvt_partial = 1, __codecvt_error = 2, __codecvt_noconv = 3 }; struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40UL]; }; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t ); size_t _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 { int quot; int rem; }; typedef struct __anon_type_5 div_t; struct __anon_type_6 { long int quot; long int rem; }; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 { long long int quot; long long int rem; }; typedef struct __anon_type_7 lldiv_t; size_t __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 { unsigned long int __val[32UL]; }; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec { __time_t tv_sec; long int tv_nsec; }; struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 { __fd_mask __fds_bits[32]; }; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 { char __size[56]; long int __align; }; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list { struct __pthread_internal_list *__prev; struct __pthread_internal_list *__next; }; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s { int __lock; unsigned int __count; int __owner; unsigned int __nusers; int __kind; int __spins; __pthread_list_t __list; }; union __anon_type_11 { struct __pthread_mutex_s __data; char __size[40]; long int __align; }; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 { char __size[4]; int __align; }; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 { int __lock; unsigned int __futex; unsigned long long int __total_seq; unsigned long long int __wakeup_seq; unsigned long long int __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq; }; union __anon_type_14 { struct __anon_type_13 __data; char __size[48]; long long int __align; }; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 { char __size[4]; int __align; }; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 { int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long int __pad1; unsigned long int __pad2; unsigned int __flags; }; union __anon_type_17 { struct __anon_type_16 __data; char __size[56]; long int __align; }; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 { char __size[8]; long int __align; }; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 { char __size[32]; long int __align; }; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 { char __size[4]; int __align; }; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data { int32_t *fptr; int32_t *rptr; int32_t *state; int rand_type; int rand_deg; int rand_sep; int32_t *end_ptr; }; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data { unsigned short int __x[3]; unsigned short int __old_x[3]; unsigned short int __c; unsigned short int __init; unsigned long long int __a; }; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t div(int __numer, int __denom); ldiv_t ldiv(long int __numer, long int __denom); lldiv_t lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct { struct locale_data *__locales[13]; const unsigned short int *__ctype_b; const int *__ctype_tolower; const int *__ctype_toupper; const char *__names[13]; }; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t strcspn(const char *__s, const char *__reject); size_t strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t strlen(const char *__s); size_t strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); const unsigned char lzop_magic[] = { 137, 76, 90, 79, 0, 13, 10, 26, 10 }; int get_unaligned_be16(int *p); int get_unaligned_be32(int *p); void unlikely(int); void lzo1x_worst_compress(); void lzo1x_decompress_safe(int *in_buf, int, int, void *); int LZO_E_OK = 0; int Num = 2; int parse_header(int *input, long *skip, long in_len); int main(int *input, long in_len, long int (*fill)(void *, unsigned long), long int (*flush)(void *, unsigned long), int *output, long *posp, void (*error)(char *x)); Function start dummy edge int r = 0; long skip = 0; int src_len; int dst_len; int tmp; int *in_buf; int *in_buf_save; int *out_buf; int ret = -1;","target":62},"108->111":{"file":"nf\/decompress_unlzo_rw.c","line":2187,"source":108,"type":"StatementEdge","stmt":"error(\\\"Both input pointer and fill function provided, don't know what to do\\\");","target":111},"62->64":{"file":"nf\/decompress_unlzo_rw.c","line":2144,"source":62,"type":"AssumeEdge","stmt":"[!(output == 0)]","target":64},"128->130":{"file":"nf\/decompress_unlzo_rw.c","line":2201,"source":128,"type":"StatementEdge","stmt":"0;","target":130},"106->109":{"file":"nf\/decompress_unlzo_rw.c","line":2186,"source":106,"type":"AssumeEdge","stmt":"[input == 0]","target":109},"101->143":{"file":"nf\/decompress_unlzo_rw.c","line":2179,"source":101,"type":"BlankEdge","stmt":"Goto: exit","target":143},"109->115":{"file":"nf\/decompress_unlzo_rw.c","line":2189,"source":109,"type":"AssumeEdge","stmt":"[input == 0]","target":115},"109->114":{"file":"nf\/decompress_unlzo_rw.c","line":2189,"source":109,"type":"AssumeEdge","stmt":"[!(input == 0)]","target":114},"62->65":{"file":"nf\/decompress_unlzo_rw.c","line":2144,"source":62,"type":"AssumeEdge","stmt":"[output == 0]","target":65},"70->68":{"file":"nf\/decompress_unlzo_rw.c","line":2149,"source":70,"type":"AssumeEdge","stmt":"[!(fill == 0)]","target":68},"70->69":{"file":"nf\/decompress_unlzo_rw.c","line":2149,"source":70,"type":"AssumeEdge","stmt":"[fill == 0]","target":69},"131->63":{"file":"nf\/decompress_unlzo_rw.c","line":2206,"source":131,"type":"MultiEdge","stmt":"Num = Num + 1; ","target":63},"94->96":{"file":"nf\/decompress_unlzo_rw.c","line":2173,"source":94,"type":"StatementEdge","stmt":"error(\\\"NULL output pointer and no flush function provided\\\");","target":96},"40->39":{"file":"nf\/decompress_unlzo_rw.c","line":2119,"source":40,"type":"MultiEdge","stmt":"parse = parse + 4; ","target":39},"106->110":{"file":"nf\/decompress_unlzo_rw.c","line":2186,"source":106,"type":"AssumeEdge","stmt":"[!(input == 0)]","target":110},"129->130":{"file":"nf\/decompress_unlzo_rw.c","line":2201,"source":129,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >=0\\\", \\\"nf\/decompress_unlzo_rw.c\\\", 200, \\\"__PRETTY_FUNCTION__\\\");","target":130},"46->0":{"file":"nf\/decompress_unlzo_rw.c","line":2124,"source":46,"type":"ReturnStatementEdge","stmt":"return 0;","target":0},"67->63":{"file":"<none>","line":0,"source":67,"type":"BlankEdge","stmt":"","target":63},"88->90":{"file":"nf\/decompress_unlzo_rw.c","line":2164,"source":88,"type":"StatementEdge","stmt":"0;","target":90},"110->108":{"file":"nf\/decompress_unlzo_rw.c","line":2186,"source":110,"type":"AssumeEdge","stmt":"[!(fill == 0)]","target":108},"110->109":{"file":"nf\/decompress_unlzo_rw.c","line":2186,"source":110,"type":"AssumeEdge","stmt":"[fill == 0]","target":109},"105->106":{"file":"nf\/decompress_unlzo_rw.c","line":2184,"source":105,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >=0\\\", \\\"nf\/decompress_unlzo_rw.c\\\", 183, \\\"__PRETTY_FUNCTION__\\\");","target":106},"66->70":{"file":"nf\/decompress_unlzo_rw.c","line":2149,"source":66,"type":"AssumeEdge","stmt":"[!(input == 0)]","target":70},"35->38":{"file":"nf\/decompress_unlzo_rw.c","line":2117,"source":35,"type":"StatementEdge","stmt":"parse = parse + 8;","target":38},"74->67":{"file":"nf\/decompress_unlzo_rw.c","line":2153,"source":74,"type":"MultiEdge","stmt":"in_buf = input; ","target":67},"12->15":{"file":"nf\/decompress_unlzo_rw.c","line":2091,"source":12,"type":"AssumeEdge","stmt":"[!(l < 9)]","target":15},"91->67":{"file":"nf\/decompress_unlzo_rw.c","line":2169,"source":91,"type":"MultiEdge","stmt":"Num = Num + 1; ","target":67},"104->106":{"file":"nf\/decompress_unlzo_rw.c","line":2184,"source":104,"type":"StatementEdge","stmt":"0;","target":106},"12->14":{"file":"nf\/decompress_unlzo_rw.c","line":2091,"source":12,"type":"AssumeEdge","stmt":"[l < 9]","target":14},"125->138":{"file":"nf\/decompress_unlzo_rw.c","line":2198,"source":125,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"15->21":{"file":"nf\/decompress_unlzo_rw.c","line":2098,"source":15,"type":"StatementEdge","stmt":"version = get_unaligned_be16(parse);","target":21},"141->139":{"file":"<none>","line":0,"source":141,"type":"BlankEdge","stmt":"","target":139},"32->29":{"file":"nf\/decompress_unlzo_rw.c","line":2102,"source":32,"type":"AssumeEdge","stmt":"[!((__CPAchecker_TMP_2 & 2048L) == 0)]","target":29},"85->138":{"file":"nf\/decompress_unlzo_rw.c","line":2161,"source":85,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"63->133":{"file":"nf\/decompress_unlzo_rw.c","line":2211,"source":63,"type":"BlankEdge","stmt":"Label: exit_2","target":133},"30->28":{"file":"nf\/decompress_unlzo_rw.c","line":2105,"source":30,"type":"MultiEdge","stmt":"parse = parse + 4; ","target":28},"87->89":{"file":"nf\/decompress_unlzo_rw.c","line":2164,"source":87,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":89},"87->88":{"file":"nf\/decompress_unlzo_rw.c","line":2164,"source":87,"type":"AssumeEdge","stmt":"[Num >= 0]","target":88},"123->127":{"file":"nf\/decompress_unlzo_rw.c","line":2200,"source":123,"type":"StatementEdge","stmt":"Num = Num - 1;","target":127},"68->71":{"file":"nf\/decompress_unlzo_rw.c","line":2150,"source":68,"type":"StatementEdge","stmt":"error(\\\"Both input pointer and fill function provided, don't know what to do\\\");","target":71},"79->82":{"file":"nf\/decompress_unlzo_rw.c","line":2158,"source":79,"type":"StatementEdge","stmt":"in_buf = malloc(0);","target":82},"98->99":{"file":"nf\/decompress_unlzo_rw.c","line":2177,"source":98,"type":"AssumeEdge","stmt":"[!(out_buf == 0)]","target":99},"119->122":{"file":"nf\/decompress_unlzo_rw.c","line":2195,"source":119,"type":"StatementEdge","stmt":"in_buf = malloc(0);","target":122},"28->35":{"file":"nf\/decompress_unlzo_rw.c","line":2113,"source":28,"type":"AssumeEdge","stmt":"[!((end - parse) < 13)]","target":35},"28->36":{"file":"nf\/decompress_unlzo_rw.c","line":2113,"source":28,"type":"AssumeEdge","stmt":"[(end - parse) < 13]","target":36},"39->44":{"file":"nf\/decompress_unlzo_rw.c","line":2121,"source":39,"type":"MultiEdge","stmt":"int *__CPAchecker_TMP_3 = parse; parse = parse + 1; l = *__CPAchecker_TMP_3;","target":44},"19->16":{"file":"nf\/decompress_unlzo_rw.c","line":2092,"source":19,"type":"AssumeEdge","stmt":"[!((*__CPAchecker_TMP_0) != (lzop_magic[l]))]","target":16},"19->17":{"file":"nf\/decompress_unlzo_rw.c","line":2092,"source":19,"type":"AssumeEdge","stmt":"[(*__CPAchecker_TMP_0) != (lzop_magic[l])]","target":17},"21->22":{"file":"nf\/decompress_unlzo_rw.c","line":2099,"source":21,"type":"StatementEdge","stmt":"parse = parse + 7;","target":22},"138->139":{"file":"nf\/decompress_unlzo_rw.c","line":2216,"source":138,"type":"AssumeEdge","stmt":"[!(output == 0)]","target":139},"135->136":{"file":"nf\/decompress_unlzo_rw.c","line":2213,"source":135,"type":"StatementEdge","stmt":"free(in_buf_save);","target":136},"32->30":{"file":"nf\/decompress_unlzo_rw.c","line":2102,"source":32,"type":"AssumeEdge","stmt":"[(__CPAchecker_TMP_2 & 2048L) == 0]","target":30},"17->0":{"file":"nf\/decompress_unlzo_rw.c","line":2093,"source":17,"type":"ReturnStatementEdge","stmt":"return 0;","target":0},"98->100":{"file":"nf\/decompress_unlzo_rw.c","line":2177,"source":98,"type":"AssumeEdge","stmt":"[out_buf == 0]","target":100},"45->0":{"file":"nf\/decompress_unlzo_rw.c","line":2125,"source":45,"type":"MultiEdge","stmt":"parse = parse + (l + 4); *skip = parse - input; return 1;","target":0},"140->141":{"file":"nf\/decompress_unlzo_rw.c","line":2217,"source":140,"type":"StatementEdge","stmt":"free(out_buf);","target":141},"38->39":{"file":"nf\/decompress_unlzo_rw.c","line":2118,"source":38,"type":"AssumeEdge","stmt":"[!(version >= 2368)]","target":39},"100->101":{"file":"nf\/decompress_unlzo_rw.c","line":2178,"source":100,"type":"StatementEdge","stmt":"error(\\\"Could not allocate output buffer\\\");","target":101},"118->120":{"file":"nf\/decompress_unlzo_rw.c","line":2192,"source":118,"type":"StatementEdge","stmt":"error(\\\"NULL input pointer and missing fill function\\\");","target":120},"83->87":{"file":"nf\/decompress_unlzo_rw.c","line":2163,"source":83,"type":"StatementEdge","stmt":"Num = Num - 1;","target":87},"136->134":{"file":"<none>","line":0,"source":136,"type":"BlankEdge","stmt":"","target":134},"138->140":{"file":"nf\/decompress_unlzo_rw.c","line":2216,"source":138,"type":"AssumeEdge","stmt":"[output == 0]","target":140},"16->12":{"file":"nf\/decompress_unlzo_rw.c","line":2091,"source":16,"type":"MultiEdge","stmt":" l = l + 1;","target":12},"99->103":{"file":"nf\/decompress_unlzo_rw.c","line":2183,"source":99,"type":"StatementEdge","stmt":"Num = Num - 1;","target":103},"120->138":{"file":"nf\/decompress_unlzo_rw.c","line":2193,"source":120,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"23->31":{"file":"nf\/decompress_unlzo_rw.c","line":2102,"source":23,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_2;","target":31},"122->123":{"file":"nf\/decompress_unlzo_rw.c","line":2196,"source":122,"type":"AssumeEdge","stmt":"[!(in_buf == 0)]","target":123},"122->124":{"file":"nf\/decompress_unlzo_rw.c","line":2196,"source":122,"type":"AssumeEdge","stmt":"[in_buf == 0]","target":124},"24->23":{"file":"nf\/decompress_unlzo_rw.c","line":2101,"source":24,"type":"MultiEdge","stmt":"int *__CPAchecker_TMP_1 = parse; parse = parse + 1; level = *__CPAchecker_TMP_1; ","target":23},"14->19":{"file":"nf\/decompress_unlzo_rw.c","line":2092,"source":14,"type":"MultiEdge","stmt":"int *__CPAchecker_TMP_0 = parse; parse = parse + 1;","target":19},"134->138":{"file":"nf\/decompress_unlzo_rw.c","line":2214,"source":134,"type":"MultiEdge","stmt":"Num = Num + 1; Label: exit_1","target":138},"36->0":{"file":"nf\/decompress_unlzo_rw.c","line":2114,"source":36,"type":"ReturnStatementEdge","stmt":"return 0;","target":0},"66->69":{"file":"nf\/decompress_unlzo_rw.c","line":2149,"source":66,"type":"AssumeEdge","stmt":"[input == 0]","target":69},"71->138":{"file":"nf\/decompress_unlzo_rw.c","line":2151,"source":71,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"89->90":{"file":"nf\/decompress_unlzo_rw.c","line":2164,"source":89,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >=0\\\", \\\"nf\/decompress_unlzo_rw.c\\\", 163, \\\"__PRETTY_FUNCTION__\\\");","target":90},"1->7":{"file":"nf\/decompress_unlzo_rw.c","line":2076,"source":1,"type":"MultiEdge","stmt":"Function start dummy edge int l; int *parse = input; int *end = input + in_len; int level = 0; int version;","target":7},"133->135":{"file":"nf\/decompress_unlzo_rw.c","line":2212,"source":133,"type":"AssumeEdge","stmt":"[input == 0]","target":135},"133->134":{"file":"nf\/decompress_unlzo_rw.c","line":2212,"source":133,"type":"AssumeEdge","stmt":"[!(input == 0)]","target":134},"111->138":{"file":"nf\/decompress_unlzo_rw.c","line":2188,"source":111,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"143->51":{"file":"nf\/decompress_unlzo_rw.c","line":2220,"source":143,"type":"ReturnStatementEdge","stmt":"return ret;","target":51},"69->75":{"file":"nf\/decompress_unlzo_rw.c","line":2152,"source":69,"type":"AssumeEdge","stmt":"[input == 0]","target":75},"69->74":{"file":"nf\/decompress_unlzo_rw.c","line":2152,"source":69,"type":"AssumeEdge","stmt":"[!(input == 0)]","target":74},"78->80":{"file":"nf\/decompress_unlzo_rw.c","line":2155,"source":78,"type":"StatementEdge","stmt":"error(\\\"NULL input pointer and missing fill function\\\");","target":80},"80->138":{"file":"nf\/decompress_unlzo_rw.c","line":2156,"source":80,"type":"BlankEdge","stmt":"Goto: exit_1","target":138},"103->104":{"file":"nf\/decompress_unlzo_rw.c","line":2184,"source":103,"type":"AssumeEdge","stmt":"[Num >= 0]","target":104},"103->105":{"file":"nf\/decompress_unlzo_rw.c","line":2184,"source":103,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":105},"22->23":{"file":"nf\/decompress_unlzo_rw.c","line":2100,"source":22,"type":"AssumeEdge","stmt":"[!(version >= 2368)]","target":23},"22->24":{"file":"nf\/decompress_unlzo_rw.c","line":2100,"source":22,"type":"AssumeEdge","stmt":"[version >= 2368]","target":24},"44->45":{"file":"nf\/decompress_unlzo_rw.c","line":2123,"source":44,"type":"AssumeEdge","stmt":"[!((end - parse) < (l + 4))]","target":45},"9->0":{"file":"nf\/decompress_unlzo_rw.c","line":2088,"source":9,"type":"ReturnStatementEdge","stmt":"return 0;","target":0},"96->143":{"file":"nf\/decompress_unlzo_rw.c","line":2174,"source":96,"type":"BlankEdge","stmt":"Goto: exit","target":143},"44->46":{"file":"nf\/decompress_unlzo_rw.c","line":2123,"source":44,"type":"AssumeEdge","stmt":"[(end - parse) < (l + 4)]","target":46},"90->91":{"file":"nf\/decompress_unlzo_rw.c","line":2168,"source":90,"type":"StatementEdge","stmt":"free(in_buf);","target":91},"115->118":{"file":"nf\/decompress_unlzo_rw.c","line":2191,"source":115,"type":"AssumeEdge","stmt":"[fill == 0]","target":118},"8->12":{"file":"nf\/decompress_unlzo_rw.c","line":2091,"source":8,"type":"MultiEdge","stmt":"for l = 0;","target":12},"115->119":{"file":"nf\/decompress_unlzo_rw.c","line":2191,"source":115,"type":"AssumeEdge","stmt":"[!(fill == 0)]","target":119},"31->32":{"file":"nf\/decompress_unlzo_rw.c","line":2102,"source":31,"type":"StatementEdge","stmt":"__CPAchecker_TMP_2 = get_unaligned_be32(parse);","target":32},"114->63":{"file":"nf\/decompress_unlzo_rw.c","line":2190,"source":114,"type":"MultiEdge","stmt":"in_buf = input; ","target":63},"38->40":{"file":"nf\/decompress_unlzo_rw.c","line":2118,"source":38,"type":"AssumeEdge","stmt":"[version >= 2368]","target":40},"95->98":{"file":"nf\/decompress_unlzo_rw.c","line":2176,"source":95,"type":"StatementEdge","stmt":"out_buf = malloc(262144L);","target":98},"65->95":{"file":"nf\/decompress_unlzo_rw.c","line":2172,"source":65,"type":"AssumeEdge","stmt":"[!(flush == 0)]","target":95},"75->78":{"file":"nf\/decompress_unlzo_rw.c","line":2154,"source":75,"type":"AssumeEdge","stmt":"[fill == 0]","target":78},"75->79":{"file":"nf\/decompress_unlzo_rw.c","line":2154,"source":75,"type":"AssumeEdge","stmt":"[!(fill == 0)]","target":79},"84->85":{"file":"nf\/decompress_unlzo_rw.c","line":2160,"source":84,"type":"StatementEdge","stmt":"error(\\\"Could not allocate input buffer\\\");","target":85},"65->94":{"file":"nf\/decompress_unlzo_rw.c","line":2172,"source":65,"type":"AssumeEdge","stmt":"[flush == 0]","target":94},"127->128":{"file":"nf\/decompress_unlzo_rw.c","line":2201,"source":127,"type":"AssumeEdge","stmt":"[Num >= 0]","target":128},"127->129":{"file":"nf\/decompress_unlzo_rw.c","line":2201,"source":127,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":129},"124->125":{"file":"nf\/decompress_unlzo_rw.c","line":2197,"source":124,"type":"StatementEdge","stmt":"error(\\\"Could not allocate input buffer\\\");","target":125},"29->28":{"file":"nf\/decompress_unlzo_rw.c","line":2103,"source":29,"type":"MultiEdge","stmt":"parse = parse + 8; ","target":28},"64->66":{"file":"nf\/decompress_unlzo_rw.c","line":2145,"source":64,"type":"StatementEdge","stmt":"out_buf = output;","target":66},"139->143":{"file":"nf\/decompress_unlzo_rw.c","line":2218,"source":139,"type":"MultiEdge","stmt":"Num = Num + 1; Label: exit","target":143}}}