digraph functioncalls {
rankdir=LR;

main [shape="box", color=blue];
calloc [shape="box", color=grey];
alloc_elem -> calloc;
perror [shape="box", color=grey];
alloc_elem -> perror;
exit [shape="box", color=grey];
alloc_elem -> exit;
calloc [shape="box", color=grey];
build_type_list -> calloc;
qsort [shape="box", color=grey];
build_type_list -> qsort;
printf [shape="box", color=grey];
build_type_list -> printf;
perror [shape="box", color=grey];
build_type_list -> perror;
exit [shape="box", color=grey];
build_type_list -> exit;
fprintf [shape="box", color=grey];
build_type_list -> fprintf;
strlen [shape="box", color=grey];
directive_compare -> strlen;
memcmp [shape="box", color=grey];
directive_compare -> memcmp;
open [shape="box", color=grey];
main -> open;
fstat [shape="box", color=grey];
main -> fstat;
malloc [shape="box", color=grey];
main -> malloc;
__assert_fail [shape="box", color=grey];
main -> __assert_fail;
read [shape="box", color=grey];
main -> read;
close [shape="box", color=grey];
main -> close;
strrchr [shape="box", color=grey];
main -> strrchr;
strdup [shape="box", color=grey];
main -> strdup;
strchr [shape="box", color=grey];
main -> strchr;
main -> main;
main -> tokenise;
main -> build_type_list;
main -> parse;
fopen [shape="box", color=grey];
main -> fopen;
main -> render;
fclose [shape="box", color=grey];
main -> fclose;
perror [shape="box", color=grey];
main -> perror;
exit [shape="box", color=grey];
main -> exit;
fprintf [shape="box", color=grey];
main -> fprintf;
printf [shape="box", color=grey];
parse -> printf;
fprintf [shape="box", color=grey];
parse -> fprintf;
exit [shape="box", color=grey];
parse -> exit;
abort [shape="box", color=grey];
parse -> abort;
parse_compound -> parse_compound;
parse_compound -> parse_type;
fprintf [shape="box", color=grey];
parse_compound -> fprintf;
exit [shape="box", color=grey];
parse_compound -> exit;
parse_type -> parse_type;
parse_type -> alloc_elem;
fprintf [shape="box", color=grey];
parse_type -> fprintf;
exit [shape="box", color=grey];
parse_type -> exit;
malloc [shape="box", color=grey];
parse_type -> malloc;
__assert_fail [shape="box", color=grey];
parse_type -> __assert_fail;
memcpy [shape="box", color=grey];
parse_type -> memcpy;
strcmp [shape="box", color=grey];
parse_type -> strcmp;
free [shape="box", color=grey];
parse_type -> free;
perror [shape="box", color=grey];
parse_type -> perror;
parse_type -> parse_compound;
bsearch [shape="box", color=grey];
parse_type -> bsearch;
strtoul [shape="box", color=grey];
parse_type -> strtoul;
abort [shape="box", color=grey];
parse_type -> abort;
fprintf [shape="box", color=grey];
render -> fprintf;
ferror [shape="box", color=grey];
render -> ferror;
perror [shape="box", color=grey];
render -> perror;
exit [shape="box", color=grey];
render -> exit;
printf [shape="box", color=grey];
render -> printf;
render -> render;
render -> render_element;
render -> render_opcode;
render -> render_out_of_line_list;
render_element -> render_element;
render_element -> render_more;
render_element -> render_opcode;
fprintf [shape="box", color=grey];
render_element -> fprintf;
exit [shape="box", color=grey];
render_element -> exit;
vfprintf [shape="box", color=grey];
render_more -> vfprintf;
fprintf [shape="box", color=grey];
render_opcode -> fprintf;
vfprintf [shape="box", color=grey];
render_opcode -> vfprintf;
render_out_of_line_list -> render_out_of_line_list;
render_out_of_line_list -> render_more;
render_out_of_line_list -> render_element;
render_out_of_line_list -> render_opcode;
calloc [shape="box", color=grey];
tokenise -> calloc;
printf [shape="box", color=grey];
tokenise -> printf;
memchr [shape="box", color=grey];
tokenise -> memchr;
memmove [shape="box", color=grey];
tokenise -> memmove;
__ctype_b_loc [shape="box", color=grey];
tokenise -> __ctype_b_loc;
bsearch [shape="box", color=grey];
tokenise -> bsearch;
fprintf [shape="box", color=grey];
tokenise -> fprintf;
exit [shape="box", color=grey];
tokenise -> exit;
memcmp [shape="box", color=grey];
tokenise -> memcmp;
perror [shape="box", color=grey];
tokenise -> perror;
memcmp [shape="box", color=grey];
type_finder -> memcmp;
memcmp [shape="box", color=grey];
type_index_compare -> memcmp;
}
