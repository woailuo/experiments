digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N19\nmain entry\nABS0: true" id="1"]
11 [label="11 @ N20\nmain" id="11"]
12 [label="12 @ N12\npoker entry" id="12"]
44 [fillcolor="cornflowerblue" label="44 @ N14\npoker\nABS8" id="44"]
45 [label="45 @ N1\nM entry" id="45"]
46 [label="46 @ N3\nM" id="46"]
48 [label="48 @ N5\nM" id="48"]
47 [label="47 @ N4\nM" id="47"]
49 [label="49 @ N6\nM" id="49"]
50 [label="50 @ N0\nM exit" id="50"]
51 [label="51 @ N15\npoker" id="51"]
52 [label="52 @ N1\nM entry" id="52"]
53 [label="53 @ N3\nM" id="53"]
55 [label="55 @ N5\nM" id="55"]
54 [label="54 @ N4\nM" id="54"]
56 [label="56 @ N6\nM" id="56"]
57 [label="57 @ N0\nM exit" id="57"]
58 [label="58 @ N16\npoker" id="58"]
60 [fillcolor="cornflowerblue" label="60 @ N14\npoker\nABS9" id="60"]
61 [label="61 @ N1\nM entry" id="61"]
62 [label="62 @ N3\nM" id="62"]
64 [label="64 @ N5\nM" id="64"]
63 [label="63 @ N4\nM" id="63"]
65 [label="65 @ N6\nM" id="65"]
66 [label="66 @ N0\nM exit" id="66"]
67 [label="67 @ N15\npoker" id="67"]
68 [label="68 @ N1\nM entry" id="68"]
69 [label="69 @ N3\nM" id="69"]
71 [label="71 @ N5\nM" id="71"]
70 [label="70 @ N4\nM" id="70"]
72 [label="72 @ N6\nM" id="72"]
73 [label="73 @ N0\nM exit" id="73"]
74 [label="74 @ N16\npoker" id="74"]
76 [fillcolor="cornflowerblue" label="76 @ N14\npoker\nABS10" id="76"]
77 [label="77 @ N1\nM entry" id="77"]
78 [label="78 @ N3\nM" id="78"]
80 [label="80 @ N5\nM" id="80"]
81 [fillcolor="red" label="81 @ N6\nM\nAssertionAutomaton: _predefinedState_ERROR\nABS11: true" id="81"]
79 [fillcolor="orange" label="79 @ N4\nM" id="79"]
1 -> 11 [color="red" label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 4; void M(); void F(); void poker(); int main(); Function start dummy edge" id="1 -> 11"]
11 -> 12 [color="red" label="Line 883: poker()" id="11 -> 12"]
12 -> 44 [color="red" label="Line 875: Function start dummy edge Label: l1" id="12 -> 44"]
44 -> 45 [color="red" label="Line 876: M()" id="44 -> 45"]
45 -> 46 [color="red" label="Line 864: Function start dummy edge Num = Num - 1;" id="45 -> 46"]
46 -> 47 [color="red" label="Line 865: [Num >= 0]" id="46 -> 47"]
46 -> 48 [label="Line 865: [!(Num >= 0)]" id="46 -> 48"]
47 -> 49 [color="red" label="Line 865: 0;" id="47 -> 49"]
49 -> 50 [color="red" label="Line 0: default return" id="49 -> 50"]
50 -> 51 [color="red" label="Line 876: Return edge from M to poker" id="50 -> 51"]
51 -> 52 [color="red" label="Line 877: M()" id="51 -> 52"]
52 -> 53 [color="red" label="Line 864: Function start dummy edge Num = Num - 1;" id="52 -> 53"]
53 -> 54 [color="red" label="Line 865: [Num >= 0]" id="53 -> 54"]
53 -> 55 [label="Line 865: [!(Num >= 0)]" id="53 -> 55"]
54 -> 56 [color="red" label="Line 865: 0;" id="54 -> 56"]
56 -> 57 [color="red" label="Line 0: default return" id="56 -> 57"]
57 -> 58 [color="red" label="Line 877: Return edge from M to poker" id="57 -> 58"]
58 -> 60 [color="red" label="Line 878: Goto: l1" id="58 -> 60"]
60 -> 61 [color="red" label="Line 876: M()" id="60 -> 61"]
61 -> 62 [color="red" label="Line 864: Function start dummy edge Num = Num - 1;" id="61 -> 62"]
62 -> 63 [color="red" label="Line 865: [Num >= 0]" id="62 -> 63"]
62 -> 64 [label="Line 865: [!(Num >= 0)]" id="62 -> 64"]
63 -> 65 [color="red" label="Line 865: 0;" id="63 -> 65"]
65 -> 66 [color="red" label="Line 0: default return" id="65 -> 66"]
66 -> 67 [color="red" label="Line 876: Return edge from M to poker" id="66 -> 67"]
67 -> 68 [color="red" label="Line 877: M()" id="67 -> 68"]
68 -> 69 [color="red" label="Line 864: Function start dummy edge Num = Num - 1;" id="68 -> 69"]
69 -> 70 [color="red" label="Line 865: [Num >= 0]" id="69 -> 70"]
69 -> 71 [label="Line 865: [!(Num >= 0)]" id="69 -> 71"]
70 -> 72 [color="red" label="Line 865: 0;" id="70 -> 72"]
72 -> 73 [color="red" label="Line 0: default return" id="72 -> 73"]
73 -> 74 [color="red" label="Line 877: Return edge from M to poker" id="73 -> 74"]
74 -> 76 [color="red" label="Line 878: Goto: l1" id="74 -> 76"]
76 -> 77 [color="red" label="Line 876: M()" id="76 -> 77"]
77 -> 78 [color="red" label="Line 864: Function start dummy edge Num = Num - 1;" id="77 -> 78"]
78 -> 79 [label="Line 865: [Num >= 0]" id="78 -> 79"]
78 -> 80 [color="red" label="Line 865: [!(Num >= 0)]" id="78 -> 80"]
80 -> 81 [color="red" label="Line 865: __assert_fail('Num >= 0', 'tf/behavior.c', 9, '__PRETTY_FUNCTION__');" id="80 -> 81"]
}
