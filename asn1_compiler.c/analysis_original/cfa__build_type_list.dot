digraph build_type_list {
362 [shape="circle" label="362\n32"]
370 [shape="doublecircle" label="370\n31"]
372 [shape="diamond" label="372\n3"]
373 [shape="diamond" label="373\n30"]
381 [shape="circle" label="381\n29"]
380 [shape="circle" label="380\n26"]
384 [shape="circle" label="384\n25"]
386 [shape="diamond" label="386\n23"]
388 [shape="circle" label="388\n22"]
387 [shape="circle" label="387\n19"]
391 [shape="diamond" label="391\n18"]
393 [shape="circle" label="393\n17"]
392 [shape="circle" label="392\n14"]
399 [shape="doublecircle" label="399\n13"]
401 [shape="diamond" label="401\n7"]
402 [shape="circle" label="402\n12"]
405 [shape="diamond" label="405\n6"]
403 [shape="circle" label="403\n4"]
404 [shape="circle" label="404\n5"]
394 [shape="circle" label="394\n16"]
389 [shape="circle" label="389\n21"]
382 [shape="circle" label="382\n28"]
376 [shape="diamond" label="376\n2"]
374 [shape="circle" label="374\n0"]
375 [shape="circle" label="375\n1"]
384 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">384</td><td align="left">type_list = calloc(nr + 1, 20);</td></tr><tr><td align="right">385</td><td align="left">types = type_list;</td></tr></table>>]
384 -> 386[label=""]
402 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">402</td><td align="left">(types[t]).name = &amp;(token_list[n + 1]); (types[t]).flags = ((types[t]).flags) &amp;#124; 1;</td></tr><tr><td align="right">412</td><td align="left">qsort(type_index, nr, 4, &amp;type_index_compare);</td></tr><tr><td align="right">413</td><td align="left">printf(\"Extracted %u types\n\", nr_types);</td></tr><tr><td align="right">414</td><td align="left">default return</td></tr></table>>]
402 -> 361[label=""]
394 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">394</td><td align="left">exit(1);</td></tr><tr><td align="right">395</td><td align="left"></td></tr></table>>]
394 -> 392[label=""]
389 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">389</td><td align="left">exit(1);</td></tr><tr><td align="right">390</td><td align="left"></td></tr></table>>]
389 -> 387[label=""]
382 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">382</td><td align="left">exit(1);</td></tr><tr><td align="right">383</td><td align="left"></td></tr></table>>]
382 -> 380[label=""]
362 -> 370 [label="Function start dummy edge struct type *types; unsigned nr; unsigned t; unsigned n; nr = 0; for n = 0;" fontname="Courier New"]
370 -> 372 [label="[n < (nr_tokens - 1)]" fontname="Courier New"]
370 -> 373 [label="[!(n < (nr_tokens - 1))]" fontname="Courier New"]
373 -> 381 [label="[nr == 0]" fontname="Courier New"]
373 -> 380 [label="[!(nr == 0)]" fontname="Courier New"]
380 -> 384 [label="nr_types = nr;" fontname="Courier New"]
386 -> 388 [label="[type_list == 0]" fontname="Courier New"]
386 -> 387 [label="[!(type_list == 0)]" fontname="Courier New"]
387 -> 391 [label="type_index = calloc(nr, 4);" fontname="Courier New"]
391 -> 393 [label="[type_index == 0]" fontname="Courier New"]
391 -> 392 [label="[!(type_index == 0)]" fontname="Courier New"]
392 -> 399 [label="t = 0; (types[t]).flags = ((types[t]).flags) | 2; for n = 0;" fontname="Courier New"]
399 -> 401 [label="[n < (nr_tokens - 1)]" fontname="Courier New"]
399 -> 402 [label="[!(n < (nr_tokens - 1))]" fontname="Courier New"]
401 -> 405 [label="[((token_list[n + 0]).token_type) == 91]" fontname="Courier New"]
401 -> 403 [label="[!(((token_list[n + 0]).token_type) == 91)]" fontname="Courier New"]
403 -> 399 [label=" n = n + 1;" fontname="Courier New"]
405 -> 404 [label="[((token_list[n + 1]).token_type) == 82]" fontname="Courier New"]
405 -> 403 [label="[!(((token_list[n + 1]).token_type) == 82)]" fontname="Courier New"]
393 -> 394 [label="perror((void *)0);" fontname="Courier New"]
388 -> 389 [label="perror((void *)0);" fontname="Courier New"]
381 -> 382 [label="fprintf(stderr, \"%s: No defined types\n\", filename);" fontname="Courier New"]
372 -> 376 [label="[((token_list[n + 0]).token_type) == 91]" fontname="Courier New"]
372 -> 374 [label="[!(((token_list[n + 0]).token_type) == 91)]" fontname="Courier New"]
374 -> 370 [label=" n = n + 1;" fontname="Courier New"]
376 -> 375 [label="[((token_list[n + 1]).token_type) == 82]" fontname="Courier New"]
376 -> 374 [label="[!(((token_list[n + 1]).token_type) == 82)]" fontname="Courier New"]
404 -> 403 [label="(types[t]).name = &(token_list[n]); type_index[t] = &(types[t]); unsigned __CPAchecker_TMP_1 = t; t = t + 1; __CPAchecker_TMP_1; " fontname="Courier New"]
375 -> 374 [label="unsigned __CPAchecker_TMP_0 = nr; nr = nr + 1; __CPAchecker_TMP_0; " fontname="Courier New"]
}