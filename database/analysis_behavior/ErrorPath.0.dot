digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N18\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N21\nmain\n" id="1"]
2 [label="2 @ N19\nmain\n" id="2"]
3 [label="3 @ N12\ndatabase entry\n" id="3"]
4 [label="4 @ N13\ndatabase\n" id="4"]
5 [label="5 @ N1\nM entry\n" id="5"]
6 [label="6 @ N2\nM\n" id="6"]
7 [label="7 @ N3\nM\n" id="7"]
8 [label="8 @ N4\nM\n" id="8"]
10 [label="10 @ N6\nM\n" id="10"]
11 [label="11 @ N0\nM exit\n" id="11"]
12 [label="12 @ N14\ndatabase\n" id="12"]
13 [label="13 @ N1\nM entry\n" id="13"]
14 [label="14 @ N2\nM\n" id="14"]
15 [label="15 @ N3\nM\n" id="15"]
16 [label="16 @ N4\nM\n" id="16"]
18 [label="18 @ N6\nM\n" id="18"]
19 [label="19 @ N0\nM exit\n" id="19"]
20 [label="20 @ N15\ndatabase\n" id="20"]
21 [label="21 @ N1\nM entry\n" id="21"]
22 [label="22 @ N2\nM\n" id="22"]
23 [label="23 @ N3\nM\n" id="23"]
25 [label="25 @ N5\nM\n" id="25"]
26 [fillcolor="red" label="26 @ N6\nM\nAbstractionState: ABS1: true\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="26"]
0 -> 1 [color="red" label="Line 0: INIT GLOBAL VARS" id="0 -> 1"]
1 -> 2 [color="red" label="Line 0: typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 2; void M(); void F(); void database(); int main(); Function start dummy edge" id="1 -> 2"]
2 -> 3 [color="red" label="Line 877: database()" id="2 -> 3"]
3 -> 4 [color="red" label="Line 0: Function start dummy edge" id="3 -> 4"]
4 -> 5 [color="red" label="Line 871: M()" id="4 -> 5"]
5 -> 6 [color="red" label="Line 0: Function start dummy edge" id="5 -> 6"]
6 -> 7 [color="red" label="Line 862: Num = Num - 1;" id="6 -> 7"]
7 -> 8 [color="red" label="Line 863: [Num >= 0]" id="7 -> 8"]
7 -> 9 [label="Line 863: [!(Num >= 0)]" id="7 -> 9"]
8 -> 10 [color="red" label="Line 863: (void)0;" id="8 -> 10"]
10 -> 11 [color="red" label="Line 0: default return" id="10 -> 11"]
11 -> 12 [color="red" label="Line 871: Return edge from M to database" id="11 -> 12"]
12 -> 13 [color="red" label="Line 872: M()" id="12 -> 13"]
13 -> 14 [color="red" label="Line 0: Function start dummy edge" id="13 -> 14"]
14 -> 15 [color="red" label="Line 862: Num = Num - 1;" id="14 -> 15"]
15 -> 16 [color="red" label="Line 863: [Num >= 0]" id="15 -> 16"]
15 -> 17 [label="Line 863: [!(Num >= 0)]" id="15 -> 17"]
16 -> 18 [color="red" label="Line 863: (void)0;" id="16 -> 18"]
18 -> 19 [color="red" label="Line 0: default return" id="18 -> 19"]
19 -> 20 [color="red" label="Line 872: Return edge from M to database" id="19 -> 20"]
20 -> 21 [color="red" label="Line 873: M()" id="20 -> 21"]
21 -> 22 [color="red" label="Line 0: Function start dummy edge" id="21 -> 22"]
22 -> 23 [color="red" label="Line 862: Num = Num - 1;" id="22 -> 23"]
23 -> 24 [label="Line 863: [Num >= 0]" id="23 -> 24"]
23 -> 25 [color="red" label="Line 863: [!(Num >= 0)]" id="23 -> 25"]
25 -> 26 [color="red" label="Line 863: __assert_fail('Num >= 0', 'tf/behavior.c', 7, '__PRETTY_FUNCTION__');" id="25 -> 26"]
}
