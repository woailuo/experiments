digraph CFA {
125 [shape="circle" label="N125\n40"]
168 [shape="circle" label="N168\n39"]
129 [shape="circle" label="N129\n38"]
6 [shape="circle" label="N6\n10"]
7 [shape="circle" label="N7\n9"]
8 [shape="circle" label="N8\n8"]
10 [shape="diamond" label="N10\n7"]
12 [shape="circle" label="N12\n6"]
13 [shape="diamond" label="N13\n4"]
14 [shape="circle" label="N14\n1"]
5 [shape="circle" label="N5\n0"]
130 [shape="diamond" label="N130\n37"]
132 [shape="circle" label="N132\n36"]
133 [shape="circle" label="N133\n35"]
131 [shape="circle" label="N131\n34"]
134 [shape="circle" label="N134\n33"]
47 [shape="circle" label="N47\n4"]
48 [shape="diamond" label="N48\n3"]
51 [shape="circle" label="N51\n2"]
46 [shape="circle" label="N46\n0"]
147 [shape="circle" label="N147\n20"]
148 [shape="circle" label="N148\n19"]
149 [shape="circle" label="N149\n18"]
113 [shape="circle" label="N113\n7"]
114 [shape="circle" label="N114\n6"]
117 [shape="doublecircle" label="N117\n5"]
118 [shape="circle" label="N118\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
120 [shape="circle" label="N120\n3"]
119 [shape="circle" label="N119\n2"]
122 [shape="circle" label="N122\n1"]
112 [shape="circle" label="N112\n0"]
150 [shape="circle" label="N150\n17"]
69 [shape="circle" label="N69\n5"]
70 [shape="circle" label="N70\n4"]
71 [shape="diamond" label="N71\n3"]
72 [shape="circle" label="N72\n2"]
68 [shape="circle" label="N68\n0"]
157 [shape="diamond" label="N157\n10"]
158 [shape="circle" label="N158\n7"]
31 [shape="circle" label="N31\n7"]
32 [shape="circle" label="N32\n6"]
38 [shape="doublecircle" label="N38\n5"]
39 [shape="circle" label="N39\n4"]
42 [shape="circle" label="N42\n3"]
43 [shape="circle" label="N43\n2"]
40 [shape="circle" label="N40\n1"]
30 [shape="circle" label="N30\n0"]
161 [shape="circle" label="N161\n6"]
79 [shape="circle" label="N79\n11"]
80 [shape="circle" label="N80\n10"]
81 [shape="circle" label="N81\n9"]
82 [shape="circle" label="N82\n8"]
84 [shape="diamond" label="N84\n7"]
86 [shape="circle" label="N86\n6"]
87 [shape="diamond" label="N87\n4"]
88 [shape="circle" label="N88\n1"]
78 [shape="circle" label="N78\n0"]
163 [shape="circle" label="N163\n4"]
164 [shape="circle" label="N164\n3"]
20 [shape="circle" label="N20\n7"]
21 [shape="circle" label="N21\n6"]
22 [shape="doublecircle" label="N22\n5"]
23 [shape="circle" label="N23\n4"]
25 [shape="circle" label="N25\n3"]
26 [shape="circle" label="N26\n2"]
24 [shape="circle" label="N24\n1"]
19 [shape="circle" label="N19\n0"]
165 [shape="circle" label="N165\n2"]
166 [shape="circle" label="N166\n1"]
124 [shape="circle" label="N124\n0"]
162 [shape="circle" label="N162\n5"]
142 [shape="circle" label="N142\n25"]
143 [shape="circle" label="N143\n24"]
55 [shape="circle" label="N55\n5"]
56 [shape="circle" label="N56\n4"]
60 [shape="doublecircle" label="N60\n3"]
62 [shape="circle" label="N62\n2"]
54 [shape="circle" label="N54\n1"]
144 [shape="circle" label="N144\n23"]
145 [shape="circle" label="N145\n22"]
146 [shape="circle" label="N146\n21"]
138 [shape="circle" label="N138\n29"]
139 [shape="circle" label="N139\n28"]
140 [shape="circle" label="N140\n27"]
141 [shape="circle" label="N141\n26"]
61 [shape="circle" label="N61\n0"]
89 [shape="circle" label="N89\n3"]
90 [shape="circle" label="N90\n2"]
85 [shape="circle" label="N85\n5"]
159 [shape="circle" label="N159\n9"]
160 [shape="circle" label="N160\n8"]
151 [shape="diamond" label="N151\n16"]
152 [shape="circle" label="N152\n13"]
97 [shape="circle" label="N97\n9"]
98 [shape="circle" label="N98\n8"]
99 [shape="diamond" label="N99\n7"]
100 [shape="circle" label="N100\n6"]
105 [shape="diamond" label="N105\n5"]
106 [shape="circle" label="N106\n3"]
109 [shape="circle" label="N109\n2"]
96 [shape="circle" label="N96\n0"]
155 [shape="circle" label="N155\n12"]
156 [shape="circle" label="N156\n11"]
107 [shape="circle" label="N107\n4"]
101 [shape="circle" label="N101\n1"]
153 [shape="circle" label="N153\n15"]
154 [shape="circle" label="N154\n14"]
73 [shape="circle" label="N73\n1"]
135 [shape="circle" label="N135\n32"]
136 [shape="circle" label="N136\n31"]
137 [shape="circle" label="N137\n30"]
50 [shape="circle" label="N50\n1"]
15 [shape="circle" label="N15\n3"]
16 [shape="circle" label="N16\n2"]
11 [shape="circle" label="N11\n5"]
node [shape="circle"]
subgraph cluster_ClearQueue {
label="ClearQueue()"
31 -> 32 [label="Function start dummy edge"]
32 -> 38 [label="struct QNode *p; struct QNode *q; Q->rear = Q->front; p = Q->front->next; Q->front->next = (void *)0; while"]
38 -> 40 [label="[p == 0]"]
38 -> 39 [label="[!(p == 0)]"]
39 -> 42 [label="q = p; p = p->next;"]
42 -> 43 [label="free(q);"]
43 -> 38 [label="Num = Num + 1; "]
40 -> 30 [label="return 1;"]}
subgraph cluster_DeQueue {
label="DeQueue()"
97 -> 98 [label="Function start dummy edge"]
98 -> 99 [label="struct QNode *p;"]
99 -> 101 [label="[(Q->front) == (Q->rear)]"]
99 -> 100 [label="[!((Q->front) == (Q->rear))]"]
100 -> 105 [label="p = Q->front->next; *e = p->data; Q->front->next = p->next;"]
105 -> 107 [label="[(Q->rear) == p]"]
105 -> 106 [label="[!((Q->rear) == p)]"]
106 -> 109 [label="free(p);"]
109 -> 96 [label="Num = Num + 1; return 1;"]
107 -> 106 [label="Q->rear = Q->front; "]
101 -> 96 [label="return 0;"]}
subgraph cluster_DestroyQueue {
label="DestroyQueue()"
20 -> 21 [label="Function start dummy edge"]
21 -> 22 [label="while"]
22 -> 24 [label="[(Q->front) == 0]"]
22 -> 23 [label="[!((Q->front) == 0)]"]
23 -> 25 [label="Q->rear = Q->front->next;"]
25 -> 26 [label="free(Q->front);"]
26 -> 22 [label="Num = Num + 1; Q->front = Q->rear; "]
24 -> 19 [label="return 1;"]}
subgraph cluster_EnQueue {
label="EnQueue()"
79 -> 80 [label="Function start dummy edge"]
80 -> 81 [label="void *__CPAchecker_TMP_0;"]
81 -> 82 [label="__CPAchecker_TMP_0 = malloc(8);"]
82 -> 84 [label="struct QNode *s = (QueuePtr )__CPAchecker_TMP_0; Num = Num - 1;"]
84 -> 85 [label="[Num >= 0]"]
84 -> 86 [label="[!(Num >= 0)]"]
86 -> 87 [label="__assert_fail(\"Num >= 0\", \"tf/linkqueue.c\", 122, \"__PRETTY_FUNCTION__\");"]
87 -> 89 [label="[s == 0]"]
87 -> 88 [label="[!(s == 0)]"]
88 -> 78 [label="s->data = e; s->next = (void *)0; Q->rear->next = s; Q->rear = s; return 1;"]
89 -> 90 [label="exit(3);"]
90 -> 88 [label=""]
85 -> 87 [label="(void)0;"]}
subgraph cluster_GetHead {
label="GetHead()"
69 -> 70 [label="Function start dummy edge"]
70 -> 71 [label="struct QNode *p;"]
71 -> 73 [label="[(Q.front) == (Q.rear)]"]
71 -> 72 [label="[!((Q.front) == (Q.rear))]"]
72 -> 68 [label="p = Q.front->next; *e = p->data; return 1;"]
73 -> 68 [label="return 0;"]}
subgraph cluster_InitQueue {
label="InitQueue()"
6 -> 7 [label="Function start dummy edge"]
7 -> 8 [label="Q->rear = malloc(8);"]
8 -> 10 [label="Q->front = Q->rear; Num = Num - 1;"]
10 -> 11 [label="[Num >= 0]"]
10 -> 12 [label="[!(Num >= 0)]"]
12 -> 13 [label="__assert_fail(\"Num >= 0\", \"tf/linkqueue.c\", 42, \"__PRETTY_FUNCTION__\");"]
13 -> 15 [label="[(Q->front) == 0]"]
13 -> 14 [label="[!((Q->front) == 0)]"]
14 -> 5 [label="Q->front->next = (void *)0; return 1;"]
15 -> 16 [label="exit(3);"]
16 -> 14 [label=""]
11 -> 13 [label="(void)0;"]}
subgraph cluster_QueueEmpty {
label="QueueEmpty()"
47 -> 48 [label="Function start dummy edge"]
48 -> 50 [label="[(Q.front) == (Q.rear)]"]
48 -> 51 [label="[!((Q.front) == (Q.rear))]"]
51 -> 46 [label="return 0;"]
50 -> 46 [label="return 1;"]}
subgraph cluster_QueueLength {
label="QueueLength()"
55 -> 56 [label="Function start dummy edge"]
56 -> 60 [label="int i = 0; struct QNode *p; p = Q.front; while"]
60 -> 61 [label="[(Q.rear) != p]"]
60 -> 62 [label="[!((Q.rear) != p)]"]
62 -> 54 [label="return i;"]
61 -> 60 [label="int __CPAchecker_TMP_0 = i; i = i + 1; __CPAchecker_TMP_0; p = p->next; "]}
subgraph cluster_QueueTraverse {
label="QueueTraverse()"
113 -> 114 [label="Function start dummy edge"]
114 -> 117 [label="struct QNode *p; p = Q.front->next; while"]
117 -> 119 [label="[p == 0]"]
117 -> 118 [label="[!(p == 0)]"]
118 -> 120 [label="visit(p->data);" style="dotted" arrowhead="empty"]
120 -> 117 [label="p = p->next; "]
119 -> 122 [label="printf(\"\n\");"]
122 -> 112 [label="return 1;"]}
subgraph cluster_main {
label="main()"
125 -> 168 [label="INIT GLOBAL VARS"]
168 -> 129 [label="typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef float float_t; typedef double double_t; double acos(double __x); double __acos(double __x); double asin(double __x); double __asin(double __x); double atan(double __x); double __atan(double __x); double atan2(double __y, double __x); double __atan2(double __y, double __x); double cos(double __x); double __cos(double __x); double sin(double __x); double __sin(double __x); double tan(double __x); double __tan(double __x); double cosh(double __x); double __cosh(double __x); double sinh(double __x); double __sinh(double __x); double tanh(double __x); double __tanh(double __x); double acosh(double __x); double __acosh(double __x); double asinh(double __x); double __asinh(double __x); double atanh(double __x); double __atanh(double __x); double exp(double __x); double __exp(double __x); double frexp(double __x, int *__exponent); double __frexp(double __x, int *__exponent); double ldexp(double __x, int __exponent); double __ldexp(double __x, int __exponent); double log(double __x); double __log(double __x); double log10(double __x); double __log10(double __x); double modf(double __x, double *__iptr); double __modf(double __x, double *__iptr); double expm1(double __x); double __expm1(double __x); double log1p(double __x); double __log1p(double __x); double logb(double __x); double __logb(double __x); double exp2(double __x); double __exp2(double __x); double log2(double __x); double __log2(double __x); double pow(double __x, double __y); double __pow(double __x, double __y); double sqrt(double __x); double __sqrt(double __x); double hypot(double __x, double __y); double __hypot(double __x, double __y); double cbrt(double __x); double __cbrt(double __x); double ceil(double __x); double __ceil(double __x); double fabs(double __x); double __fabs(double __x); double floor(double __x); double __floor(double __x); double fmod(double __x, double __y); double __fmod(double __x, double __y); int __isinf(double __value); int __finite(double __value); int isinf(double __value); int finite(double __value); double drem(double __x, double __y); double __drem(double __x, double __y); double significand(double __x); double __significand(double __x); double copysign(double __x, double __y); double __copysign(double __x, double __y); double nan(const char *__tagb); double __nan(const char *__tagb); int __isnan(double __value); int isnan(double __value); double j0(double); double __j0(double); double j1(double); double __j1(double); double jn(int, double); double __jn(int, double); double y0(double); double __y0(double); double y1(double); double __y1(double); double yn(int, double); double __yn(int, double); double erf(double); double __erf(double); double erfc(double); double __erfc(double); double lgamma(double); double __lgamma(double); double tgamma(double); double __tgamma(double); double gamma(double); double __gamma(double); double lgamma_r(double, int *__signgamp); double __lgamma_r(double, int *__signgamp); double rint(double __x); double __rint(double __x); double nextafter(double __x, double __y); double __nextafter(double __x, double __y); double nexttoward(double __x, long double __y); double __nexttoward(double __x, long double __y); double remainder(double __x, double __y); double __remainder(double __x, double __y); double scalbn(double __x, int __n); double __scalbn(double __x, int __n); int ilogb(double __x); int __ilogb(double __x); double scalbln(double __x, long int __n); double __scalbln(double __x, long int __n); double nearbyint(double __x); double __nearbyint(double __x); double round(double __x); double __round(double __x); double trunc(double __x); double __trunc(double __x); double remquo(double __x, double __y, int *__quo); double __remquo(double __x, double __y, int *__quo); long int lrint(double __x); long int __lrint(double __x); long long int llrint(double __x); long long int __llrint(double __x); long int lround(double __x); long int __lround(double __x); long long int llround(double __x); long long int __llround(double __x); double fdim(double __x, double __y); double __fdim(double __x, double __y); double fmax(double __x, double __y); double __fmax(double __x, double __y); double fmin(double __x, double __y); double __fmin(double __x, double __y); int __fpclassify(double __value); int __signbit(double __value); double fma(double __x, double __y, double __z); double __fma(double __x, double __y, double __z); double scalb(double __x, double __n); double __scalb(double __x, double __n); float acosf(float __x); float __acosf(float __x); float asinf(float __x); float __asinf(float __x); float atanf(float __x); float __atanf(float __x); float atan2f(float __y, float __x); float __atan2f(float __y, float __x); float cosf(float __x); float __cosf(float __x); float sinf(float __x); float __sinf(float __x); float tanf(float __x); float __tanf(float __x); float coshf(float __x); float __coshf(float __x); float sinhf(float __x); float __sinhf(float __x); float tanhf(float __x); float __tanhf(float __x); float acoshf(float __x); float __acoshf(float __x); float asinhf(float __x); float __asinhf(float __x); float atanhf(float __x); float __atanhf(float __x); float expf(float __x); float __expf(float __x); float frexpf(float __x, int *__exponent); float __frexpf(float __x, int *__exponent); float ldexpf(float __x, int __exponent); float __ldexpf(float __x, int __exponent); float logf(float __x); float __logf(float __x); float log10f(float __x); float __log10f(float __x); float modff(float __x, float *__iptr); float __modff(float __x, float *__iptr); float expm1f(float __x); float __expm1f(float __x); float log1pf(float __x); float __log1pf(float __x); float logbf(float __x); float __logbf(float __x); float exp2f(float __x); float __exp2f(float __x); float log2f(float __x); float __log2f(float __x); float powf(float __x, float __y); float __powf(float __x, float __y); float sqrtf(float __x); float __sqrtf(float __x); float hypotf(float __x, float __y); float __hypotf(float __x, float __y); float cbrtf(float __x); float __cbrtf(float __x); float ceilf(float __x); float __ceilf(float __x); float fabsf(float __x); float __fabsf(float __x); float floorf(float __x); float __floorf(float __x); float fmodf(float __x, float __y); float __fmodf(float __x, float __y); int __isinff(float __value); int __finitef(float __value); int isinff(float __value); int finitef(float __value); float dremf(float __x, float __y); float __dremf(float __x, float __y); float significandf(float __x); float __significandf(float __x); float copysignf(float __x, float __y); float __copysignf(float __x, float __y); float nanf(const char *__tagb); float __nanf(const char *__tagb); int __isnanf(float __value); int isnanf(float __value); float j0f(float); float __j0f(float); float j1f(float); float __j1f(float); float jnf(int, float); float __jnf(int, float); float y0f(float); float __y0f(float); float y1f(float); float __y1f(float); float ynf(int, float); float __ynf(int, float); float erff(float); float __erff(float); float erfcf(float); float __erfcf(float); float lgammaf(float); float __lgammaf(float); float tgammaf(float); float __tgammaf(float); float gammaf(float); float __gammaf(float); float lgammaf_r(float, int *__signgamp); float __lgammaf_r(float, int *__signgamp); float rintf(float __x); float __rintf(float __x); float nextafterf(float __x, float __y); float __nextafterf(float __x, float __y); float nexttowardf(float __x, long double __y); float __nexttowardf(float __x, long double __y); float remainderf(float __x, float __y); float __remainderf(float __x, float __y); float scalbnf(float __x, int __n); float __scalbnf(float __x, int __n); int ilogbf(float __x); int __ilogbf(float __x); float scalblnf(float __x, long int __n); float __scalblnf(float __x, long int __n); float nearbyintf(float __x); float __nearbyintf(float __x); float roundf(float __x); float __roundf(float __x); float truncf(float __x); float __truncf(float __x); float remquof(float __x, float __y, int *__quo); float __remquof(float __x, float __y, int *__quo); long int lrintf(float __x); long int __lrintf(float __x); long long int llrintf(float __x); long long int __llrintf(float __x); long int lroundf(float __x); long int __lroundf(float __x); long long int llroundf(float __x); long long int __llroundf(float __x); float fdimf(float __x, float __y); float __fdimf(float __x, float __y); float fmaxf(float __x, float __y); float __fmaxf(float __x, float __y); float fminf(float __x, float __y); float __fminf(float __x, float __y); int __fpclassifyf(float __value); int __signbitf(float __value); float fmaf(float __x, float __y, float __z); float __fmaf(float __x, float __y, float __z); float scalbf(float __x, float __n); float __scalbf(float __x, float __n); long double acosl(long double __x); long double __acosl(long double __x); long double asinl(long double __x); long double __asinl(long double __x); long double atanl(long double __x); long double __atanl(long double __x); long double atan2l(long double __y, long double __x); long double __atan2l(long double __y, long double __x); long double cosl(long double __x); long double __cosl(long double __x); long double sinl(long double __x); long double __sinl(long double __x); long double tanl(long double __x); long double __tanl(long double __x); long double coshl(long double __x); long double __coshl(long double __x); long double sinhl(long double __x); long double __sinhl(long double __x); long double tanhl(long double __x); long double __tanhl(long double __x); long double acoshl(long double __x); long double __acoshl(long double __x); long double asinhl(long double __x); long double __asinhl(long double __x); long double atanhl(long double __x); long double __atanhl(long double __x); long double expl(long double __x); long double __expl(long double __x); long double frexpl(long double __x, int *__exponent); long double __frexpl(long double __x, int *__exponent); long double ldexpl(long double __x, int __exponent); long double __ldexpl(long double __x, int __exponent); long double logl(long double __x); long double __logl(long double __x); long double log10l(long double __x); long double __log10l(long double __x); long double modfl(long double __x, long double *__iptr); long double __modfl(long double __x, long double *__iptr); long double expm1l(long double __x); long double __expm1l(long double __x); long double log1pl(long double __x); long double __log1pl(long double __x); long double logbl(long double __x); long double __logbl(long double __x); long double exp2l(long double __x); long double __exp2l(long double __x); long double log2l(long double __x); long double __log2l(long double __x); long double powl(long double __x, long double __y); long double __powl(long double __x, long double __y); long double sqrtl(long double __x); long double __sqrtl(long double __x); long double hypotl(long double __x, long double __y); long double __hypotl(long double __x, long double __y); long double cbrtl(long double __x); long double __cbrtl(long double __x); long double ceill(long double __x); long double __ceill(long double __x); long double fabsl(long double __x); long double __fabsl(long double __x); long double floorl(long double __x); long double __floorl(long double __x); long double fmodl(long double __x, long double __y); long double __fmodl(long double __x, long double __y); int __isinfl(long double __value); int __finitel(long double __value); int isinfl(long double __value); int finitel(long double __value); long double dreml(long double __x, long double __y); long double __dreml(long double __x, long double __y); long double significandl(long double __x); long double __significandl(long double __x); long double copysignl(long double __x, long double __y); long double __copysignl(long double __x, long double __y); long double nanl(const char *__tagb); long double __nanl(const char *__tagb); int __isnanl(long double __value); int isnanl(long double __value); long double j0l(long double); long double __j0l(long double); long double j1l(long double); long double __j1l(long double); long double jnl(int, long double); long double __jnl(int, long double); long double y0l(long double); long double __y0l(long double); long double y1l(long double); long double __y1l(long double); long double ynl(int, long double); long double __ynl(int, long double); long double erfl(long double); long double __erfl(long double); long double erfcl(long double); long double __erfcl(long double); long double lgammal(long double); long double __lgammal(long double); long double tgammal(long double); long double __tgammal(long double); long double gammal(long double); long double __gammal(long double); long double lgammal_r(long double, int *__signgamp); long double __lgammal_r(long double, int *__signgamp); long double rintl(long double __x); long double __rintl(long double __x); long double nextafterl(long double __x, long double __y); long double __nextafterl(long double __x, long double __y); long double nexttowardl(long double __x, long double __y); long double __nexttowardl(long double __x, long double __y); long double remainderl(long double __x, long double __y); long double __remainderl(long double __x, long double __y); long double scalbnl(long double __x, int __n); long double __scalbnl(long double __x, int __n); int ilogbl(long double __x); int __ilogbl(long double __x); long double scalblnl(long double __x, long int __n); long double __scalblnl(long double __x, long int __n); long double nearbyintl(long double __x); long double __nearbyintl(long double __x); long double roundl(long double __x); long double __roundl(long double __x); long double truncl(long double __x); long double __truncl(long double __x); long double remquol(long double __x, long double __y, int *__quo); long double __remquol(long double __x, long double __y, int *__quo); long int lrintl(long double __x); long int __lrintl(long double __x); long long int llrintl(long double __x); long long int __llrintl(long double __x); long int lroundl(long double __x); long int __lroundl(long double __x); long long int llroundl(long double __x); long long int __llroundl(long double __x); long double fdiml(long double __x, long double __y); long double __fdiml(long double __x, long double __y); long double fmaxl(long double __x, long double __y); long double __fmaxl(long double __x, long double __y); long double fminl(long double __x, long double __y); long double __fminl(long double __x, long double __y); int __fpclassifyl(long double __value); int __signbitl(long double __value); long double fmal(long double __x, long double __y, long double __z); long double __fmal(long double __x, long double __y, long double __z); long double scalbl(long double __x, long double __n); long double __scalbl(long double __x, long double __n); extern int signgam; enum __anon_type_21 {   FP_NAN = 0,   FP_INFINITE = 1,   FP_ZERO = 2,   FP_SUBNORMAL = 3,   FP_NORMAL = 4 } ; enum __anon_type_22 {   _IEEE_ = -1,   _SVID_ = 0,   _XOPEN_ = 1,   _POSIX_ = 2,   _ISOC_ = 3 } ; typedef enum __anon_type_22 _LIB_VERSION_TYPE; extern enum __anon_type_22 _LIB_VERSION; struct exception {   int type;   char *name;   double arg1;   double arg2;   double retval; } ; int matherr(struct exception *__exc); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); int Num = 4; typedef int Status; typedef int QElemType; struct QNode {   QElemType data;   struct QNode *next; } ; typedef struct QNode QNode; typedef struct QNode *QueuePtr; struct __anon_type_23 {   QueuePtr front;   QueuePtr rear; } ; typedef struct __anon_type_23 LinkQueue; Status  visit(QElemType c); Status  InitQueue(LinkQueue *Q); Status  DestroyQueue(LinkQueue *Q); Status  ClearQueue(LinkQueue *Q); Status  QueueEmpty(LinkQueue Q); int QueueLength(LinkQueue Q); Status  GetHead(LinkQueue Q, QElemType *e); Status  EnQueue(LinkQueue *Q, QElemType e); Status  DeQueue(LinkQueue *Q, QElemType *e); Status  QueueTraverse(LinkQueue Q); int main(); Function start dummy edge int i; int d; struct __anon_type_23 q;"]
129 -> 130 [label="i = InitQueue(&q);" style="dotted" arrowhead="empty"]
130 -> 131 [label="[i == 0]"]
130 -> 132 [label="[!(i == 0)]"]
132 -> 133 [label="printf(\"成功地构造了一个空队列!\n\");"]
133 -> 131 [label=""]
131 -> 134 [label="Status __CPAchecker_TMP_0;"]
134 -> 135 [label="__CPAchecker_TMP_0 = QueueEmpty(q);" style="dotted" arrowhead="empty"]
147 -> 148 [label="printf(\"是否空队列？%d(1:空 0:否)  \", __CPAchecker_TMP_3);"]
148 -> 149 [label="printf(\"队列的元素依次为：\");"]
149 -> 150 [label="QueueTraverse(q);" style="dotted" arrowhead="empty"]
150 -> 151 [label="i = GetHead(q, &d);" style="dotted" arrowhead="empty"]
157 -> 159 [label="[i == 1]"]
157 -> 158 [label="[!(i == 1)]"]
158 -> 161 [label="ClearQueue(&q);" style="dotted" arrowhead="empty"]
161 -> 162 [label="EnQueue(&q, -5);" style="dotted" arrowhead="empty"]
163 -> 164 [label="printf(\"清空队列后,q.front=%u q.rear=%u q.front->next=%u\n\", q.front, q.rear, q.front->next);"]
164 -> 165 [label="DestroyQueue(&q);" style="dotted" arrowhead="empty"]
165 -> 166 [label="printf(\"销毁队列后,q.front=%u q.rear=%u\n\", q.front, q.rear);"]
166 -> 124 [label="return 0;"]
162 -> 163 [label="EnQueue(&q, 5);" style="dotted" arrowhead="empty"]
142 -> 143 [label="int __CPAchecker_TMP_2;"]
143 -> 144 [label="__CPAchecker_TMP_2 = QueueLength(q);" style="dotted" arrowhead="empty"]
144 -> 145 [label="printf(\"插入3个元素(-5,5,10)后,队列的长度为%d\n\", __CPAchecker_TMP_2);"]
145 -> 146 [label="Status __CPAchecker_TMP_3;"]
146 -> 147 [label="__CPAchecker_TMP_3 = QueueEmpty(q);" style="dotted" arrowhead="empty"]
138 -> 139 [label="printf(\"队列的长度为%d\n\", __CPAchecker_TMP_1);"]
139 -> 140 [label="EnQueue(&q, -5);" style="dotted" arrowhead="empty"]
140 -> 141 [label="EnQueue(&q, 5);" style="dotted" arrowhead="empty"]
141 -> 142 [label="EnQueue(&q, 10);" style="dotted" arrowhead="empty"]
159 -> 160 [label="printf(\"新的队头元素是：%d\n\", d);"]
160 -> 158 [label=""]
151 -> 153 [label="[i == 1]"]
151 -> 152 [label="[!(i == 1)]"]
152 -> 155 [label="DeQueue(&q, &d);" style="dotted" arrowhead="empty"]
155 -> 156 [label="printf(\"删除了队头元素%d\n\", d);"]
156 -> 157 [label="i = GetHead(q, &d);" style="dotted" arrowhead="empty"]
153 -> 154 [label="printf(\"队头元素是：%d\n\", d);"]
154 -> 152 [label=""]
135 -> 136 [label="printf(\"是否空队列？%d(1:空 0:否)  \", __CPAchecker_TMP_0);"]
136 -> 137 [label="int __CPAchecker_TMP_1;"]
137 -> 138 [label="__CPAchecker_TMP_1 = QueueLength(q);" style="dotted" arrowhead="empty"]}
subgraph cluster_visit {
label="visit()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="printf(\"%d \", c);"]
3 -> 0 [label="return 1;"]}
129 -> 6 [label="InitQueue(&q)"]
5 -> 130 [label="Return edge from InitQueue to main"]
134 -> 47 [label="QueueEmpty(q)"]
46 -> 135 [label="Return edge from QueueEmpty to main"]
46 -> 147 [label="Return edge from QueueEmpty to main"]
149 -> 113 [label="QueueTraverse(q)"]
118 -> 1 [label="visit(p->data)"]
0 -> 120 [label="Return edge from visit to QueueTraverse"]
112 -> 150 [label="Return edge from QueueTraverse to main"]
150 -> 69 [label="GetHead(q, &d)"]
68 -> 151 [label="Return edge from GetHead to main"]
68 -> 157 [label="Return edge from GetHead to main"]
158 -> 31 [label="ClearQueue(&q)"]
30 -> 161 [label="Return edge from ClearQueue to main"]
161 -> 79 [label="EnQueue(&q, -5)"]
78 -> 140 [label="Return edge from EnQueue to main"]
78 -> 141 [label="Return edge from EnQueue to main"]
78 -> 142 [label="Return edge from EnQueue to main"]
78 -> 162 [label="Return edge from EnQueue to main"]
78 -> 163 [label="Return edge from EnQueue to main"]
164 -> 20 [label="DestroyQueue(&q)"]
19 -> 165 [label="Return edge from DestroyQueue to main"]
162 -> 79 [label="EnQueue(&q, 5)"]
143 -> 55 [label="QueueLength(q)"]
54 -> 138 [label="Return edge from QueueLength to main"]
54 -> 144 [label="Return edge from QueueLength to main"]
146 -> 47 [label="QueueEmpty(q)"]
139 -> 79 [label="EnQueue(&q, -5)"]
140 -> 79 [label="EnQueue(&q, 5)"]
141 -> 79 [label="EnQueue(&q, 10)"]
152 -> 97 [label="DeQueue(&q, &d)"]
96 -> 155 [label="Return edge from DeQueue to main"]
156 -> 69 [label="GetHead(q, &d)"]
137 -> 55 [label="QueueLength(q)"]}