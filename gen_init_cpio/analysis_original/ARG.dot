digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N379\nmain entry\nABS0: true" id="1"]
408 [label="408 @ N387\nmain" id="408"]
409 [label="409 @ N388\nmain" id="409"]
2813 [fillcolor="cornflowerblue" label="2813 @ N389\nmain\nABS124" id="2813"]
2814 [label="2814 @ N392\nmain" id="2814"]
2815 [label="2815 @ N393\nmain" id="2815"]
2816 [label="2816 @ N394\nmain" id="2816"]
2818 [label="2818 @ N395\nmain" id="2818"]
2819 [label="2819 @ N398\nmain" id="2819"]
2821 [label="2821 @ N402\nmain" id="2821"]
2823 [label="2823 @ N412\nmain" id="2823"]
2828 [label="2828 @ N413\nmain" id="2828"]
2829 [label="2829 @ N375\nusage entry" id="2829"]
2830 [label="2830 @ N376\nusage" id="2830"]
2831 [label="2831 @ N377\nusage" id="2831"]
2832 [label="2832 @ N374\nusage exit" id="2832"]
2833 [label="2833 @ N415\nmain" id="2833"]
2834 [label="2834 @ N416\nmain" id="2834"]
2836 [label="2836 @ N418\nmain" id="2836"]
2839 [label="2839 @ N419\nmain" id="2839"]
2835 [label="2835 @ N417\nmain" id="2835"]
2825 [label="2825 @ N414\nmain" id="2825"]
2853 [label="2853 @ N399\nmain" id="2853"]
2855 [fillcolor="green" label="2855 @ N389\nmain\nABS125" id="2855"]
2822 [label="2822 @ N411\nmain" id="2822"]
2820 [label="2820 @ N401\nmain" id="2820"]
2840 [label="2840 @ N403\nmain" id="2840"]
2845 [label="2845 @ N405\nmain" id="2845"]
2846 [label="2846 @ N407\nmain" id="2846"]
2847 [label="2847 @ N375\nusage entry" id="2847"]
2848 [label="2848 @ N376\nusage" id="2848"]
2849 [label="2849 @ N377\nusage" id="2849"]
2850 [label="2850 @ N374\nusage exit" id="2850"]
2851 [label="2851 @ N408\nmain" id="2851"]
2842 [label="2842 @ N406\nmain" id="2842"]
2843 [label="2843 @ N404\nmain" id="2843"]
2817 [label="2817 @ N396\nmain" id="2817"]
2856 [label="2856 @ N391\nmain" id="2856"]
2858 [label="2858 @ N421\nmain" id="2858"]
2864 [label="2864 @ N429\nmain" id="2864"]
2865 [label="2865 @ N430\nmain" id="2865"]
2867 [label="2867 @ N428\nmain" id="2867"]
2868 [label="2868 @ N434\nmain" id="2868"]
2870 [label="2870 @ N432\nmain" id="2870"]
2883 [label="2883 @ N426\nmain" id="2883"]
2885 [fillcolor="cornflowerblue" label="2885 @ N442\nmain\nABS126" id="2885"]
2886 [label="2886 @ N446\nmain" id="2886"]
2887 [label="2887 @ N447\nmain" id="2887"]
2888 [label="2888 @ N450\nmain" id="2888"]
2890 [label="2890 @ N451\nmain" id="2890"]
2891 [label="2891 @ N456\nmain" id="2891"]
2893 [label="2893 @ N454\nmain" id="2893"]
2895 [label="2895 @ N460\nmain" id="2895"]
2896 [label="2896 @ N465\nmain" id="2896"]
2897 [label="2897 @ N466\nmain" id="2897"]
2899 [label="2899 @ N463\nmain" id="2899"]
2900 [label="2900 @ N470\nmain" id="2900"]
2905 [label="2905 @ N468\nmain" id="2905"]
2907 [fillcolor="cornflowerblue" label="2907 @ N474\nmain\nABS127" id="2907"]
3494 [label="3494 @ N477\nmain" id="3494"]
3539 [label="3539 @ N489\nmain" id="3539"]
4184 [fillcolor="green" label="4184 @ N442\nmain\nABS186" id="4184"]
3511 [label="3511 @ N490\nmain" id="3511"]
3521 [label="3521 @ N491\nmain" id="3521"]
2909 [label="2909 @ N476\nmain" id="2909"]
2910 [label="2910 @ N481\nmain" id="2910"]
2911 [label="2911 @ N482\nmain" id="2911"]
2913 [label="2913 @ N479\nmain" id="2913"]
2915 [fillcolor="green" label="2915 @ N474\nmain\nABS128" id="2915"]
2912 [label="2912 @ N480\nmain" id="2912"]
2917 [label="2917 @ N497\nmain" id="2917"]
2919 [label="2919 @ N500\nmain" id="2919"]
2921 [label="2921 @ N503\nmain" id="2921"]
2923 [label="2923 @ N506\nmain" id="2923"]
2925 [label="2925 @ N509\nmain" id="2925"]
2927 [label="2927 @ N512\nmain" id="2927"]
3430 [label="3430 @ N485\nmain" id="3430"]
3484 [label="3484 @ N483\nmain" id="3484"]
3448 [label="3448 @ N484\nmain" id="3448"]
3457 [label="3457 @ N486\nmain" id="3457"]
3466 [label="3466 @ N487\nmain" id="3466"]
2926 [label="2926 @ N511\nmain" id="2926"]
2929 [label="2929 @ N150\ncpio_mksock_line entry" id="2929"]
2930 [label="2930 @ N152\ncpio_mksock_line" id="2930"]
2931 [label="2931 @ N120\ncpio_mkgeneric_line entry" id="2931"]
2932 [label="2932 @ N129\ncpio_mkgeneric_line" id="2932"]
2933 [label="2933 @ N130\ncpio_mkgeneric_line" id="2933"]
2935 [label="2935 @ N127\ncpio_mkgeneric_line" id="2935"]
2936 [label="2936 @ N133\ncpio_mkgeneric_line" id="2936"]
2937 [label="2937 @ N103\ncpio_mkgeneric entry" id="2937"]
2938 [label="2938 @ N105\ncpio_mkgeneric" id="2938"]
2942 [label="2942 @ N106\ncpio_mkgeneric" id="2942"]
2943 [label="2943 @ N113\ncpio_mkgeneric" id="2943"]
2944 [label="2944 @ N114\ncpio_mkgeneric" id="2944"]
2945 [label="2945 @ N115\ncpio_mkgeneric" id="2945"]
2946 [label="2946 @ N41\npush_hdr entry" id="2946"]
2947 [label="2947 @ N42\npush_hdr" id="2947"]
2948 [label="2948 @ N43\npush_hdr" id="2948"]
2949 [label="2949 @ N40\npush_hdr exit" id="2949"]
2950 [label="2950 @ N116\ncpio_mkgeneric" id="2950"]
2951 [label="2951 @ N20\npush_rest entry" id="2951"]
2952 [label="2952 @ N22\npush_rest" id="2952"]
2953 [label="2953 @ N23\npush_rest" id="2953"]
2954 [label="2954 @ N25\npush_rest" id="2954"]
2955 [label="2955 @ N26\npush_rest" id="2955"]
2956 [label="2956 @ N27\npush_rest" id="2956"]
2958 [fillcolor="cornflowerblue" label="2958 @ N30\npush_rest\nABS129" id="2958"]
2960 [label="2960 @ N31\npush_rest" id="2960"]
2961 [label="2961 @ N33\npush_rest" id="2961"]
2963 [fillcolor="green" label="2963 @ N30\npush_rest\nABS130" id="2963"]
2959 [label="2959 @ N32\npush_rest" id="2959"]
2964 [label="2964 @ N19\npush_rest exit" id="2964"]
2965 [label="2965 @ N117\ncpio_mkgeneric" id="2965"]
2966 [label="2966 @ N102\ncpio_mkgeneric exit" id="2966"]
2967 [label="2967 @ N134\ncpio_mkgeneric_line" id="2967"]
2968 [label="2968 @ N135\ncpio_mkgeneric_line" id="2968"]
2971 [label="2971 @ N119\ncpio_mkgeneric_line exit" id="2971"]
2973 [label="2973 @ N153\ncpio_mksock_line" id="2973"]
2975 [label="2975 @ N149\ncpio_mksock_line exit" id="2975"]
2977 [label="2977 @ N513\nmain" id="2977"]
2979 [label="2979 @ N485\nmain" id="2979"]
3468 [label="3468 @ N483\nmain" id="3468"]
3485 [label="3485 @ N477\nmain" id="3485"]
3523 [label="3523 @ N489\nmain" id="3523"]
3541 [fillcolor="green" label="3541 @ N442\nmain\nABS151" id="3541"]
3495 [label="3495 @ N490\nmain" id="3495"]
3513 [label="3513 @ N491\nmain" id="3513"]
3432 [label="3432 @ N484\nmain" id="3432"]
3449 [label="3449 @ N486\nmain" id="3449"]
3458 [label="3458 @ N487\nmain" id="3458"]
2939 [label="2939 @ N107\ncpio_mkgeneric" id="2939"]
2934 [label="2934 @ N128\ncpio_mkgeneric_line" id="2934"]
2969 [label="2969 @ N131\ncpio_mkgeneric_line" id="2969"]
2970 [label="2970 @ N135\ncpio_mkgeneric_line" id="2970"]
2972 [label="2972 @ N119\ncpio_mkgeneric_line exit" id="2972"]
2974 [label="2974 @ N153\ncpio_mksock_line" id="2974"]
2976 [label="2976 @ N149\ncpio_mksock_line exit" id="2976"]
2978 [label="2978 @ N513\nmain" id="2978"]
2924 [label="2924 @ N508\nmain" id="2924"]
2982 [label="2982 @ N138\ncpio_mkdir_line entry" id="2982"]
2983 [label="2983 @ N140\ncpio_mkdir_line" id="2983"]
2984 [label="2984 @ N120\ncpio_mkgeneric_line entry" id="2984"]
2985 [label="2985 @ N129\ncpio_mkgeneric_line" id="2985"]
2986 [label="2986 @ N130\ncpio_mkgeneric_line" id="2986"]
2988 [label="2988 @ N127\ncpio_mkgeneric_line" id="2988"]
2989 [label="2989 @ N133\ncpio_mkgeneric_line" id="2989"]
2990 [label="2990 @ N103\ncpio_mkgeneric entry" id="2990"]
2991 [label="2991 @ N105\ncpio_mkgeneric" id="2991"]
2995 [label="2995 @ N106\ncpio_mkgeneric" id="2995"]
2996 [label="2996 @ N113\ncpio_mkgeneric" id="2996"]
2997 [label="2997 @ N114\ncpio_mkgeneric" id="2997"]
2998 [label="2998 @ N115\ncpio_mkgeneric" id="2998"]
2999 [label="2999 @ N41\npush_hdr entry" id="2999"]
3000 [label="3000 @ N42\npush_hdr" id="3000"]
3001 [label="3001 @ N43\npush_hdr" id="3001"]
3002 [label="3002 @ N40\npush_hdr exit" id="3002"]
3003 [label="3003 @ N116\ncpio_mkgeneric" id="3003"]
3004 [label="3004 @ N20\npush_rest entry" id="3004"]
3005 [label="3005 @ N22\npush_rest" id="3005"]
3006 [label="3006 @ N23\npush_rest" id="3006"]
3007 [label="3007 @ N25\npush_rest" id="3007"]
3008 [label="3008 @ N26\npush_rest" id="3008"]
3009 [label="3009 @ N27\npush_rest" id="3009"]
3011 [fillcolor="cornflowerblue" label="3011 @ N30\npush_rest\nABS131" id="3011"]
3013 [label="3013 @ N31\npush_rest" id="3013"]
3014 [label="3014 @ N33\npush_rest" id="3014"]
3016 [fillcolor="green" label="3016 @ N30\npush_rest\nABS132" id="3016"]
3012 [label="3012 @ N32\npush_rest" id="3012"]
3017 [label="3017 @ N19\npush_rest exit" id="3017"]
3018 [label="3018 @ N117\ncpio_mkgeneric" id="3018"]
3019 [label="3019 @ N102\ncpio_mkgeneric exit" id="3019"]
3020 [label="3020 @ N134\ncpio_mkgeneric_line" id="3020"]
3021 [label="3021 @ N135\ncpio_mkgeneric_line" id="3021"]
3024 [label="3024 @ N119\ncpio_mkgeneric_line exit" id="3024"]
3026 [label="3026 @ N141\ncpio_mkdir_line" id="3026"]
3028 [label="3028 @ N137\ncpio_mkdir_line exit" id="3028"]
3030 [label="3030 @ N510\nmain" id="3030"]
3032 [label="3032 @ N485\nmain" id="3032"]
3470 [label="3470 @ N483\nmain" id="3470"]
3486 [label="3486 @ N477\nmain" id="3486"]
3525 [label="3525 @ N489\nmain" id="3525"]
3543 [fillcolor="green" label="3543 @ N442\nmain\nABS152" id="3543"]
3497 [label="3497 @ N490\nmain" id="3497"]
3514 [label="3514 @ N491\nmain" id="3514"]
3434 [label="3434 @ N484\nmain" id="3434"]
3450 [label="3450 @ N486\nmain" id="3450"]
3459 [label="3459 @ N487\nmain" id="3459"]
2992 [label="2992 @ N107\ncpio_mkgeneric" id="2992"]
2987 [label="2987 @ N128\ncpio_mkgeneric_line" id="2987"]
3022 [label="3022 @ N131\ncpio_mkgeneric_line" id="3022"]
3023 [label="3023 @ N135\ncpio_mkgeneric_line" id="3023"]
3025 [label="3025 @ N119\ncpio_mkgeneric_line exit" id="3025"]
3027 [label="3027 @ N141\ncpio_mkdir_line" id="3027"]
3029 [label="3029 @ N137\ncpio_mkdir_line exit" id="3029"]
3031 [label="3031 @ N510\nmain" id="3031"]
2922 [label="2922 @ N505\nmain" id="2922"]
3035 [label="3035 @ N85\ncpio_mkslink_line entry" id="3035"]
3036 [label="3036 @ N95\ncpio_mkslink_line" id="3036"]
3037 [label="3037 @ N96\ncpio_mkslink_line" id="3037"]
3039 [label="3039 @ N93\ncpio_mkslink_line" id="3039"]
3040 [label="3040 @ N63\ncpio_mkslink entry" id="3040"]
3041 [label="3041 @ N65\ncpio_mkslink" id="3041"]
3045 [label="3045 @ N66\ncpio_mkslink" id="3045"]
3046 [label="3046 @ N73\ncpio_mkslink" id="3046"]
3047 [label="3047 @ N74\ncpio_mkslink" id="3047"]
3048 [label="3048 @ N75\ncpio_mkslink" id="3048"]
3049 [label="3049 @ N76\ncpio_mkslink" id="3049"]
3050 [label="3050 @ N77\ncpio_mkslink" id="3050"]
3051 [label="3051 @ N41\npush_hdr entry" id="3051"]
3052 [label="3052 @ N42\npush_hdr" id="3052"]
3053 [label="3053 @ N43\npush_hdr" id="3053"]
3054 [label="3054 @ N40\npush_hdr exit" id="3054"]
3055 [label="3055 @ N78\ncpio_mkslink" id="3055"]
3056 [label="3056 @ N1\npush_string entry" id="3056"]
3057 [label="3057 @ N3\npush_string" id="3057"]
3058 [label="3058 @ N4\npush_string" id="3058"]
3059 [label="3059 @ N5\npush_string" id="3059"]
3060 [label="3060 @ N6\npush_string" id="3060"]
3061 [label="3061 @ N7\npush_string" id="3061"]
3062 [label="3062 @ N0\npush_string exit" id="3062"]
3063 [label="3063 @ N79\ncpio_mkslink" id="3063"]
3064 [label="3064 @ N10\npush_pad entry" id="3064"]
3066 [fillcolor="cornflowerblue" label="3066 @ N12\npush_pad\nABS133" id="3066"]
3068 [label="3068 @ N13\npush_pad" id="3068"]
3069 [label="3069 @ N15\npush_pad" id="3069"]
3071 [fillcolor="green" label="3071 @ N12\npush_pad\nABS134" id="3071"]
3067 [label="3067 @ N14\npush_pad" id="3067"]
3072 [label="3072 @ N9\npush_pad exit" id="3072"]
3073 [label="3073 @ N80\ncpio_mkslink" id="3073"]
3074 [label="3074 @ N1\npush_string entry" id="3074"]
3075 [label="3075 @ N3\npush_string" id="3075"]
3076 [label="3076 @ N4\npush_string" id="3076"]
3077 [label="3077 @ N5\npush_string" id="3077"]
3078 [label="3078 @ N6\npush_string" id="3078"]
3079 [label="3079 @ N7\npush_string" id="3079"]
3080 [label="3080 @ N0\npush_string exit" id="3080"]
3081 [label="3081 @ N81\ncpio_mkslink" id="3081"]
3082 [label="3082 @ N10\npush_pad entry" id="3082"]
3084 [fillcolor="cornflowerblue" label="3084 @ N12\npush_pad\nABS135" id="3084"]
3086 [label="3086 @ N13\npush_pad" id="3086"]
3087 [label="3087 @ N15\npush_pad" id="3087"]
3089 [fillcolor="green" label="3089 @ N12\npush_pad\nABS136" id="3089"]
3085 [label="3085 @ N14\npush_pad" id="3085"]
3090 [label="3090 @ N9\npush_pad exit" id="3090"]
3091 [label="3091 @ N82\ncpio_mkslink" id="3091"]
3092 [label="3092 @ N62\ncpio_mkslink exit" id="3092"]
3093 [label="3093 @ N99\ncpio_mkslink_line" id="3093"]
3094 [label="3094 @ N100\ncpio_mkslink_line" id="3094"]
3097 [label="3097 @ N84\ncpio_mkslink_line exit" id="3097"]
3099 [label="3099 @ N507\nmain" id="3099"]
3101 [label="3101 @ N485\nmain" id="3101"]
3472 [label="3472 @ N483\nmain" id="3472"]
3487 [label="3487 @ N477\nmain" id="3487"]
3527 [label="3527 @ N489\nmain" id="3527"]
3545 [fillcolor="green" label="3545 @ N442\nmain\nABS153" id="3545"]
3499 [label="3499 @ N490\nmain" id="3499"]
3515 [label="3515 @ N491\nmain" id="3515"]
3436 [label="3436 @ N484\nmain" id="3436"]
3451 [label="3451 @ N486\nmain" id="3451"]
3460 [label="3460 @ N487\nmain" id="3460"]
3042 [label="3042 @ N67\ncpio_mkslink" id="3042"]
3038 [label="3038 @ N94\ncpio_mkslink_line" id="3038"]
3095 [label="3095 @ N97\ncpio_mkslink_line" id="3095"]
3096 [label="3096 @ N100\ncpio_mkslink_line" id="3096"]
3098 [label="3098 @ N84\ncpio_mkslink_line exit" id="3098"]
3100 [label="3100 @ N507\nmain" id="3100"]
2920 [label="2920 @ N502\nmain" id="2920"]
3104 [label="3104 @ N303\ncpio_mkfile_line entry" id="3104"]
3105 [label="3105 @ N317\ncpio_mkfile_line" id="3105"]
3106 [label="3106 @ N318\ncpio_mkfile_line" id="3106"]
3108 [label="3108 @ N315\ncpio_mkfile_line" id="3108"]
3115 [label="3115 @ N323\ncpio_mkfile_line" id="3115"]
3133 [label="3133 @ N321\ncpio_mkfile_line" id="3133"]
3134 [label="3134 @ N365\ncpio_mkfile_line" id="3134"]
3135 [label="3135 @ N280\ncpio_replace_env entry" id="3135"]
4478 [fillcolor="cornflowerblue" label="4478 @ N286\ncpio_replace_env\nABS203" id="4478"]
4479 [label="4479 @ N290\ncpio_replace_env" id="4479"]
4485 [label="4485 @ N288\ncpio_replace_env" id="4485"]
4498 [label="4498 @ N279\ncpio_replace_env exit" id="4498"]
4499 [label="4499 @ N366\ncpio_mkfile_line" id="4499"]
4500 [label="4500 @ N198\ncpio_mkfile entry" id="4500"]
4501 [label="4501 @ N209\ncpio_mkfile" id="4501"]
4502 [label="4502 @ N210\ncpio_mkfile" id="4502"]
4504 [label="4504 @ N211\ncpio_mkfile" id="4504"]
4505 [label="4505 @ N215\ncpio_mkfile" id="4505"]
4507 [label="4507 @ N217\ncpio_mkfile" id="4507"]
4508 [label="4508 @ N218\ncpio_mkfile" id="4508"]
4654 [label="4654 @ N270\ncpio_mkfile" id="4654"]
4679 [label="4679 @ N271\ncpio_mkfile" id="4679"]
4704 [label="4704 @ N275\ncpio_mkfile" id="4704"]
4709 [label="4709 @ N197\ncpio_mkfile exit" id="4709"]
4714 [label="4714 @ N367\ncpio_mkfile_line" id="4714"]
4719 [label="4719 @ N368\ncpio_mkfile_line" id="4719"]
4744 [label="4744 @ N369\ncpio_mkfile_line" id="4744"]
4749 [label="4749 @ N302\ncpio_mkfile_line exit" id="4749"]
4754 [label="4754 @ N504\nmain" id="4754"]
4759 [label="4759 @ N485\nmain" id="4759"]
4789 [label="4789 @ N483\nmain" id="4789"]
4794 [label="4794 @ N477\nmain" id="4794"]
4819 [label="4819 @ N489\nmain" id="4819"]
4829 [fillcolor="green" label="4829 @ N442\nmain\nABS222" id="4829"]
4803 [label="4803 @ N490\nmain" id="4803"]
4809 [label="4809 @ N491\nmain" id="4809"]
4769 [label="4769 @ N484\nmain" id="4769"]
4774 [label="4774 @ N486\nmain" id="4774"]
4779 [label="4779 @ N487\nmain" id="4779"]
4729 [label="4729 @ N370\ncpio_mkfile_line" id="4729"]
4734 [label="4734 @ N371\ncpio_mkfile_line" id="4734"]
4688 [label="4688 @ N276\ncpio_mkfile" id="4688"]
4694 [label="4694 @ N277\ncpio_mkfile" id="4694"]
4664 [label="4664 @ N272\ncpio_mkfile" id="4664"]
4669 [label="4669 @ N273\ncpio_mkfile" id="4669"]
4506 [label="4506 @ N216\ncpio_mkfile" id="4506"]
4510 [label="4510 @ N220\ncpio_mkfile" id="4510"]
4511 [label="4511 @ N221\ncpio_mkfile" id="4511"]
4513 [label="4513 @ N223\ncpio_mkfile" id="4513"]
4512 [label="4512 @ N222\ncpio_mkfile" id="4512"]
4514 [label="4514 @ N224\ncpio_mkfile" id="4514"]
4516 [label="4516 @ N225\ncpio_mkfile" id="4516"]
4517 [label="4517 @ N229\ncpio_mkfile" id="4517"]
4519 [label="4519 @ N230\ncpio_mkfile" id="4519"]
4521 [fillcolor="cornflowerblue" label="4521 @ N236\ncpio_mkfile\nABS205" id="4521"]
4523 [label="4523 @ N239\ncpio_mkfile" id="4523"]
4524 [label="4524 @ N270\ncpio_mkfile" id="4524"]
4671 [label="4671 @ N271\ncpio_mkfile" id="4671"]
4696 [label="4696 @ N275\ncpio_mkfile" id="4696"]
4705 [label="4705 @ N197\ncpio_mkfile exit" id="4705"]
4710 [label="4710 @ N367\ncpio_mkfile_line" id="4710"]
4715 [label="4715 @ N368\ncpio_mkfile_line" id="4715"]
4736 [label="4736 @ N369\ncpio_mkfile_line" id="4736"]
4745 [label="4745 @ N302\ncpio_mkfile_line exit" id="4745"]
4750 [label="4750 @ N504\nmain" id="4750"]
4755 [label="4755 @ N485\nmain" id="4755"]
4781 [label="4781 @ N483\nmain" id="4781"]
4790 [label="4790 @ N477\nmain" id="4790"]
4811 [label="4811 @ N489\nmain" id="4811"]
4821 [fillcolor="cornflowerblue" label="4821 @ N442\nmain\nABS218: false" id="4821"]
4795 [label="4795 @ N490\nmain" id="4795"]
4805 [label="4805 @ N491\nmain" id="4805"]
4761 [label="4761 @ N484\nmain" id="4761"]
4770 [label="4770 @ N486\nmain" id="4770"]
4775 [label="4775 @ N487\nmain" id="4775"]
4721 [label="4721 @ N370\ncpio_mkfile_line" id="4721"]
4730 [label="4730 @ N371\ncpio_mkfile_line" id="4730"]
4680 [label="4680 @ N276\ncpio_mkfile" id="4680"]
4690 [label="4690 @ N277\ncpio_mkfile" id="4690"]
4656 [label="4656 @ N272\ncpio_mkfile" id="4656"]
4665 [label="4665 @ N273\ncpio_mkfile" id="4665"]
4522 [label="4522 @ N238\ncpio_mkfile" id="4522"]
4528 [label="4528 @ N240\ncpio_mkfile" id="4528"]
4532 [label="4532 @ N243\ncpio_mkfile" id="4532"]
4533 [label="4533 @ N248\ncpio_mkfile" id="4533"]
4534 [label="4534 @ N249\ncpio_mkfile" id="4534"]
4535 [label="4535 @ N250\ncpio_mkfile" id="4535"]
4536 [label="4536 @ N251\ncpio_mkfile" id="4536"]
4537 [label="4537 @ N41\npush_hdr entry" id="4537"]
4538 [label="4538 @ N42\npush_hdr" id="4538"]
4539 [label="4539 @ N43\npush_hdr" id="4539"]
4540 [label="4540 @ N40\npush_hdr exit" id="4540"]
4541 [label="4541 @ N252\ncpio_mkfile" id="4541"]
4542 [label="4542 @ N1\npush_string entry" id="4542"]
4543 [label="4543 @ N3\npush_string" id="4543"]
4544 [label="4544 @ N4\npush_string" id="4544"]
4545 [label="4545 @ N5\npush_string" id="4545"]
4546 [label="4546 @ N6\npush_string" id="4546"]
4547 [label="4547 @ N7\npush_string" id="4547"]
4548 [label="4548 @ N0\npush_string exit" id="4548"]
4549 [label="4549 @ N253\ncpio_mkfile" id="4549"]
4550 [label="4550 @ N10\npush_pad entry" id="4550"]
4552 [fillcolor="cornflowerblue" label="4552 @ N12\npush_pad\nABS206" id="4552"]
4554 [label="4554 @ N13\npush_pad" id="4554"]
4555 [label="4555 @ N15\npush_pad" id="4555"]
4557 [fillcolor="green" label="4557 @ N12\npush_pad\nABS207" id="4557"]
4553 [label="4553 @ N14\npush_pad" id="4553"]
4558 [label="4558 @ N9\npush_pad exit" id="4558"]
4559 [label="4559 @ N254\ncpio_mkfile" id="4559"]
4561 [label="4561 @ N256\ncpio_mkfile" id="4561"]
4562 [label="4562 @ N259\ncpio_mkfile" id="4562"]
4563 [label="4563 @ N260\ncpio_mkfile" id="4563"]
4565 [label="4565 @ N257\ncpio_mkfile" id="4565"]
4566 [label="4566 @ N263\ncpio_mkfile" id="4566"]
4567 [label="4567 @ N10\npush_pad entry" id="4567"]
4569 [fillcolor="cornflowerblue" label="4569 @ N12\npush_pad\nABS208" id="4569"]
4571 [label="4571 @ N13\npush_pad" id="4571"]
4572 [label="4572 @ N15\npush_pad" id="4572"]
4574 [fillcolor="green" label="4574 @ N12\npush_pad\nABS209" id="4574"]
4570 [label="4570 @ N14\npush_pad" id="4570"]
4575 [label="4575 @ N9\npush_pad exit" id="4575"]
4576 [label="4576 @ N264\ncpio_mkfile" id="4576"]
4577 [label="4577 @ N255\ncpio_mkfile" id="4577"]
4641 [fillcolor="green" label="4641 @ N236\ncpio_mkfile\nABS215" id="4641"]
4564 [label="4564 @ N258\ncpio_mkfile" id="4564"]
4578 [label="4578 @ N261\ncpio_mkfile" id="4578"]
4579 [label="4579 @ N270\ncpio_mkfile" id="4579"]
4673 [label="4673 @ N271\ncpio_mkfile" id="4673"]
4698 [label="4698 @ N275\ncpio_mkfile" id="4698"]
4706 [label="4706 @ N197\ncpio_mkfile exit" id="4706"]
4711 [label="4711 @ N367\ncpio_mkfile_line" id="4711"]
4716 [label="4716 @ N368\ncpio_mkfile_line" id="4716"]
4738 [label="4738 @ N369\ncpio_mkfile_line" id="4738"]
4746 [label="4746 @ N302\ncpio_mkfile_line exit" id="4746"]
4751 [label="4751 @ N504\nmain" id="4751"]
4756 [label="4756 @ N485\nmain" id="4756"]
4783 [label="4783 @ N483\nmain" id="4783"]
4791 [label="4791 @ N477\nmain" id="4791"]
4813 [label="4813 @ N489\nmain" id="4813"]
4823 [fillcolor="green" label="4823 @ N442\nmain\nABS219" id="4823"]
4797 [label="4797 @ N490\nmain" id="4797"]
4806 [label="4806 @ N491\nmain" id="4806"]
4763 [label="4763 @ N484\nmain" id="4763"]
4771 [label="4771 @ N486\nmain" id="4771"]
4776 [label="4776 @ N487\nmain" id="4776"]
4723 [label="4723 @ N370\ncpio_mkfile_line" id="4723"]
4731 [label="4731 @ N371\ncpio_mkfile_line" id="4731"]
4682 [label="4682 @ N276\ncpio_mkfile" id="4682"]
4691 [label="4691 @ N277\ncpio_mkfile" id="4691"]
4658 [label="4658 @ N272\ncpio_mkfile" id="4658"]
4666 [label="4666 @ N273\ncpio_mkfile" id="4666"]
4560 [label="4560 @ N255\ncpio_mkfile" id="4560"]
4581 [fillcolor="cornflowerblue" label="4581 @ N236\ncpio_mkfile\nABS210" id="4581"]
4583 [label="4583 @ N239\ncpio_mkfile" id="4583"]
4584 [label="4584 @ N270\ncpio_mkfile" id="4584"]
4675 [label="4675 @ N271\ncpio_mkfile" id="4675"]
4700 [label="4700 @ N275\ncpio_mkfile" id="4700"]
4707 [label="4707 @ N197\ncpio_mkfile exit" id="4707"]
4712 [label="4712 @ N367\ncpio_mkfile_line" id="4712"]
4717 [label="4717 @ N368\ncpio_mkfile_line" id="4717"]
4740 [label="4740 @ N369\ncpio_mkfile_line" id="4740"]
4747 [label="4747 @ N302\ncpio_mkfile_line exit" id="4747"]
4752 [label="4752 @ N504\nmain" id="4752"]
4757 [label="4757 @ N485\nmain" id="4757"]
4785 [label="4785 @ N483\nmain" id="4785"]
4792 [label="4792 @ N477\nmain" id="4792"]
4815 [label="4815 @ N489\nmain" id="4815"]
4825 [fillcolor="green" label="4825 @ N442\nmain\nABS220" id="4825"]
4799 [label="4799 @ N490\nmain" id="4799"]
4807 [label="4807 @ N491\nmain" id="4807"]
4765 [label="4765 @ N484\nmain" id="4765"]
4772 [label="4772 @ N486\nmain" id="4772"]
4777 [label="4777 @ N487\nmain" id="4777"]
4725 [label="4725 @ N370\ncpio_mkfile_line" id="4725"]
4732 [label="4732 @ N371\ncpio_mkfile_line" id="4732"]
4684 [label="4684 @ N276\ncpio_mkfile" id="4684"]
4692 [label="4692 @ N277\ncpio_mkfile" id="4692"]
4660 [label="4660 @ N272\ncpio_mkfile" id="4660"]
4667 [label="4667 @ N273\ncpio_mkfile" id="4667"]
4582 [label="4582 @ N238\ncpio_mkfile" id="4582"]
4588 [label="4588 @ N240\ncpio_mkfile" id="4588"]
4592 [label="4592 @ N243\ncpio_mkfile" id="4592"]
4593 [label="4593 @ N248\ncpio_mkfile" id="4593"]
4594 [label="4594 @ N249\ncpio_mkfile" id="4594"]
4595 [label="4595 @ N250\ncpio_mkfile" id="4595"]
4596 [label="4596 @ N251\ncpio_mkfile" id="4596"]
4597 [label="4597 @ N41\npush_hdr entry" id="4597"]
4598 [label="4598 @ N42\npush_hdr" id="4598"]
4599 [label="4599 @ N43\npush_hdr" id="4599"]
4600 [label="4600 @ N40\npush_hdr exit" id="4600"]
4601 [label="4601 @ N252\ncpio_mkfile" id="4601"]
4602 [label="4602 @ N1\npush_string entry" id="4602"]
4603 [label="4603 @ N3\npush_string" id="4603"]
4604 [label="4604 @ N4\npush_string" id="4604"]
4605 [label="4605 @ N5\npush_string" id="4605"]
4606 [label="4606 @ N6\npush_string" id="4606"]
4607 [label="4607 @ N7\npush_string" id="4607"]
4608 [label="4608 @ N0\npush_string exit" id="4608"]
4609 [label="4609 @ N253\ncpio_mkfile" id="4609"]
4610 [label="4610 @ N10\npush_pad entry" id="4610"]
4612 [fillcolor="cornflowerblue" label="4612 @ N12\npush_pad\nABS211" id="4612"]
4614 [label="4614 @ N13\npush_pad" id="4614"]
4615 [label="4615 @ N15\npush_pad" id="4615"]
4617 [fillcolor="green" label="4617 @ N12\npush_pad\nABS212" id="4617"]
4613 [label="4613 @ N14\npush_pad" id="4613"]
4618 [label="4618 @ N9\npush_pad exit" id="4618"]
4619 [label="4619 @ N254\ncpio_mkfile" id="4619"]
4621 [label="4621 @ N256\ncpio_mkfile" id="4621"]
4622 [label="4622 @ N259\ncpio_mkfile" id="4622"]
4623 [label="4623 @ N260\ncpio_mkfile" id="4623"]
4625 [label="4625 @ N257\ncpio_mkfile" id="4625"]
4626 [label="4626 @ N263\ncpio_mkfile" id="4626"]
4627 [label="4627 @ N10\npush_pad entry" id="4627"]
4629 [fillcolor="cornflowerblue" label="4629 @ N12\npush_pad\nABS213" id="4629"]
4631 [label="4631 @ N13\npush_pad" id="4631"]
4632 [label="4632 @ N15\npush_pad" id="4632"]
4634 [fillcolor="green" label="4634 @ N12\npush_pad\nABS214" id="4634"]
4630 [label="4630 @ N14\npush_pad" id="4630"]
4635 [label="4635 @ N9\npush_pad exit" id="4635"]
4636 [label="4636 @ N264\ncpio_mkfile" id="4636"]
4637 [label="4637 @ N255\ncpio_mkfile" id="4637"]
4645 [fillcolor="green" label="4645 @ N236\ncpio_mkfile\nABS217" id="4645"]
4624 [label="4624 @ N258\ncpio_mkfile" id="4624"]
4638 [label="4638 @ N261\ncpio_mkfile" id="4638"]
4639 [label="4639 @ N270\ncpio_mkfile" id="4639"]
4677 [label="4677 @ N271\ncpio_mkfile" id="4677"]
4702 [label="4702 @ N275\ncpio_mkfile" id="4702"]
4708 [label="4708 @ N197\ncpio_mkfile exit" id="4708"]
4713 [label="4713 @ N367\ncpio_mkfile_line" id="4713"]
4718 [label="4718 @ N368\ncpio_mkfile_line" id="4718"]
4742 [label="4742 @ N369\ncpio_mkfile_line" id="4742"]
4748 [label="4748 @ N302\ncpio_mkfile_line exit" id="4748"]
4753 [label="4753 @ N504\nmain" id="4753"]
4758 [label="4758 @ N485\nmain" id="4758"]
4787 [label="4787 @ N483\nmain" id="4787"]
4793 [label="4793 @ N477\nmain" id="4793"]
4817 [label="4817 @ N489\nmain" id="4817"]
4827 [fillcolor="green" label="4827 @ N442\nmain\nABS221" id="4827"]
4801 [label="4801 @ N490\nmain" id="4801"]
4808 [label="4808 @ N491\nmain" id="4808"]
4767 [label="4767 @ N484\nmain" id="4767"]
4773 [label="4773 @ N486\nmain" id="4773"]
4778 [label="4778 @ N487\nmain" id="4778"]
4727 [label="4727 @ N370\ncpio_mkfile_line" id="4727"]
4733 [label="4733 @ N371\ncpio_mkfile_line" id="4733"]
4686 [label="4686 @ N276\ncpio_mkfile" id="4686"]
4693 [label="4693 @ N277\ncpio_mkfile" id="4693"]
4662 [label="4662 @ N272\ncpio_mkfile" id="4662"]
4668 [label="4668 @ N273\ncpio_mkfile" id="4668"]
4620 [label="4620 @ N255\ncpio_mkfile" id="4620"]
4643 [fillcolor="green" label="4643 @ N236\ncpio_mkfile\nABS216" id="4643"]
4589 [label="4589 @ N244\ncpio_mkfile" id="4589"]
4585 [label="4585 @ N241\ncpio_mkfile" id="4585"]
4529 [label="4529 @ N244\ncpio_mkfile" id="4529"]
4525 [label="4525 @ N241\ncpio_mkfile" id="4525"]
4518 [label="4518 @ N231\ncpio_mkfile" id="4518"]
4646 [label="4646 @ N232\ncpio_mkfile" id="4646"]
4515 [label="4515 @ N226\ncpio_mkfile" id="4515"]
4649 [label="4649 @ N227\ncpio_mkfile" id="4649"]
4503 [label="4503 @ N212\ncpio_mkfile" id="4503"]
4652 [label="4652 @ N213\ncpio_mkfile" id="4652"]
4481 [label="4481 @ N289\ncpio_replace_env" id="4481"]
4482 [label="4482 @ N291\ncpio_replace_env" id="4482"]
4484 [label="4484 @ N287\ncpio_replace_env" id="4484"]
4486 [label="4486 @ N293\ncpio_replace_env" id="4486"]
4487 [label="4487 @ N294\ncpio_replace_env" id="4487"]
4488 [label="4488 @ N295\ncpio_replace_env" id="4488"]
4490 [label="4490 @ N296\ncpio_replace_env" id="4490"]
4493 [label="4493 @ N298\ncpio_replace_env" id="4493"]
4494 [label="4494 @ N299\ncpio_replace_env" id="4494"]
4495 [label="4495 @ N300\ncpio_replace_env" id="4495"]
4497 [fillcolor="green" label="4497 @ N286\ncpio_replace_env\nABS204" id="4497"]
4489 [label="4489 @ N297\ncpio_replace_env" id="4489"]
3110 [label="3110 @ N324\ncpio_mkfile_line" id="3110"]
3111 [label="3111 @ N325\ncpio_mkfile_line" id="3111"]
3112 [label="3112 @ N326\ncpio_mkfile_line" id="3112"]
3114 [label="3114 @ N322\ncpio_mkfile_line" id="3114"]
3116 [label="3116 @ N329\ncpio_mkfile_line" id="3116"]
3117 [label="3117 @ N330\ncpio_mkfile_line" id="3117"]
3118 [label="3118 @ N331\ncpio_mkfile_line" id="3118"]
3119 [label="3119 @ N332\ncpio_mkfile_line" id="3119"]
3121 [label="3121 @ N334\ncpio_mkfile_line" id="3121"]
3120 [label="3120 @ N333\ncpio_mkfile_line" id="3120"]
3122 [label="3122 @ N335\ncpio_mkfile_line" id="3122"]
3124 [label="3124 @ N336\ncpio_mkfile_line" id="3124"]
3125 [label="3125 @ N340\ncpio_mkfile_line" id="3125"]
3126 [label="3126 @ N341\ncpio_mkfile_line" id="3126"]
3127 [label="3127 @ N342\ncpio_mkfile_line" id="3127"]
3128 [label="3128 @ N343\ncpio_mkfile_line" id="3128"]
3130 [fillcolor="cornflowerblue" label="3130 @ N345\ncpio_mkfile_line\nABS137: false" id="3130"]
3123 [label="3123 @ N337\ncpio_mkfile_line" id="3123"]
3131 [label="3131 @ N338\ncpio_mkfile_line" id="3131"]
3293 [label="3293 @ N368\ncpio_mkfile_line" id="3293"]
3313 [label="3313 @ N369\ncpio_mkfile_line" id="3313"]
3317 [label="3317 @ N302\ncpio_mkfile_line exit" id="3317"]
3321 [label="3321 @ N504\nmain" id="3321"]
3301 [label="3301 @ N370\ncpio_mkfile_line" id="3301"]
3305 [label="3305 @ N371\ncpio_mkfile_line" id="3305"]
3107 [label="3107 @ N316\ncpio_mkfile_line" id="3107"]
3291 [label="3291 @ N319\ncpio_mkfile_line" id="3291"]
2918 [label="2918 @ N499\nmain" id="2918"]
3327 [label="3327 @ N144\ncpio_mkpipe_line entry" id="3327"]
3328 [label="3328 @ N146\ncpio_mkpipe_line" id="3328"]
3329 [label="3329 @ N120\ncpio_mkgeneric_line entry" id="3329"]
3330 [label="3330 @ N129\ncpio_mkgeneric_line" id="3330"]
3331 [label="3331 @ N130\ncpio_mkgeneric_line" id="3331"]
3333 [label="3333 @ N127\ncpio_mkgeneric_line" id="3333"]
3334 [label="3334 @ N133\ncpio_mkgeneric_line" id="3334"]
3335 [label="3335 @ N103\ncpio_mkgeneric entry" id="3335"]
3336 [label="3336 @ N105\ncpio_mkgeneric" id="3336"]
3340 [label="3340 @ N106\ncpio_mkgeneric" id="3340"]
3341 [label="3341 @ N113\ncpio_mkgeneric" id="3341"]
3342 [label="3342 @ N114\ncpio_mkgeneric" id="3342"]
3343 [label="3343 @ N115\ncpio_mkgeneric" id="3343"]
3344 [label="3344 @ N41\npush_hdr entry" id="3344"]
3345 [label="3345 @ N42\npush_hdr" id="3345"]
3346 [label="3346 @ N43\npush_hdr" id="3346"]
3347 [label="3347 @ N40\npush_hdr exit" id="3347"]
3348 [label="3348 @ N116\ncpio_mkgeneric" id="3348"]
3349 [label="3349 @ N20\npush_rest entry" id="3349"]
3350 [label="3350 @ N22\npush_rest" id="3350"]
3351 [label="3351 @ N23\npush_rest" id="3351"]
3352 [label="3352 @ N25\npush_rest" id="3352"]
3353 [label="3353 @ N26\npush_rest" id="3353"]
3354 [label="3354 @ N27\npush_rest" id="3354"]
3356 [fillcolor="cornflowerblue" label="3356 @ N30\npush_rest\nABS147" id="3356"]
3358 [label="3358 @ N31\npush_rest" id="3358"]
3359 [label="3359 @ N33\npush_rest" id="3359"]
3361 [fillcolor="green" label="3361 @ N30\npush_rest\nABS148" id="3361"]
3357 [label="3357 @ N32\npush_rest" id="3357"]
3362 [label="3362 @ N19\npush_rest exit" id="3362"]
3363 [label="3363 @ N117\ncpio_mkgeneric" id="3363"]
3364 [label="3364 @ N102\ncpio_mkgeneric exit" id="3364"]
3365 [label="3365 @ N134\ncpio_mkgeneric_line" id="3365"]
3366 [label="3366 @ N135\ncpio_mkgeneric_line" id="3366"]
3369 [label="3369 @ N119\ncpio_mkgeneric_line exit" id="3369"]
3371 [label="3371 @ N147\ncpio_mkpipe_line" id="3371"]
3373 [label="3373 @ N143\ncpio_mkpipe_line exit" id="3373"]
3375 [label="3375 @ N501\nmain" id="3375"]
3377 [label="3377 @ N485\nmain" id="3377"]
3480 [label="3480 @ N483\nmain" id="3480"]
3491 [label="3491 @ N477\nmain" id="3491"]
3535 [label="3535 @ N489\nmain" id="3535"]
4180 [fillcolor="green" label="4180 @ N442\nmain\nABS184" id="4180"]
3507 [label="3507 @ N490\nmain" id="3507"]
3519 [label="3519 @ N491\nmain" id="3519"]
3444 [label="3444 @ N484\nmain" id="3444"]
3455 [label="3455 @ N486\nmain" id="3455"]
3464 [label="3464 @ N487\nmain" id="3464"]
3337 [label="3337 @ N107\ncpio_mkgeneric" id="3337"]
3332 [label="3332 @ N128\ncpio_mkgeneric_line" id="3332"]
3367 [label="3367 @ N131\ncpio_mkgeneric_line" id="3367"]
3368 [label="3368 @ N135\ncpio_mkgeneric_line" id="3368"]
3370 [label="3370 @ N119\ncpio_mkgeneric_line exit" id="3370"]
3372 [label="3372 @ N147\ncpio_mkpipe_line" id="3372"]
3374 [label="3374 @ N143\ncpio_mkpipe_line exit" id="3374"]
3376 [label="3376 @ N501\nmain" id="3376"]
2916 [label="2916 @ N496\nmain" id="2916"]
3380 [label="3380 @ N178\ncpio_mknod_line entry" id="3380"]
3381 [label="3381 @ N190\ncpio_mknod_line" id="3381"]
3382 [label="3382 @ N191\ncpio_mknod_line" id="3382"]
3384 [label="3384 @ N188\ncpio_mknod_line" id="3384"]
3385 [label="3385 @ N156\ncpio_mknod entry" id="3385"]
3386 [label="3386 @ N158\ncpio_mknod" id="3386"]
3388 [label="3388 @ N161\ncpio_mknod" id="3388"]
3391 [label="3391 @ N159\ncpio_mknod" id="3391"]
3395 [label="3395 @ N164\ncpio_mknod" id="3395"]
3396 [label="3396 @ N171\ncpio_mknod" id="3396"]
3397 [label="3397 @ N172\ncpio_mknod" id="3397"]
3398 [label="3398 @ N173\ncpio_mknod" id="3398"]
3399 [label="3399 @ N41\npush_hdr entry" id="3399"]
3400 [label="3400 @ N42\npush_hdr" id="3400"]
3401 [label="3401 @ N43\npush_hdr" id="3401"]
3402 [label="3402 @ N40\npush_hdr exit" id="3402"]
3403 [label="3403 @ N174\ncpio_mknod" id="3403"]
3404 [label="3404 @ N20\npush_rest entry" id="3404"]
3405 [label="3405 @ N22\npush_rest" id="3405"]
3406 [label="3406 @ N23\npush_rest" id="3406"]
3407 [label="3407 @ N25\npush_rest" id="3407"]
3408 [label="3408 @ N26\npush_rest" id="3408"]
3409 [label="3409 @ N27\npush_rest" id="3409"]
3411 [fillcolor="cornflowerblue" label="3411 @ N30\npush_rest\nABS149" id="3411"]
3413 [label="3413 @ N31\npush_rest" id="3413"]
3414 [label="3414 @ N33\npush_rest" id="3414"]
3416 [fillcolor="green" label="3416 @ N30\npush_rest\nABS150" id="3416"]
3412 [label="3412 @ N32\npush_rest" id="3412"]
3417 [label="3417 @ N19\npush_rest exit" id="3417"]
3418 [label="3418 @ N175\ncpio_mknod" id="3418"]
3419 [label="3419 @ N155\ncpio_mknod exit" id="3419"]
3420 [label="3420 @ N194\ncpio_mknod_line" id="3420"]
3421 [label="3421 @ N195\ncpio_mknod_line" id="3421"]
3424 [label="3424 @ N177\ncpio_mknod_line exit" id="3424"]
3426 [label="3426 @ N498\nmain" id="3426"]
3428 [label="3428 @ N485\nmain" id="3428"]
3482 [label="3482 @ N483\nmain" id="3482"]
3492 [label="3492 @ N477\nmain" id="3492"]
3537 [label="3537 @ N489\nmain" id="3537"]
4182 [fillcolor="green" label="4182 @ N442\nmain\nABS185" id="4182"]
3509 [label="3509 @ N490\nmain" id="3509"]
3520 [label="3520 @ N491\nmain" id="3520"]
3446 [label="3446 @ N484\nmain" id="3446"]
3456 [label="3456 @ N486\nmain" id="3456"]
3465 [label="3465 @ N487\nmain" id="3465"]
3392 [label="3392 @ N165\ncpio_mknod" id="3392"]
3387 [label="3387 @ N160\ncpio_mknod" id="3387"]
3383 [label="3383 @ N189\ncpio_mknod_line" id="3383"]
3422 [label="3422 @ N192\ncpio_mknod_line" id="3422"]
3423 [label="3423 @ N195\ncpio_mknod_line" id="3423"]
3425 [label="3425 @ N177\ncpio_mknod_line exit" id="3425"]
3427 [label="3427 @ N498\nmain" id="3427"]
2901 [label="2901 @ N469\nmain" id="2901"]
2903 [label="2903 @ N471\nmain" id="2903"]
2898 [label="2898 @ N464\nmain" id="2898"]
4831 [fillcolor="green" label="4831 @ N442\nmain\nABS223" id="4831"]
2894 [label="2894 @ N461\nmain" id="2894"]
4833 [fillcolor="green" label="4833 @ N442\nmain\nABS224" id="4833"]
2892 [label="2892 @ N455\nmain" id="2892"]
4834 [label="4834 @ N457\nmain" id="4834"]
4835 [label="4835 @ N444\nmain" id="4835"]
4837 [label="4837 @ N492\nmain" id="4837"]
4836 [label="4836 @ N493\nmain" id="4836"]
4838 [label="4838 @ N46\ncpio_trailer entry" id="4838"]
4839 [label="4839 @ N50\ncpio_trailer" id="4839"]
4840 [label="4840 @ N51\ncpio_trailer" id="4840"]
4841 [label="4841 @ N52\ncpio_trailer" id="4841"]
4842 [label="4842 @ N41\npush_hdr entry" id="4842"]
4843 [label="4843 @ N42\npush_hdr" id="4843"]
4844 [label="4844 @ N43\npush_hdr" id="4844"]
4845 [label="4845 @ N40\npush_hdr exit" id="4845"]
4846 [label="4846 @ N53\ncpio_trailer" id="4846"]
4847 [label="4847 @ N20\npush_rest entry" id="4847"]
4848 [label="4848 @ N22\npush_rest" id="4848"]
4849 [label="4849 @ N23\npush_rest" id="4849"]
4850 [label="4850 @ N25\npush_rest" id="4850"]
4851 [label="4851 @ N26\npush_rest" id="4851"]
4852 [label="4852 @ N27\npush_rest" id="4852"]
4854 [fillcolor="cornflowerblue" label="4854 @ N30\npush_rest\nABS225: false" id="4854"]
2889 [label="2889 @ N452\nmain" id="2889"]
4856 [fillcolor="green" label="4856 @ N442\nmain\nABS226" id="4856"]
2869 [label="2869 @ N433\nmain" id="2869"]
2872 [label="2872 @ N435\nmain" id="2872"]
2873 [label="2873 @ N436\nmain" id="2873"]
2874 [label="2874 @ N437\nmain" id="2874"]
2875 [label="2875 @ N438\nmain" id="2875"]
2876 [label="2876 @ N439\nmain" id="2876"]
2877 [label="2877 @ N375\nusage entry" id="2877"]
2878 [label="2878 @ N376\nusage" id="2878"]
2879 [label="2879 @ N377\nusage" id="2879"]
2880 [label="2880 @ N374\nusage exit" id="2880"]
2881 [label="2881 @ N440\nmain" id="2881"]
2866 [label="2866 @ N427\nmain" id="2866"]
2857 [label="2857 @ N422\nmain" id="2857"]
2859 [label="2859 @ N375\nusage entry" id="2859"]
2860 [label="2860 @ N376\nusage" id="2860"]
2861 [label="2861 @ N377\nusage" id="2861"]
2862 [label="2862 @ N374\nusage exit" id="2862"]
2863 [label="2863 @ N423\nmain" id="2863"]
1 -> 408 [label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; typedef __intptr_t intptr_t; typedef __socklen_t socklen_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int lockf(int __fd, int __cmd, __off_t __len); int fdatasync(int __fildes); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); int * __errno_location(); enum  {   _ISupper = 256,   _ISlower = 512,   _ISalpha = 1024,   _ISdigit = 2048,   _ISxdigit = 4096,   _ISspace = 8192,   _ISprint = 16384,   _ISgraph = 32768,   _ISblank = 1,   _IScntrl = 2,   _ISpunct = 4,   _ISalnum = 8 } ; const unsigned short int ** __ctype_b_loc(); const __int32_t ** __ctype_tolower_loc(); const __int32_t ** __ctype_toupper_loc(); int isalnum(int); int isalpha(int); int iscntrl(int); int isdigit(int); int islower(int); int isgraph(int); int isprint(int); int ispunct(int); int isspace(int); int isupper(int); int isxdigit(int); int tolower(int __c); int toupper(int __c); int isblank(int); int isascii(int __c); int toascii(int __c); int _toupper(int); int _tolower(int); int isalnum_l(int, __locale_t ); int isalpha_l(int, __locale_t ); int iscntrl_l(int, __locale_t ); int isdigit_l(int, __locale_t ); int islower_l(int, __locale_t ); int isgraph_l(int, __locale_t ); int isprint_l(int, __locale_t ); int ispunct_l(int, __locale_t ); int isspace_l(int, __locale_t ); int isupper_l(int, __locale_t ); int isxdigit_l(int, __locale_t ); int isblank_l(int, __locale_t ); int __tolower_l(int __c, __locale_t __l); int tolower_l(int __c, __locale_t __l); int __toupper_l(int __c, __locale_t __l); int toupper_l(int __c, __locale_t __l); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 1; unsigned int offset = 0U; unsigned int ino = 721; time_t default_mtime = 0L; struct file_handler {   const char *type;   int (*handler)(const char *line); } ; void push_string(const char *name); void push_pad(); void push_rest(const char *name); void push_hdr(const char *s); void cpio_trailer(); int cpio_mkslink(const char *name, const char *target, unsigned int mode, uid_t uid, gid_t gid); int cpio_mkslink_line(const char *line); int cpio_mkgeneric(const char *name, unsigned int mode, uid_t uid, gid_t gid); enum generic_types {   GT_DIR = 0,   GT_PIPE = 1,   GT_SOCK = 2 } ; struct generic_type {   const char *type;   mode_t mode; } ; struct generic_type generic_type_table[] = { [0] = { .type = 'dir', .mode = 16384 }, [1] = { .type = 'pipe', .mode = 4096 }, [2] = { .type = 'sock', .mode = 49152 } }; int cpio_mkgeneric_line(const char *line, enum generic_types gt); int cpio_mkdir_line(const char *line); int cpio_mkpipe_line(const char *line); int cpio_mksock_line(const char *line); int cpio_mknod(const char *name, unsigned int mode, uid_t uid, gid_t gid, char dev_type, unsigned int maj, unsigned int min); int cpio_mknod_line(const char *line); int cpio_mkfile(const char *name, const char *location, unsigned int mode, uid_t uid, gid_t gid, unsigned int nlinks); char * cpio_replace_env(char *new_location); int cpio_mkfile_line(const char *line); void usage(const char *prog); struct file_handler file_handler_table[] = { { .type = 'file', .handler = &cpio_mkfile_line }, { .type = 'nod', .handler = &cpio_mknod_line }, { .type = 'dir', .handler = &cpio_mkdir_line }, { .type = 'slink', .handler = &cpio_mkslink_line }, { .type = 'pipe', .handler = &cpio_mkpipe_line }, { .type = 'sock', .handler = &cpio_mksock_line }, { .type = (void *)0, .handler = (void *)0 } }; int main(int argc, char *argv[]); Function start dummy edge FILE *cpio_list; char line[8242]; char *args; char *type; int ec = 0; int line_nr = 0; const char *filename;" id="1 -> 408"]
408 -> 409 [label="Line 4340: default_mtime = time((void *)0);" id="408 -> 409"]
409 -> 2813 [label="Line 4341: while" id="409 -> 2813"]
2855 -> 2813 [style="dashed" weight="0" label="covered by"]
2813 -> 2814 [label="Line 4341:  int opt;" id="2813 -> 2814"]
2814 -> 2815 [label="Line 4342: opt = getopt(argc, argv, 't:h');" id="2814 -> 2815"]
2815 -> 2816 [label="Line 4343: char *invalid;" id="2815 -> 2816"]
2816 -> 2817 [label="Line 4345: [opt == -1]" id="2816 -> 2817"]
2816 -> 2818 [label="Line 4345: [!(opt == -1)]" id="2816 -> 2818"]
2818 -> 2819 [label="Line 4347: switch (opt)" id="2818 -> 2819"]
2819 -> 2820 [label="Line 4348: [opt == 't']" id="2819 -> 2820"]
2819 -> 2821 [label="Line 4348: [!(opt == 't')]" id="2819 -> 2821"]
2821 -> 2822 [label="Line 4357: [opt == 'h']" id="2821 -> 2822"]
2821 -> 2823 [label="Line 4357: [!(opt == 'h')]" id="2821 -> 2823"]
2823 -> 2825 [label="Line 4358: [!(opt == '?')]" id="2823 -> 2825"]
2823 -> 2828 [label="Line 4358: [opt == '?']" id="2823 -> 2828"]
2828 -> 2829 [label="Line 4359: usage(argv[0])" id="2828 -> 2829"]
2829 -> 2830 [label="Line 0: Function start dummy edge" id="2829 -> 2830"]
2830 -> 2831 [label="Line 4264: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2830 -> 2831"]
2831 -> 2832 [label="Line 0: default return" id="2831 -> 2832"]
2832 -> 2833 [label="Line 4359: Return edge from usage to main" id="2832 -> 2833"]
2833 -> 2834 [label="Line 4360: int __CPAchecker_TMP_0;" id="2833 -> 2834"]
2834 -> 2835 [label="Line 4360: [opt == 'h']" id="2834 -> 2835"]
2834 -> 2836 [label="Line 4360: [!(opt == 'h')]" id="2834 -> 2836"]
2836 -> 2839 [label="Line 4360: __CPAchecker_TMP_0 = 1;" id="2836 -> 2839"]
2835 -> 2839 [label="Line 4360: __CPAchecker_TMP_0 = 0;" id="2835 -> 2839"]
2825 -> 2853 [label="Line 0: " id="2825 -> 2853"]
2853 -> 2855 [label="Line 0: " id="2853 -> 2855"]
2822 -> 2828 [label="Line 4358: fall through" id="2822 -> 2828"]
2820 -> 2840 [label="Line 4349: default_mtime = strtol(optarg, &invalid, 10);" id="2820 -> 2840"]
2840 -> 2842 [label="Line 4350: [!((*optarg) == 0)]" id="2840 -> 2842"]
2840 -> 2845 [label="Line 4350: [(*optarg) == 0]" id="2840 -> 2845"]
2845 -> 2846 [label="Line 4351: fprintf(stderr, 'Invalid timestamp: %s\n', optarg);" id="2845 -> 2846"]
2846 -> 2847 [label="Line 4353: usage(argv[0])" id="2846 -> 2847"]
2847 -> 2848 [label="Line 0: Function start dummy edge" id="2847 -> 2848"]
2848 -> 2849 [label="Line 4264: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2848 -> 2849"]
2849 -> 2850 [label="Line 0: default return" id="2849 -> 2850"]
2850 -> 2851 [label="Line 4353: Return edge from usage to main" id="2850 -> 2851"]
2842 -> 2843 [label="Line 4350: [(*invalid) == 0]" id="2842 -> 2843"]
2842 -> 2845 [label="Line 4350: [!((*invalid) == 0)]" id="2842 -> 2845"]
2843 -> 2853 [label="Line 4356: break" id="2843 -> 2853"]
2817 -> 2856 [label="Line 4346: break" id="2817 -> 2856"]
2856 -> 2857 [label="Line 4364: [(argc - optind) != 1]" id="2856 -> 2857"]
2856 -> 2858 [label="Line 4364: [!((argc - optind) != 1)]" id="2856 -> 2858"]
2858 -> 2864 [label="Line 4368: filename = argv[optind]; int __CPAchecker_TMP_1;" id="2858 -> 2864"]
2864 -> 2865 [label="Line 4369: __CPAchecker_TMP_1 = strcmp(filename, '-');" id="2864 -> 2865"]
2865 -> 2866 [label="Line 4369: [__CPAchecker_TMP_1 == 0]" id="2865 -> 2866"]
2865 -> 2867 [label="Line 4369: [!(__CPAchecker_TMP_1 == 0)]" id="2865 -> 2867"]
2867 -> 2868 [label="Line 4371: cpio_list = fopen(filename, 'r');" id="2867 -> 2868"]
2868 -> 2869 [label="Line 4371: [cpio_list == 0]" id="2868 -> 2869"]
2868 -> 2870 [label="Line 4371: [!(cpio_list == 0)]" id="2868 -> 2870"]
2870 -> 2883 [label="Line 0: " id="2870 -> 2883"]
2883 -> 2885 [label="Line 4378: while" id="2883 -> 2885"]
3541 -> 2885 [style="dashed" weight="0" label="covered by"]
3543 -> 2885 [style="dashed" weight="0" label="covered by"]
3545 -> 2885 [style="dashed" weight="0" label="covered by"]
4180 -> 2885 [style="dashed" weight="0" label="covered by"]
4182 -> 2885 [style="dashed" weight="0" label="covered by"]
4184 -> 2885 [style="dashed" weight="0" label="covered by"]
4823 -> 2885 [style="dashed" weight="0" label="covered by"]
4825 -> 2885 [style="dashed" weight="0" label="covered by"]
4827 -> 2885 [style="dashed" weight="0" label="covered by"]
4829 -> 2885 [style="dashed" weight="0" label="covered by"]
4831 -> 2885 [style="dashed" weight="0" label="covered by"]
4833 -> 2885 [style="dashed" weight="0" label="covered by"]
4856 -> 2885 [style="dashed" weight="0" label="covered by"]
2885 -> 2886 [label="Line 4378:  int type_idx; size_t slen;" id="2885 -> 2886"]
2886 -> 2887 [label="Line 4380: slen = strlen(line);" id="2886 -> 2887"]
2887 -> 2888 [label="Line 4382: int __CPAchecker_TMP_4 = line_nr; line_nr = line_nr + 1; __CPAchecker_TMP_4;" id="2887 -> 2888"]
2888 -> 2889 [label="Line 4384: ['#' == (*line)]" id="2888 -> 2889"]
2888 -> 2890 [label="Line 4384: [!('#' == (*line))]" id="2888 -> 2890"]
2890 -> 2891 [label="Line 4389: type = strtok(line, ' \t');" id="2890 -> 2891"]
2891 -> 2892 [label="Line 4389: [type == 0]" id="2891 -> 2892"]
2891 -> 2893 [label="Line 4389: [!(type == 0)]" id="2891 -> 2893"]
2893 -> 2894 [label="Line 4397: ['\xa' == (*type)]" id="2893 -> 2894"]
2893 -> 2895 [label="Line 4397: [!('\xa' == (*type))]" id="2893 -> 2895"]
2895 -> 2896 [label="Line 4402: size_t __CPAchecker_TMP_5;" id="2895 -> 2896"]
2896 -> 2897 [label="Line 4402: __CPAchecker_TMP_5 = strlen(type);" id="2896 -> 2897"]
2897 -> 2898 [label="Line 4402: [slen == __CPAchecker_TMP_5]" id="2897 -> 2898"]
2897 -> 2899 [label="Line 4402: [!(slen == __CPAchecker_TMP_5)]" id="2897 -> 2899"]
2899 -> 2900 [label="Line 4407: args = strtok((void *)0, '\n');" id="2899 -> 2900"]
2900 -> 2901 [label="Line 4407: [args == 0]" id="2900 -> 2901"]
2900 -> 2905 [label="Line 4407: [!(args == 0)]" id="2900 -> 2905"]
2905 -> 2907 [label="Line 4414: for type_idx = 0;" id="2905 -> 2907"]
2915 -> 2907 [style="dashed" weight="0" label="covered by"]
2907 -> 2909 [label="Line 4414: [!(((file_handler_table[type_idx]).type) == 0)]" id="2907 -> 2909"]
2907 -> 3494 [label="Line 4414: [((file_handler_table[type_idx]).type) == 0]" id="2907 -> 3494"]
3494 -> 3511 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3494 -> 3511"]
3494 -> 3539 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3494 -> 3539"]
3539 -> 4184 [label="Line 0: " id="3539 -> 4184"]
3511 -> 3521 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3511 -> 3521"]
3521 -> 3539 [label="Line 0: " id="3521 -> 3539"]
2909 -> 2910 [label="Line 4415: int rc; int __CPAchecker_TMP_6;" id="2909 -> 2910"]
2910 -> 2911 [label="Line 4416: __CPAchecker_TMP_6 = strcmp(line, (file_handler_table[type_idx]).type);" id="2910 -> 2911"]
2911 -> 2912 [label="Line 4416: [__CPAchecker_TMP_6 == 0]" id="2911 -> 2912"]
2911 -> 2913 [label="Line 4416: [!(__CPAchecker_TMP_6 == 0)]" id="2911 -> 2913"]
2913 -> 2915 [label="Line 4414:  type_idx = type_idx + 1;" id="2913 -> 2915"]
2912 -> 2916 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mknod_line)]" id="2912 -> 2916"]
2912 -> 2917 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mknod_line))]" id="2912 -> 2917"]
2917 -> 2918 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line)]" id="2917 -> 2918"]
2917 -> 2919 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line))]" id="2917 -> 2919"]
2919 -> 2920 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line)]" id="2919 -> 2920"]
2919 -> 2921 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line))]" id="2919 -> 2921"]
2921 -> 2922 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line)]" id="2921 -> 2922"]
2921 -> 2923 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line))]" id="2921 -> 2923"]
2923 -> 2924 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line)]" id="2923 -> 2924"]
2923 -> 2925 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line))]" id="2923 -> 2925"]
2925 -> 2926 [label="Line 4417: [((file_handler_table[type_idx]).handler) == (&cpio_mksock_line)]" id="2925 -> 2926"]
2925 -> 2927 [label="Line 4417: [!(((file_handler_table[type_idx]).handler) == (&cpio_mksock_line))]" id="2925 -> 2927"]
2927 -> 3430 [label="Line 4417: rc = ((file_handler_table[type_idx]).handler)(args);" id="2927 -> 3430"]
3430 -> 3448 [label="Line 4417: [!(rc == 0)]" id="3430 -> 3448"]
3430 -> 3484 [label="Line 4417: [rc == 0]" id="3430 -> 3484"]
3484 -> 3494 [label="Line 4421: break" id="3484 -> 3494"]
3448 -> 3457 [label="Line 4418: ec = rc;" id="3448 -> 3457"]
3457 -> 3466 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3457 -> 3466"]
3466 -> 3484 [label="Line 0: " id="3466 -> 3484"]
2926 -> 2929 [label="Line 4417: cpio_mksock_line(args)" id="2926 -> 2929"]
2929 -> 2930 [label="Line 4023: Function start dummy edge int __CPAchecker_TMP_0;" id="2929 -> 2930"]
2930 -> 2931 [label="Line 4023: cpio_mkgeneric_line(line, 2)" id="2930 -> 2931"]
2931 -> 2932 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="2931 -> 2932"]
2932 -> 2933 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="2932 -> 2933"]
2933 -> 2934 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="2933 -> 2934"]
2933 -> 2935 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="2933 -> 2935"]
2935 -> 2936 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="2935 -> 2936"]
2936 -> 2937 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="2936 -> 2937"]
2937 -> 2938 [label="Line 3942: Function start dummy edge char s[256];" id="2937 -> 2938"]
2938 -> 2939 [label="Line 3944: [(name[0]) == '/']" id="2938 -> 2939"]
2938 -> 2942 [label="Line 3944: [!((name[0]) == '/')]" id="2938 -> 2942"]
2942 -> 2943 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="2942 -> 2943"]
2943 -> 2944 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="2943 -> 2944"]
2944 -> 2945 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="2944 -> 2945"]
2945 -> 2946 [label="Line 3962: push_hdr(s)" id="2945 -> 2946"]
2946 -> 2947 [label="Line 0: Function start dummy edge" id="2946 -> 2947"]
2947 -> 2948 [label="Line 3856: fputs(s, stdout);" id="2947 -> 2948"]
2948 -> 2949 [label="Line 3857: offset = offset + 110; default return" id="2948 -> 2949"]
2949 -> 2950 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="2949 -> 2950"]
2950 -> 2951 [label="Line 3963: push_rest(name)" id="2950 -> 2951"]
2951 -> 2952 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="2951 -> 2952"]
2952 -> 2953 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="2952 -> 2953"]
2953 -> 2954 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="2953 -> 2954"]
2954 -> 2955 [label="Line 3842: fputs(name, stdout);" id="2954 -> 2955"]
2955 -> 2956 [label="Line 3843: putchar(0);" id="2955 -> 2956"]
2956 -> 2958 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="2956 -> 2958"]
2963 -> 2958 [style="dashed" weight="0" label="covered by"]
2958 -> 2959 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="2958 -> 2959"]
2958 -> 2960 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="2958 -> 2960"]
2960 -> 2961 [label="Line 3848: putchar(0);" id="2960 -> 2961"]
2961 -> 2963 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="2961 -> 2963"]
2959 -> 2964 [label="Line 0: default return" id="2959 -> 2964"]
2964 -> 2965 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="2964 -> 2965"]
2965 -> 2966 [label="Line 3964: return 0;" id="2965 -> 2966"]
2966 -> 2967 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="2966 -> 2967"]
2967 -> 2968 [label="Line 4008: Label: fail" id="2967 -> 2968"]
2968 -> 2971 [label="Line 4009: return rc;" id="2968 -> 2971"]
2971 -> 2973 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="2971 -> 2973"]
2973 -> 2975 [label="Line 4023: return __CPAchecker_TMP_0;" id="2973 -> 2975"]
2975 -> 2977 [label="Line 4417: Return edge from cpio_mksock_line to main" id="2975 -> 2977"]
2977 -> 2979 [label="Line 4417: skip" id="2977 -> 2979"]
2979 -> 3432 [label="Line 4417: [!(rc == 0)]" id="2979 -> 3432"]
2979 -> 3468 [label="Line 4417: [rc == 0]" id="2979 -> 3468"]
3468 -> 3485 [label="Line 4421: break" id="3468 -> 3485"]
3485 -> 3495 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3485 -> 3495"]
3485 -> 3523 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3485 -> 3523"]
3523 -> 3541 [label="Line 0: " id="3523 -> 3541"]
3495 -> 3513 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3495 -> 3513"]
3513 -> 3523 [label="Line 0: " id="3513 -> 3523"]
3432 -> 3449 [label="Line 4418: ec = rc;" id="3432 -> 3449"]
3449 -> 3458 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3449 -> 3458"]
3458 -> 3468 [label="Line 0: " id="3458 -> 3468"]
2939 -> 2942 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="2939 -> 2942"]
2934 -> 2969 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="2934 -> 2969"]
2969 -> 2970 [label="Line 4004: Goto: fail" id="2969 -> 2970"]
2970 -> 2972 [label="Line 4009: return rc;" id="2970 -> 2972"]
2972 -> 2974 [label="Line 4023: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="2972 -> 2974"]
2974 -> 2976 [label="Line 4023: return __CPAchecker_TMP_0;" id="2974 -> 2976"]
2976 -> 2978 [label="Line 4417: Return edge from cpio_mksock_line to main" id="2976 -> 2978"]
2978 -> 3430 [label="Line 4417: skip" id="2978 -> 3430"]
2924 -> 2982 [label="Line 4417: cpio_mkdir_line(args)" id="2924 -> 2982"]
2982 -> 2983 [label="Line 4014: Function start dummy edge int __CPAchecker_TMP_0;" id="2982 -> 2983"]
2983 -> 2984 [label="Line 4014: cpio_mkgeneric_line(line, 0)" id="2983 -> 2984"]
2984 -> 2985 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="2984 -> 2985"]
2985 -> 2986 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="2985 -> 2986"]
2986 -> 2987 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="2986 -> 2987"]
2986 -> 2988 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="2986 -> 2988"]
2988 -> 2989 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="2988 -> 2989"]
2989 -> 2990 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="2989 -> 2990"]
2990 -> 2991 [label="Line 3942: Function start dummy edge char s[256];" id="2990 -> 2991"]
2991 -> 2992 [label="Line 3944: [(name[0]) == '/']" id="2991 -> 2992"]
2991 -> 2995 [label="Line 3944: [!((name[0]) == '/')]" id="2991 -> 2995"]
2995 -> 2996 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="2995 -> 2996"]
2996 -> 2997 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="2996 -> 2997"]
2997 -> 2998 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="2997 -> 2998"]
2998 -> 2999 [label="Line 3962: push_hdr(s)" id="2998 -> 2999"]
2999 -> 3000 [label="Line 0: Function start dummy edge" id="2999 -> 3000"]
3000 -> 3001 [label="Line 3856: fputs(s, stdout);" id="3000 -> 3001"]
3001 -> 3002 [label="Line 3857: offset = offset + 110; default return" id="3001 -> 3002"]
3002 -> 3003 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="3002 -> 3003"]
3003 -> 3004 [label="Line 3963: push_rest(name)" id="3003 -> 3004"]
3004 -> 3005 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="3004 -> 3005"]
3005 -> 3006 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="3005 -> 3006"]
3006 -> 3007 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3006 -> 3007"]
3007 -> 3008 [label="Line 3842: fputs(name, stdout);" id="3007 -> 3008"]
3008 -> 3009 [label="Line 3843: putchar(0);" id="3008 -> 3009"]
3009 -> 3011 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3009 -> 3011"]
3016 -> 3011 [style="dashed" weight="0" label="covered by"]
3011 -> 3012 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="3011 -> 3012"]
3011 -> 3013 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="3011 -> 3013"]
3013 -> 3014 [label="Line 3848: putchar(0);" id="3013 -> 3014"]
3014 -> 3016 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3014 -> 3016"]
3012 -> 3017 [label="Line 0: default return" id="3012 -> 3017"]
3017 -> 3018 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="3017 -> 3018"]
3018 -> 3019 [label="Line 3964: return 0;" id="3018 -> 3019"]
3019 -> 3020 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="3019 -> 3020"]
3020 -> 3021 [label="Line 4008: Label: fail" id="3020 -> 3021"]
3021 -> 3024 [label="Line 4009: return rc;" id="3021 -> 3024"]
3024 -> 3026 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="3024 -> 3026"]
3026 -> 3028 [label="Line 4014: return __CPAchecker_TMP_0;" id="3026 -> 3028"]
3028 -> 3030 [label="Line 4417: Return edge from cpio_mkdir_line to main" id="3028 -> 3030"]
3030 -> 3032 [label="Line 4417: skip" id="3030 -> 3032"]
3032 -> 3434 [label="Line 4417: [!(rc == 0)]" id="3032 -> 3434"]
3032 -> 3470 [label="Line 4417: [rc == 0]" id="3032 -> 3470"]
3470 -> 3486 [label="Line 4421: break" id="3470 -> 3486"]
3486 -> 3497 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3486 -> 3497"]
3486 -> 3525 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3486 -> 3525"]
3525 -> 3543 [label="Line 0: " id="3525 -> 3543"]
3497 -> 3514 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3497 -> 3514"]
3514 -> 3525 [label="Line 0: " id="3514 -> 3525"]
3434 -> 3450 [label="Line 4418: ec = rc;" id="3434 -> 3450"]
3450 -> 3459 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3450 -> 3459"]
3459 -> 3470 [label="Line 0: " id="3459 -> 3470"]
2992 -> 2995 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="2992 -> 2995"]
2987 -> 3022 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="2987 -> 3022"]
3022 -> 3023 [label="Line 4004: Goto: fail" id="3022 -> 3023"]
3023 -> 3025 [label="Line 4009: return rc;" id="3023 -> 3025"]
3025 -> 3027 [label="Line 4014: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="3025 -> 3027"]
3027 -> 3029 [label="Line 4014: return __CPAchecker_TMP_0;" id="3027 -> 3029"]
3029 -> 3031 [label="Line 4417: Return edge from cpio_mkdir_line to main" id="3029 -> 3031"]
3031 -> 3430 [label="Line 4417: skip" id="3031 -> 3430"]
2922 -> 3035 [label="Line 4417: cpio_mkslink_line(args)" id="2922 -> 3035"]
3035 -> 3036 [label="Line 3923: Function start dummy edge char name[4097]; char target[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3035 -> 3036"]
3036 -> 3037 [label="Line 3930: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d', name, target, &mode, &uid, &gid);" id="3036 -> 3037"]
3037 -> 3038 [label="Line 3930: [5 != __CPAchecker_TMP_0]" id="3037 -> 3038"]
3037 -> 3039 [label="Line 3930: [!(5 != __CPAchecker_TMP_0)]" id="3037 -> 3039"]
3039 -> 3040 [label="Line 3934: cpio_mkslink(name, target, mode, uid, gid)" id="3039 -> 3040"]
3040 -> 3041 [label="Line 3893: Function start dummy edge char s[256];" id="3040 -> 3041"]
3041 -> 3042 [label="Line 3895: [(name[0]) == '/']" id="3041 -> 3042"]
3041 -> 3045 [label="Line 3895: [!((name[0]) == '/')]" id="3041 -> 3045"]
3045 -> 3046 [label="Line 3897: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3045 -> 3046"]
3046 -> 3047 [label="Line 3897: __CPAchecker_TMP_2 = strlen(target);" id="3046 -> 3047"]
3047 -> 3048 [label="Line 3897: size_t __CPAchecker_TMP_3;" id="3047 -> 3048"]
3048 -> 3049 [label="Line 3897: __CPAchecker_TMP_3 = strlen(name);" id="3048 -> 3049"]
3049 -> 3050 [label="Line 3897: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, 40960 | mode, (long)uid, (long)gid, 1, (long)default_mtime, ((unsigned)__CPAchecker_TMP_2) + 1, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_3) + 1, 0);" id="3049 -> 3050"]
3050 -> 3051 [label="Line 3913: push_hdr(s)" id="3050 -> 3051"]
3051 -> 3052 [label="Line 0: Function start dummy edge" id="3051 -> 3052"]
3052 -> 3053 [label="Line 3856: fputs(s, stdout);" id="3052 -> 3053"]
3053 -> 3054 [label="Line 3857: offset = offset + 110; default return" id="3053 -> 3054"]
3054 -> 3055 [label="Line 3913: Return edge from push_hdr to cpio_mkslink" id="3054 -> 3055"]
3055 -> 3056 [label="Line 3914: push_string(name)" id="3055 -> 3056"]
3056 -> 3057 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="3056 -> 3057"]
3057 -> 3058 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="3057 -> 3058"]
3058 -> 3059 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="3058 -> 3059"]
3059 -> 3060 [label="Line 3824: fputs(name, stdout);" id="3059 -> 3060"]
3060 -> 3061 [label="Line 3825: putchar(0);" id="3060 -> 3061"]
3061 -> 3062 [label="Line 3826: offset = offset + name_len; default return" id="3061 -> 3062"]
3062 -> 3063 [label="Line 3914: Return edge from push_string to cpio_mkslink" id="3062 -> 3063"]
3063 -> 3064 [label="Line 3915: push_pad()" id="3063 -> 3064"]
3064 -> 3066 [label="Line 3831: Function start dummy edge while" id="3064 -> 3066"]
3071 -> 3066 [style="dashed" weight="0" label="covered by"]
3066 -> 3067 [label="Line 3831: [(offset & 3) == 0]" id="3066 -> 3067"]
3066 -> 3068 [label="Line 3831: [!((offset & 3) == 0)]" id="3066 -> 3068"]
3068 -> 3069 [label="Line 3832: putchar(0);" id="3068 -> 3069"]
3069 -> 3071 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="3069 -> 3071"]
3067 -> 3072 [label="Line 0: default return" id="3067 -> 3072"]
3072 -> 3073 [label="Line 3915: Return edge from push_pad to cpio_mkslink" id="3072 -> 3073"]
3073 -> 3074 [label="Line 3916: push_string(target)" id="3073 -> 3074"]
3074 -> 3075 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="3074 -> 3075"]
3075 -> 3076 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="3075 -> 3076"]
3076 -> 3077 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="3076 -> 3077"]
3077 -> 3078 [label="Line 3824: fputs(name, stdout);" id="3077 -> 3078"]
3078 -> 3079 [label="Line 3825: putchar(0);" id="3078 -> 3079"]
3079 -> 3080 [label="Line 3826: offset = offset + name_len; default return" id="3079 -> 3080"]
3080 -> 3081 [label="Line 3916: Return edge from push_string to cpio_mkslink" id="3080 -> 3081"]
3081 -> 3082 [label="Line 3917: push_pad()" id="3081 -> 3082"]
3082 -> 3084 [label="Line 3831: Function start dummy edge while" id="3082 -> 3084"]
3089 -> 3084 [style="dashed" weight="0" label="covered by"]
3084 -> 3085 [label="Line 3831: [(offset & 3) == 0]" id="3084 -> 3085"]
3084 -> 3086 [label="Line 3831: [!((offset & 3) == 0)]" id="3084 -> 3086"]
3086 -> 3087 [label="Line 3832: putchar(0);" id="3086 -> 3087"]
3087 -> 3089 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="3087 -> 3089"]
3085 -> 3090 [label="Line 0: default return" id="3085 -> 3090"]
3090 -> 3091 [label="Line 3917: Return edge from push_pad to cpio_mkslink" id="3090 -> 3091"]
3091 -> 3092 [label="Line 3918: return 0;" id="3091 -> 3092"]
3092 -> 3093 [label="Line 3934: Return edge from cpio_mkslink to cpio_mkslink_line" id="3092 -> 3093"]
3093 -> 3094 [label="Line 3935: Label: fail" id="3093 -> 3094"]
3094 -> 3097 [label="Line 3936: return rc;" id="3094 -> 3097"]
3097 -> 3099 [label="Line 4417: Return edge from cpio_mkslink_line to main" id="3097 -> 3099"]
3099 -> 3101 [label="Line 4417: skip" id="3099 -> 3101"]
3101 -> 3436 [label="Line 4417: [!(rc == 0)]" id="3101 -> 3436"]
3101 -> 3472 [label="Line 4417: [rc == 0]" id="3101 -> 3472"]
3472 -> 3487 [label="Line 4421: break" id="3472 -> 3487"]
3487 -> 3499 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3487 -> 3499"]
3487 -> 3527 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3487 -> 3527"]
3527 -> 3545 [label="Line 0: " id="3527 -> 3545"]
3499 -> 3515 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3499 -> 3515"]
3515 -> 3527 [label="Line 0: " id="3515 -> 3527"]
3436 -> 3451 [label="Line 4418: ec = rc;" id="3436 -> 3451"]
3451 -> 3460 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3451 -> 3460"]
3460 -> 3472 [label="Line 0: " id="3460 -> 3472"]
3042 -> 3045 [label="Line 3896: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3042 -> 3045"]
3038 -> 3095 [label="Line 3931: fprintf(stderr, 'Unrecognized dir format '%s'', line);" id="3038 -> 3095"]
3095 -> 3096 [label="Line 3932: Goto: fail" id="3095 -> 3096"]
3096 -> 3098 [label="Line 3936: return rc;" id="3096 -> 3098"]
3098 -> 3100 [label="Line 4417: Return edge from cpio_mkslink_line to main" id="3098 -> 3100"]
3100 -> 3430 [label="Line 4417: skip" id="3100 -> 3430"]
2920 -> 3104 [label="Line 4417: cpio_mkfile_line(args)" id="2920 -> 3104"]
3104 -> 3105 [label="Line 4202: Function start dummy edge char name[4097]; char *dname = (void *)0; char location[4097]; unsigned int mode; int uid; int gid; int nlinks = 1; int end = 0; int dname_len = 0; int rc = -1; int __CPAchecker_TMP_0;" id="3104 -> 3105"]
3105 -> 3106 [label="Line 4212: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d %n', name, location, &mode, &uid, &gid, &end);" id="3105 -> 3106"]
3106 -> 3107 [label="Line 4212: [5 > __CPAchecker_TMP_0]" id="3106 -> 3107"]
3106 -> 3108 [label="Line 4212: [!(5 > __CPAchecker_TMP_0)]" id="3106 -> 3108"]
3108 -> 3110 [label="Line 4218: [!(end == 0)]" id="3108 -> 3110"]
3108 -> 3115 [label="Line 4218: [end == 0]" id="3108 -> 3115"]
3115 -> 3133 [label="Line 4247: dname = name; " id="3115 -> 3133"]
3133 -> 3134 [label="Line 4249: char *__CPAchecker_TMP_9;" id="3133 -> 3134"]
3134 -> 3135 [label="Line 4249: cpio_replace_env(location)" id="3134 -> 3135"]
3135 -> 4478 [label="Line 4185: Function start dummy edge char expanded[4097]; char *start; char *end; char *var; while" id="3135 -> 4478"]
4497 -> 4478 [style="dashed" weight="0" label="covered by"]
4478 -> 4479 [label="Line 4188: start = strstr(new_location, '${');" id="4478 -> 4479"]
4479 -> 4481 [label="Line 4188: [!(start == 0)]" id="4479 -> 4481"]
4479 -> 4485 [label="Line 4188: [start == 0]" id="4479 -> 4485"]
4485 -> 4498 [label="Line 4197: return new_location;" id="4485 -> 4498"]
4498 -> 4499 [label="Line 4249: Return edge from cpio_replace_env to cpio_mkfile_line" id="4498 -> 4499"]
4499 -> 4500 [label="Line 4249: cpio_mkfile(dname, __CPAchecker_TMP_9, mode, uid, gid, nlinks)" id="4499 -> 4500"]
4500 -> 4501 [label="Line 4085: Function start dummy edge char s[256]; char *filebuf = (void *)0; struct stat buf; long size; int file = -1; int retval; int rc = -1; int namesize; unsigned int i; mode = mode | 32768;" id="4500 -> 4501"]
4501 -> 4502 [label="Line 4097: file = open(location, 0);" id="4501 -> 4502"]
4502 -> 4503 [label="Line 4102: [file < 0]" id="4502 -> 4503"]
4502 -> 4504 [label="Line 4102: [!(file < 0)]" id="4502 -> 4504"]
4504 -> 4505 [label="Line 4107: retval = fstat(file, &buf);" id="4504 -> 4505"]
4505 -> 4506 [label="Line 4108: [retval == 0]" id="4505 -> 4506"]
4505 -> 4507 [label="Line 4108: [!(retval == 0)]" id="4505 -> 4507"]
4507 -> 4508 [label="Line 4109: fprintf(stderr, 'File %s could not be stat()'ed\n', location);" id="4507 -> 4508"]
4508 -> 4654 [label="Line 4110: Goto: l1" id="4508 -> 4654"]
4654 -> 4664 [label="Line 4173: [!(filebuf == 0)]" id="4654 -> 4664"]
4654 -> 4679 [label="Line 4173: [filebuf == 0]" id="4654 -> 4679"]
4679 -> 4688 [label="Line 4179: [file >= 0]" id="4679 -> 4688"]
4679 -> 4704 [label="Line 4179: [!(file >= 0)]" id="4679 -> 4704"]
4704 -> 4709 [label="Line 4180: return rc;" id="4704 -> 4709"]
4709 -> 4714 [label="Line 4249: Return edge from cpio_mkfile to cpio_mkfile_line" id="4709 -> 4714"]
4714 -> 4719 [label="Line 4251: Label: fail" id="4714 -> 4719"]
4719 -> 4729 [label="Line 4253: [!(dname_len == 0)]" id="4719 -> 4729"]
4719 -> 4744 [label="Line 4253: [dname_len == 0]" id="4719 -> 4744"]
4744 -> 4749 [label="Line 4259: return rc;" id="4744 -> 4749"]
4749 -> 4754 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="4749 -> 4754"]
4754 -> 4759 [label="Line 4417: skip" id="4754 -> 4759"]
4759 -> 4769 [label="Line 4417: [!(rc == 0)]" id="4759 -> 4769"]
4759 -> 4789 [label="Line 4417: [rc == 0]" id="4759 -> 4789"]
4789 -> 4794 [label="Line 4421: break" id="4789 -> 4794"]
4794 -> 4803 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="4794 -> 4803"]
4794 -> 4819 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="4794 -> 4819"]
4819 -> 4829 [label="Line 0: " id="4819 -> 4829"]
4803 -> 4809 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="4803 -> 4809"]
4809 -> 4819 [label="Line 0: " id="4809 -> 4819"]
4769 -> 4774 [label="Line 4418: ec = rc;" id="4769 -> 4774"]
4774 -> 4779 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="4774 -> 4779"]
4779 -> 4789 [label="Line 0: " id="4779 -> 4789"]
4729 -> 4734 [label="Line 4255: free(dname);" id="4729 -> 4734"]
4734 -> 4744 [label="Line 4257: Num = Num + 1; " id="4734 -> 4744"]
4688 -> 4694 [label="Line 4179: close(file);" id="4688 -> 4694"]
4694 -> 4704 [label="Line 0: " id="4694 -> 4704"]
4664 -> 4669 [label="Line 4175: free(filebuf);" id="4664 -> 4669"]
4669 -> 4679 [label="Line 4177: Num = Num + 1; " id="4669 -> 4679"]
4506 -> 4510 [label="Line 4113: filebuf = malloc(buf.st_size);" id="4506 -> 4510"]
4510 -> 4511 [label="Line 4115: Num = Num - 1;" id="4510 -> 4511"]
4511 -> 4512 [label="Line 4116: [Num >= 0]" id="4511 -> 4512"]
4511 -> 4513 [label="Line 4116: [!(Num >= 0)]" id="4511 -> 4513"]
4512 -> 4514 [label="Line 4116: 0;" id="4512 -> 4514"]
4514 -> 4515 [label="Line 4118: [filebuf == 0]" id="4514 -> 4515"]
4514 -> 4516 [label="Line 4118: [!(filebuf == 0)]" id="4514 -> 4516"]
4516 -> 4517 [label="Line 4123: retval = read(file, filebuf, buf.st_size);" id="4516 -> 4517"]
4517 -> 4518 [label="Line 4124: [retval < 0]" id="4517 -> 4518"]
4517 -> 4519 [label="Line 4124: [!(retval < 0)]" id="4517 -> 4519"]
4519 -> 4521 [label="Line 4129: size = 0; for i = 1;" id="4519 -> 4521"]
4521 -> 4522 [label="Line 4130: [i <= nlinks]" id="4521 -> 4522"]
4521 -> 4523 [label="Line 4130: [!(i <= nlinks)]" id="4521 -> 4523"]
4523 -> 4524 [label="Line 4168: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4523 -> 4524"]
4524 -> 4656 [label="Line 4173: [!(filebuf == 0)]" id="4524 -> 4656"]
4524 -> 4671 [label="Line 4173: [filebuf == 0]" id="4524 -> 4671"]
4671 -> 4680 [label="Line 4179: [file >= 0]" id="4671 -> 4680"]
4671 -> 4696 [label="Line 4179: [!(file >= 0)]" id="4671 -> 4696"]
4696 -> 4705 [label="Line 4180: return rc;" id="4696 -> 4705"]
4705 -> 4710 [label="Line 4249: Return edge from cpio_mkfile to cpio_mkfile_line" id="4705 -> 4710"]
4710 -> 4715 [label="Line 4251: Label: fail" id="4710 -> 4715"]
4715 -> 4721 [label="Line 4253: [!(dname_len == 0)]" id="4715 -> 4721"]
4715 -> 4736 [label="Line 4253: [dname_len == 0]" id="4715 -> 4736"]
4736 -> 4745 [label="Line 4259: return rc;" id="4736 -> 4745"]
4745 -> 4750 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="4745 -> 4750"]
4750 -> 4755 [label="Line 4417: skip" id="4750 -> 4755"]
4755 -> 4761 [label="Line 4417: [!(rc == 0)]" id="4755 -> 4761"]
4755 -> 4781 [label="Line 4417: [rc == 0]" id="4755 -> 4781"]
4781 -> 4790 [label="Line 4421: break" id="4781 -> 4790"]
4790 -> 4795 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="4790 -> 4795"]
4790 -> 4811 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="4790 -> 4811"]
4811 -> 4821 [label="Line 0: " id="4811 -> 4821"]
4795 -> 4805 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="4795 -> 4805"]
4805 -> 4811 [label="Line 0: " id="4805 -> 4811"]
4761 -> 4770 [label="Line 4418: ec = rc;" id="4761 -> 4770"]
4770 -> 4775 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="4770 -> 4775"]
4775 -> 4781 [label="Line 0: " id="4775 -> 4781"]
4721 -> 4730 [label="Line 4255: free(dname);" id="4721 -> 4730"]
4730 -> 4736 [label="Line 4257: Num = Num + 1; " id="4730 -> 4736"]
4680 -> 4690 [label="Line 4179: close(file);" id="4680 -> 4690"]
4690 -> 4696 [label="Line 0: " id="4690 -> 4696"]
4656 -> 4665 [label="Line 4175: free(filebuf);" id="4656 -> 4665"]
4665 -> 4671 [label="Line 4177: Num = Num + 1; " id="4665 -> 4671"]
4522 -> 4525 [label="Line 4132: [i == nlinks]" id="4522 -> 4525"]
4522 -> 4528 [label="Line 4132: [!(i == nlinks)]" id="4522 -> 4528"]
4528 -> 4529 [label="Line 4134: [(name[0]) == '/']" id="4528 -> 4529"]
4528 -> 4532 [label="Line 4134: [!((name[0]) == '/')]" id="4528 -> 4532"]
4532 -> 4533 [label="Line 4136: size_t __CPAchecker_TMP_2;" id="4532 -> 4533"]
4533 -> 4534 [label="Line 4136: __CPAchecker_TMP_2 = strlen(name);" id="4533 -> 4534"]
4534 -> 4535 [label="Line 4136: namesize = __CPAchecker_TMP_2 + 1;" id="4534 -> 4535"]
4535 -> 4536 [label="Line 4137: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4535 -> 4536"]
4536 -> 4537 [label="Line 4153: push_hdr(s)" id="4536 -> 4537"]
4537 -> 4538 [label="Line 0: Function start dummy edge" id="4537 -> 4538"]
4538 -> 4539 [label="Line 3856: fputs(s, stdout);" id="4538 -> 4539"]
4539 -> 4540 [label="Line 3857: offset = offset + 110; default return" id="4539 -> 4540"]
4540 -> 4541 [label="Line 4153: Return edge from push_hdr to cpio_mkfile" id="4540 -> 4541"]
4541 -> 4542 [label="Line 4154: push_string(name)" id="4541 -> 4542"]
4542 -> 4543 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4542 -> 4543"]
4543 -> 4544 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4543 -> 4544"]
4544 -> 4545 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4544 -> 4545"]
4545 -> 4546 [label="Line 3824: fputs(name, stdout);" id="4545 -> 4546"]
4546 -> 4547 [label="Line 3825: putchar(0);" id="4546 -> 4547"]
4547 -> 4548 [label="Line 3826: offset = offset + name_len; default return" id="4547 -> 4548"]
4548 -> 4549 [label="Line 4154: Return edge from push_string to cpio_mkfile" id="4548 -> 4549"]
4549 -> 4550 [label="Line 4155: push_pad()" id="4549 -> 4550"]
4550 -> 4552 [label="Line 3831: Function start dummy edge while" id="4550 -> 4552"]
4557 -> 4552 [style="dashed" weight="0" label="covered by"]
4552 -> 4553 [label="Line 3831: [(offset & 3) == 0]" id="4552 -> 4553"]
4552 -> 4554 [label="Line 3831: [!((offset & 3) == 0)]" id="4552 -> 4554"]
4554 -> 4555 [label="Line 3832: putchar(0);" id="4554 -> 4555"]
4555 -> 4557 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4555 -> 4557"]
4553 -> 4558 [label="Line 0: default return" id="4553 -> 4558"]
4558 -> 4559 [label="Line 4155: Return edge from push_pad to cpio_mkfile" id="4558 -> 4559"]
4559 -> 4560 [label="Line 4157: [size == 0]" id="4559 -> 4560"]
4559 -> 4561 [label="Line 4157: [!(size == 0)]" id="4559 -> 4561"]
4561 -> 4562 [label="Line 4158: size_t __CPAchecker_TMP_3;" id="4561 -> 4562"]
4562 -> 4563 [label="Line 4158: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4562 -> 4563"]
4563 -> 4564 [label="Line 4158: [__CPAchecker_TMP_3 != 1]" id="4563 -> 4564"]
4563 -> 4565 [label="Line 4158: [!(__CPAchecker_TMP_3 != 1)]" id="4563 -> 4565"]
4565 -> 4566 [label="Line 4162: offset = offset + size;" id="4565 -> 4566"]
4566 -> 4567 [label="Line 4163: push_pad()" id="4566 -> 4567"]
4567 -> 4569 [label="Line 3831: Function start dummy edge while" id="4567 -> 4569"]
4574 -> 4569 [style="dashed" weight="0" label="covered by"]
4569 -> 4570 [label="Line 3831: [(offset & 3) == 0]" id="4569 -> 4570"]
4569 -> 4571 [label="Line 3831: [!((offset & 3) == 0)]" id="4569 -> 4571"]
4571 -> 4572 [label="Line 3832: putchar(0);" id="4571 -> 4572"]
4572 -> 4574 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4572 -> 4574"]
4570 -> 4575 [label="Line 0: default return" id="4570 -> 4575"]
4575 -> 4576 [label="Line 4163: Return edge from push_pad to cpio_mkfile" id="4575 -> 4576"]
4576 -> 4577 [label="Line 0: " id="4576 -> 4577"]
4577 -> 4641 [label="Line 4130: name = name + namesize;  i = i + 1;" id="4577 -> 4641"]
4564 -> 4578 [label="Line 4159: fprintf(stderr, 'writing filebuf failed\n');" id="4564 -> 4578"]
4578 -> 4579 [label="Line 4160: Goto: l1" id="4578 -> 4579"]
4579 -> 4658 [label="Line 4173: [!(filebuf == 0)]" id="4579 -> 4658"]
4579 -> 4673 [label="Line 4173: [filebuf == 0]" id="4579 -> 4673"]
4673 -> 4682 [label="Line 4179: [file >= 0]" id="4673 -> 4682"]
4673 -> 4698 [label="Line 4179: [!(file >= 0)]" id="4673 -> 4698"]
4698 -> 4706 [label="Line 4180: return rc;" id="4698 -> 4706"]
4706 -> 4711 [label="Line 4249: Return edge from cpio_mkfile to cpio_mkfile_line" id="4706 -> 4711"]
4711 -> 4716 [label="Line 4251: Label: fail" id="4711 -> 4716"]
4716 -> 4723 [label="Line 4253: [!(dname_len == 0)]" id="4716 -> 4723"]
4716 -> 4738 [label="Line 4253: [dname_len == 0]" id="4716 -> 4738"]
4738 -> 4746 [label="Line 4259: return rc;" id="4738 -> 4746"]
4746 -> 4751 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="4746 -> 4751"]
4751 -> 4756 [label="Line 4417: skip" id="4751 -> 4756"]
4756 -> 4763 [label="Line 4417: [!(rc == 0)]" id="4756 -> 4763"]
4756 -> 4783 [label="Line 4417: [rc == 0]" id="4756 -> 4783"]
4783 -> 4791 [label="Line 4421: break" id="4783 -> 4791"]
4791 -> 4797 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="4791 -> 4797"]
4791 -> 4813 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="4791 -> 4813"]
4813 -> 4823 [label="Line 0: " id="4813 -> 4823"]
4797 -> 4806 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="4797 -> 4806"]
4806 -> 4813 [label="Line 0: " id="4806 -> 4813"]
4763 -> 4771 [label="Line 4418: ec = rc;" id="4763 -> 4771"]
4771 -> 4776 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="4771 -> 4776"]
4776 -> 4783 [label="Line 0: " id="4776 -> 4783"]
4723 -> 4731 [label="Line 4255: free(dname);" id="4723 -> 4731"]
4731 -> 4738 [label="Line 4257: Num = Num + 1; " id="4731 -> 4738"]
4682 -> 4691 [label="Line 4179: close(file);" id="4682 -> 4691"]
4691 -> 4698 [label="Line 0: " id="4691 -> 4698"]
4658 -> 4666 [label="Line 4175: free(filebuf);" id="4658 -> 4666"]
4666 -> 4673 [label="Line 4177: Num = Num + 1; " id="4666 -> 4673"]
4560 -> 4581 [label="Line 4130: name = name + namesize;  i = i + 1;" id="4560 -> 4581"]
4641 -> 4581 [style="dashed" weight="0" label="covered by"]
4643 -> 4581 [style="dashed" weight="0" label="covered by"]
4645 -> 4581 [style="dashed" weight="0" label="covered by"]
4581 -> 4582 [label="Line 4130: [i <= nlinks]" id="4581 -> 4582"]
4581 -> 4583 [label="Line 4130: [!(i <= nlinks)]" id="4581 -> 4583"]
4583 -> 4584 [label="Line 4168: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4583 -> 4584"]
4584 -> 4660 [label="Line 4173: [!(filebuf == 0)]" id="4584 -> 4660"]
4584 -> 4675 [label="Line 4173: [filebuf == 0]" id="4584 -> 4675"]
4675 -> 4684 [label="Line 4179: [file >= 0]" id="4675 -> 4684"]
4675 -> 4700 [label="Line 4179: [!(file >= 0)]" id="4675 -> 4700"]
4700 -> 4707 [label="Line 4180: return rc;" id="4700 -> 4707"]
4707 -> 4712 [label="Line 4249: Return edge from cpio_mkfile to cpio_mkfile_line" id="4707 -> 4712"]
4712 -> 4717 [label="Line 4251: Label: fail" id="4712 -> 4717"]
4717 -> 4725 [label="Line 4253: [!(dname_len == 0)]" id="4717 -> 4725"]
4717 -> 4740 [label="Line 4253: [dname_len == 0]" id="4717 -> 4740"]
4740 -> 4747 [label="Line 4259: return rc;" id="4740 -> 4747"]
4747 -> 4752 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="4747 -> 4752"]
4752 -> 4757 [label="Line 4417: skip" id="4752 -> 4757"]
4757 -> 4765 [label="Line 4417: [!(rc == 0)]" id="4757 -> 4765"]
4757 -> 4785 [label="Line 4417: [rc == 0]" id="4757 -> 4785"]
4785 -> 4792 [label="Line 4421: break" id="4785 -> 4792"]
4792 -> 4799 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="4792 -> 4799"]
4792 -> 4815 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="4792 -> 4815"]
4815 -> 4825 [label="Line 0: " id="4815 -> 4825"]
4799 -> 4807 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="4799 -> 4807"]
4807 -> 4815 [label="Line 0: " id="4807 -> 4815"]
4765 -> 4772 [label="Line 4418: ec = rc;" id="4765 -> 4772"]
4772 -> 4777 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="4772 -> 4777"]
4777 -> 4785 [label="Line 0: " id="4777 -> 4785"]
4725 -> 4732 [label="Line 4255: free(dname);" id="4725 -> 4732"]
4732 -> 4740 [label="Line 4257: Num = Num + 1; " id="4732 -> 4740"]
4684 -> 4692 [label="Line 4179: close(file);" id="4684 -> 4692"]
4692 -> 4700 [label="Line 0: " id="4692 -> 4700"]
4660 -> 4667 [label="Line 4175: free(filebuf);" id="4660 -> 4667"]
4667 -> 4675 [label="Line 4177: Num = Num + 1; " id="4667 -> 4675"]
4582 -> 4585 [label="Line 4132: [i == nlinks]" id="4582 -> 4585"]
4582 -> 4588 [label="Line 4132: [!(i == nlinks)]" id="4582 -> 4588"]
4588 -> 4589 [label="Line 4134: [(name[0]) == '/']" id="4588 -> 4589"]
4588 -> 4592 [label="Line 4134: [!((name[0]) == '/')]" id="4588 -> 4592"]
4592 -> 4593 [label="Line 4136: size_t __CPAchecker_TMP_2;" id="4592 -> 4593"]
4593 -> 4594 [label="Line 4136: __CPAchecker_TMP_2 = strlen(name);" id="4593 -> 4594"]
4594 -> 4595 [label="Line 4136: namesize = __CPAchecker_TMP_2 + 1;" id="4594 -> 4595"]
4595 -> 4596 [label="Line 4137: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4595 -> 4596"]
4596 -> 4597 [label="Line 4153: push_hdr(s)" id="4596 -> 4597"]
4597 -> 4598 [label="Line 0: Function start dummy edge" id="4597 -> 4598"]
4598 -> 4599 [label="Line 3856: fputs(s, stdout);" id="4598 -> 4599"]
4599 -> 4600 [label="Line 3857: offset = offset + 110; default return" id="4599 -> 4600"]
4600 -> 4601 [label="Line 4153: Return edge from push_hdr to cpio_mkfile" id="4600 -> 4601"]
4601 -> 4602 [label="Line 4154: push_string(name)" id="4601 -> 4602"]
4602 -> 4603 [label="Line 3822: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4602 -> 4603"]
4603 -> 4604 [label="Line 3822: __CPAchecker_TMP_0 = strlen(name);" id="4603 -> 4604"]
4604 -> 4605 [label="Line 3822: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4604 -> 4605"]
4605 -> 4606 [label="Line 3824: fputs(name, stdout);" id="4605 -> 4606"]
4606 -> 4607 [label="Line 3825: putchar(0);" id="4606 -> 4607"]
4607 -> 4608 [label="Line 3826: offset = offset + name_len; default return" id="4607 -> 4608"]
4608 -> 4609 [label="Line 4154: Return edge from push_string to cpio_mkfile" id="4608 -> 4609"]
4609 -> 4610 [label="Line 4155: push_pad()" id="4609 -> 4610"]
4610 -> 4612 [label="Line 3831: Function start dummy edge while" id="4610 -> 4612"]
4617 -> 4612 [style="dashed" weight="0" label="covered by"]
4612 -> 4613 [label="Line 3831: [(offset & 3) == 0]" id="4612 -> 4613"]
4612 -> 4614 [label="Line 3831: [!((offset & 3) == 0)]" id="4612 -> 4614"]
4614 -> 4615 [label="Line 3832: putchar(0);" id="4614 -> 4615"]
4615 -> 4617 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4615 -> 4617"]
4613 -> 4618 [label="Line 0: default return" id="4613 -> 4618"]
4618 -> 4619 [label="Line 4155: Return edge from push_pad to cpio_mkfile" id="4618 -> 4619"]
4619 -> 4620 [label="Line 4157: [size == 0]" id="4619 -> 4620"]
4619 -> 4621 [label="Line 4157: [!(size == 0)]" id="4619 -> 4621"]
4621 -> 4622 [label="Line 4158: size_t __CPAchecker_TMP_3;" id="4621 -> 4622"]
4622 -> 4623 [label="Line 4158: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4622 -> 4623"]
4623 -> 4624 [label="Line 4158: [__CPAchecker_TMP_3 != 1]" id="4623 -> 4624"]
4623 -> 4625 [label="Line 4158: [!(__CPAchecker_TMP_3 != 1)]" id="4623 -> 4625"]
4625 -> 4626 [label="Line 4162: offset = offset + size;" id="4625 -> 4626"]
4626 -> 4627 [label="Line 4163: push_pad()" id="4626 -> 4627"]
4627 -> 4629 [label="Line 3831: Function start dummy edge while" id="4627 -> 4629"]
4634 -> 4629 [style="dashed" weight="0" label="covered by"]
4629 -> 4630 [label="Line 3831: [(offset & 3) == 0]" id="4629 -> 4630"]
4629 -> 4631 [label="Line 3831: [!((offset & 3) == 0)]" id="4629 -> 4631"]
4631 -> 4632 [label="Line 3832: putchar(0);" id="4631 -> 4632"]
4632 -> 4634 [label="Line 3833: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4632 -> 4634"]
4630 -> 4635 [label="Line 0: default return" id="4630 -> 4635"]
4635 -> 4636 [label="Line 4163: Return edge from push_pad to cpio_mkfile" id="4635 -> 4636"]
4636 -> 4637 [label="Line 0: " id="4636 -> 4637"]
4637 -> 4645 [label="Line 4130: name = name + namesize;  i = i + 1;" id="4637 -> 4645"]
4624 -> 4638 [label="Line 4159: fprintf(stderr, 'writing filebuf failed\n');" id="4624 -> 4638"]
4638 -> 4639 [label="Line 4160: Goto: l1" id="4638 -> 4639"]
4639 -> 4662 [label="Line 4173: [!(filebuf == 0)]" id="4639 -> 4662"]
4639 -> 4677 [label="Line 4173: [filebuf == 0]" id="4639 -> 4677"]
4677 -> 4686 [label="Line 4179: [file >= 0]" id="4677 -> 4686"]
4677 -> 4702 [label="Line 4179: [!(file >= 0)]" id="4677 -> 4702"]
4702 -> 4708 [label="Line 4180: return rc;" id="4702 -> 4708"]
4708 -> 4713 [label="Line 4249: Return edge from cpio_mkfile to cpio_mkfile_line" id="4708 -> 4713"]
4713 -> 4718 [label="Line 4251: Label: fail" id="4713 -> 4718"]
4718 -> 4727 [label="Line 4253: [!(dname_len == 0)]" id="4718 -> 4727"]
4718 -> 4742 [label="Line 4253: [dname_len == 0]" id="4718 -> 4742"]
4742 -> 4748 [label="Line 4259: return rc;" id="4742 -> 4748"]
4748 -> 4753 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="4748 -> 4753"]
4753 -> 4758 [label="Line 4417: skip" id="4753 -> 4758"]
4758 -> 4767 [label="Line 4417: [!(rc == 0)]" id="4758 -> 4767"]
4758 -> 4787 [label="Line 4417: [rc == 0]" id="4758 -> 4787"]
4787 -> 4793 [label="Line 4421: break" id="4787 -> 4793"]
4793 -> 4801 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="4793 -> 4801"]
4793 -> 4817 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="4793 -> 4817"]
4817 -> 4827 [label="Line 0: " id="4817 -> 4827"]
4801 -> 4808 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="4801 -> 4808"]
4808 -> 4817 [label="Line 0: " id="4808 -> 4817"]
4767 -> 4773 [label="Line 4418: ec = rc;" id="4767 -> 4773"]
4773 -> 4778 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="4773 -> 4778"]
4778 -> 4787 [label="Line 0: " id="4778 -> 4787"]
4727 -> 4733 [label="Line 4255: free(dname);" id="4727 -> 4733"]
4733 -> 4742 [label="Line 4257: Num = Num + 1; " id="4733 -> 4742"]
4686 -> 4693 [label="Line 4179: close(file);" id="4686 -> 4693"]
4693 -> 4702 [label="Line 0: " id="4693 -> 4702"]
4662 -> 4668 [label="Line 4175: free(filebuf);" id="4662 -> 4668"]
4668 -> 4677 [label="Line 4177: Num = Num + 1; " id="4668 -> 4677"]
4620 -> 4643 [label="Line 4130: name = name + namesize;  i = i + 1;" id="4620 -> 4643"]
4589 -> 4592 [label="Line 4135: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4589 -> 4592"]
4585 -> 4588 [label="Line 4132: size = buf.st_size; " id="4585 -> 4588"]
4529 -> 4532 [label="Line 4135: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4529 -> 4532"]
4525 -> 4528 [label="Line 4132: size = buf.st_size; " id="4525 -> 4528"]
4518 -> 4646 [label="Line 4125: fprintf(stderr, 'Can not read %s file\n', location);" id="4518 -> 4646"]
4646 -> 4654 [label="Line 4126: Goto: l1" id="4646 -> 4654"]
4515 -> 4649 [label="Line 4119: fprintf(stderr, 'out of memory\n');" id="4515 -> 4649"]
4649 -> 4654 [label="Line 4120: Goto: l1" id="4649 -> 4654"]
4503 -> 4652 [label="Line 4103: fprintf(stderr, 'File %s could not be opened for reading\n', location);" id="4503 -> 4652"]
4652 -> 4654 [label="Line 4104: Goto: l1" id="4652 -> 4654"]
4481 -> 4482 [label="Line 4188: end = strchr(start + 2, '}');" id="4481 -> 4482"]
4482 -> 4484 [label="Line 4189: [!(end == 0)]" id="4482 -> 4484"]
4482 -> 4485 [label="Line 4189: [end == 0]" id="4482 -> 4485"]
4484 -> 4486 [label="Line 4190: *end = 0; *start = *end;" id="4484 -> 4486"]
4486 -> 4487 [label="Line 4191: var = getenv(start + 2);" id="4486 -> 4487"]
4487 -> 4488 [label="Line 4192: const char *__CPAchecker_TMP_0;" id="4487 -> 4488"]
4488 -> 4489 [label="Line 4193: [var == 0]" id="4488 -> 4489"]
4488 -> 4490 [label="Line 4193: [!(var == 0)]" id="4488 -> 4490"]
4490 -> 4493 [label="Line 4193: __CPAchecker_TMP_0 = var;" id="4490 -> 4493"]
4493 -> 4494 [label="Line 4192: snprintf(expanded, 4097, '%s%s%s', new_location, __CPAchecker_TMP_0, end + 1);" id="4493 -> 4494"]
4494 -> 4495 [label="Line 4194: strcpy(new_location, expanded);" id="4494 -> 4495"]
4495 -> 4497 [label="Line 0: " id="4495 -> 4497"]
4489 -> 4493 [label="Line 4193: __CPAchecker_TMP_0 = '';" id="4489 -> 4493"]
3110 -> 3111 [label="Line 4218: const unsigned short int **__CPAchecker_TMP_1;" id="3110 -> 3111"]
3111 -> 3112 [label="Line 4218: __CPAchecker_TMP_1 = __ctype_b_loc();" id="3111 -> 3112"]
3112 -> 3114 [label="Line 4218: [!((((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0)]" id="3112 -> 3114"]
3112 -> 3115 [label="Line 4218: [(((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0]" id="3112 -> 3115"]
3114 -> 3116 [label="Line 4219: int len; int nend; size_t __CPAchecker_TMP_2;" id="3114 -> 3116"]
3116 -> 3117 [label="Line 4222: __CPAchecker_TMP_2 = strlen(line);" id="3116 -> 3117"]
3117 -> 3118 [label="Line 4222: dname = malloc(__CPAchecker_TMP_2);" id="3117 -> 3118"]
3118 -> 3119 [label="Line 4224: Num = Num - 1;" id="3118 -> 3119"]
3119 -> 3120 [label="Line 4225: [Num >= 0]" id="3119 -> 3120"]
3119 -> 3121 [label="Line 4225: [!(Num >= 0)]" id="3119 -> 3121"]
3120 -> 3122 [label="Line 4225: 0;" id="3120 -> 3122"]
3122 -> 3123 [label="Line 4227: [dname == 0]" id="3122 -> 3123"]
3122 -> 3124 [label="Line 4227: [!(dname == 0)]" id="3122 -> 3124"]
3124 -> 3125 [label="Line 4232: size_t __CPAchecker_TMP_4;" id="3124 -> 3125"]
3125 -> 3126 [label="Line 4232: __CPAchecker_TMP_4 = strlen(name);" id="3125 -> 3126"]
3126 -> 3127 [label="Line 4232: dname_len = __CPAchecker_TMP_4 + 1;" id="3126 -> 3127"]
3127 -> 3128 [label="Line 4233: memcpy(dname, name, dname_len);" id="3127 -> 3128"]
3128 -> 3130 [label="Line 4235: do" id="3128 -> 3130"]
3123 -> 3131 [label="Line 4228: fprintf(stderr, 'out of memory (%d)\n', dname_len);" id="3123 -> 3131"]
3131 -> 3293 [label="Line 4229: Goto: fail" id="3131 -> 3293"]
3293 -> 3301 [label="Line 4253: [!(dname_len == 0)]" id="3293 -> 3301"]
3293 -> 3313 [label="Line 4253: [dname_len == 0]" id="3293 -> 3313"]
3313 -> 3317 [label="Line 4259: return rc;" id="3313 -> 3317"]
3317 -> 3321 [label="Line 4417: Return edge from cpio_mkfile_line to main" id="3317 -> 3321"]
3321 -> 3430 [label="Line 4417: skip" id="3321 -> 3430"]
3301 -> 3305 [label="Line 4255: free(dname);" id="3301 -> 3305"]
3305 -> 3313 [label="Line 4257: Num = Num + 1; " id="3305 -> 3313"]
3107 -> 3291 [label="Line 4215: fprintf(stderr, 'Unrecognized file format '%s'', line);" id="3107 -> 3291"]
3291 -> 3293 [label="Line 4216: Goto: fail" id="3291 -> 3293"]
2918 -> 3327 [label="Line 4417: cpio_mkpipe_line(args)" id="2918 -> 3327"]
3327 -> 3328 [label="Line 4019: Function start dummy edge int __CPAchecker_TMP_0;" id="3327 -> 3328"]
3328 -> 3329 [label="Line 4019: cpio_mkgeneric_line(line, 1)" id="3328 -> 3329"]
3329 -> 3330 [label="Line 3995: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3329 -> 3330"]
3330 -> 3331 [label="Line 4001: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="3330 -> 3331"]
3331 -> 3332 [label="Line 4001: [4 != __CPAchecker_TMP_0]" id="3331 -> 3332"]
3331 -> 3333 [label="Line 4001: [!(4 != __CPAchecker_TMP_0)]" id="3331 -> 3333"]
3333 -> 3334 [label="Line 4006: mode = mode | ((generic_type_table[gt]).mode);" id="3333 -> 3334"]
3334 -> 3335 [label="Line 4007: cpio_mkgeneric(name, mode, uid, gid)" id="3334 -> 3335"]
3335 -> 3336 [label="Line 3942: Function start dummy edge char s[256];" id="3335 -> 3336"]
3336 -> 3337 [label="Line 3944: [(name[0]) == '/']" id="3336 -> 3337"]
3336 -> 3340 [label="Line 3944: [!((name[0]) == '/')]" id="3336 -> 3340"]
3340 -> 3341 [label="Line 3946: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3340 -> 3341"]
3341 -> 3342 [label="Line 3946: __CPAchecker_TMP_2 = strlen(name);" id="3341 -> 3342"]
3342 -> 3343 [label="Line 3946: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3342 -> 3343"]
3343 -> 3344 [label="Line 3962: push_hdr(s)" id="3343 -> 3344"]
3344 -> 3345 [label="Line 0: Function start dummy edge" id="3344 -> 3345"]
3345 -> 3346 [label="Line 3856: fputs(s, stdout);" id="3345 -> 3346"]
3346 -> 3347 [label="Line 3857: offset = offset + 110; default return" id="3346 -> 3347"]
3347 -> 3348 [label="Line 3962: Return edge from push_hdr to cpio_mkgeneric" id="3347 -> 3348"]
3348 -> 3349 [label="Line 3963: push_rest(name)" id="3348 -> 3349"]
3349 -> 3350 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="3349 -> 3350"]
3350 -> 3351 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="3350 -> 3351"]
3351 -> 3352 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3351 -> 3352"]
3352 -> 3353 [label="Line 3842: fputs(name, stdout);" id="3352 -> 3353"]
3353 -> 3354 [label="Line 3843: putchar(0);" id="3353 -> 3354"]
3354 -> 3356 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3354 -> 3356"]
3361 -> 3356 [style="dashed" weight="0" label="covered by"]
3356 -> 3357 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="3356 -> 3357"]
3356 -> 3358 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="3356 -> 3358"]
3358 -> 3359 [label="Line 3848: putchar(0);" id="3358 -> 3359"]
3359 -> 3361 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3359 -> 3361"]
3357 -> 3362 [label="Line 0: default return" id="3357 -> 3362"]
3362 -> 3363 [label="Line 3963: Return edge from push_rest to cpio_mkgeneric" id="3362 -> 3363"]
3363 -> 3364 [label="Line 3964: return 0;" id="3363 -> 3364"]
3364 -> 3365 [label="Line 4007: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="3364 -> 3365"]
3365 -> 3366 [label="Line 4008: Label: fail" id="3365 -> 3366"]
3366 -> 3369 [label="Line 4009: return rc;" id="3366 -> 3369"]
3369 -> 3371 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="3369 -> 3371"]
3371 -> 3373 [label="Line 4019: return __CPAchecker_TMP_0;" id="3371 -> 3373"]
3373 -> 3375 [label="Line 4417: Return edge from cpio_mkpipe_line to main" id="3373 -> 3375"]
3375 -> 3377 [label="Line 4417: skip" id="3375 -> 3377"]
3377 -> 3444 [label="Line 4417: [!(rc == 0)]" id="3377 -> 3444"]
3377 -> 3480 [label="Line 4417: [rc == 0]" id="3377 -> 3480"]
3480 -> 3491 [label="Line 4421: break" id="3480 -> 3491"]
3491 -> 3507 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3491 -> 3507"]
3491 -> 3535 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3491 -> 3535"]
3535 -> 4180 [label="Line 0: " id="3535 -> 4180"]
3507 -> 3519 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3507 -> 3519"]
3519 -> 3535 [label="Line 0: " id="3519 -> 3535"]
3444 -> 3455 [label="Line 4418: ec = rc;" id="3444 -> 3455"]
3455 -> 3464 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3455 -> 3464"]
3464 -> 3480 [label="Line 0: " id="3464 -> 3480"]
3337 -> 3340 [label="Line 3945: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3337 -> 3340"]
3332 -> 3367 [label="Line 4002: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="3332 -> 3367"]
3367 -> 3368 [label="Line 4004: Goto: fail" id="3367 -> 3368"]
3368 -> 3370 [label="Line 4009: return rc;" id="3368 -> 3370"]
3370 -> 3372 [label="Line 4019: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="3370 -> 3372"]
3372 -> 3374 [label="Line 4019: return __CPAchecker_TMP_0;" id="3372 -> 3374"]
3374 -> 3376 [label="Line 4417: Return edge from cpio_mkpipe_line to main" id="3374 -> 3376"]
3376 -> 3430 [label="Line 4417: skip" id="3376 -> 3430"]
2916 -> 3380 [label="Line 4417: cpio_mknod_line(args)" id="2916 -> 3380"]
3380 -> 3381 [label="Line 4062: Function start dummy edge char name[4097]; unsigned int mode; int uid; int gid; char dev_type; unsigned int maj; unsigned int min; int rc = -1; int __CPAchecker_TMP_0;" id="3380 -> 3381"]
3381 -> 3382 [label="Line 4071: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d %c %u %u', name, &mode, &uid, &gid, &dev_type, &maj, &min);" id="3381 -> 3382"]
3382 -> 3383 [label="Line 4071: [7 != __CPAchecker_TMP_0]" id="3382 -> 3383"]
3382 -> 3384 [label="Line 4071: [!(7 != __CPAchecker_TMP_0)]" id="3382 -> 3384"]
3384 -> 3385 [label="Line 4076: cpio_mknod(name, mode, uid, gid, dev_type, maj, min)" id="3384 -> 3385"]
3385 -> 3386 [label="Line 4030: Function start dummy edge char s[256];" id="3385 -> 3386"]
3386 -> 3387 [label="Line 4032: [dev_type == 'b']" id="3386 -> 3387"]
3386 -> 3388 [label="Line 4032: [!(dev_type == 'b')]" id="3386 -> 3388"]
3388 -> 3391 [label="Line 4035: mode = mode | 8192; " id="3388 -> 3391"]
3391 -> 3392 [label="Line 4037: [(name[0]) == '/']" id="3391 -> 3392"]
3391 -> 3395 [label="Line 4037: [!((name[0]) == '/')]" id="3391 -> 3395"]
3395 -> 3396 [label="Line 4039: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3395 -> 3396"]
3396 -> 3397 [label="Line 4039: __CPAchecker_TMP_2 = strlen(name);" id="3396 -> 3397"]
3397 -> 3398 [label="Line 4039: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 1, (long)default_mtime, 0, 3, 1, maj, min, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3397 -> 3398"]
3398 -> 3399 [label="Line 4055: push_hdr(s)" id="3398 -> 3399"]
3399 -> 3400 [label="Line 0: Function start dummy edge" id="3399 -> 3400"]
3400 -> 3401 [label="Line 3856: fputs(s, stdout);" id="3400 -> 3401"]
3401 -> 3402 [label="Line 3857: offset = offset + 110; default return" id="3401 -> 3402"]
3402 -> 3403 [label="Line 4055: Return edge from push_hdr to cpio_mknod" id="3402 -> 3403"]
3403 -> 3404 [label="Line 4056: push_rest(name)" id="3403 -> 3404"]
3404 -> 3405 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="3404 -> 3405"]
3405 -> 3406 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="3405 -> 3406"]
3406 -> 3407 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3406 -> 3407"]
3407 -> 3408 [label="Line 3842: fputs(name, stdout);" id="3407 -> 3408"]
3408 -> 3409 [label="Line 3843: putchar(0);" id="3408 -> 3409"]
3409 -> 3411 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3409 -> 3411"]
3416 -> 3411 [style="dashed" weight="0" label="covered by"]
3411 -> 3412 [label="Line 3847: [(tmp_ofs & 3) == 0]" id="3411 -> 3412"]
3411 -> 3413 [label="Line 3847: [!((tmp_ofs & 3) == 0)]" id="3411 -> 3413"]
3413 -> 3414 [label="Line 3848: putchar(0);" id="3413 -> 3414"]
3414 -> 3416 [label="Line 3849: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3414 -> 3416"]
3412 -> 3417 [label="Line 0: default return" id="3412 -> 3417"]
3417 -> 3418 [label="Line 4056: Return edge from push_rest to cpio_mknod" id="3417 -> 3418"]
3418 -> 3419 [label="Line 4057: return 0;" id="3418 -> 3419"]
3419 -> 3420 [label="Line 4076: Return edge from cpio_mknod to cpio_mknod_line" id="3419 -> 3420"]
3420 -> 3421 [label="Line 4077: Label: fail" id="3420 -> 3421"]
3421 -> 3424 [label="Line 4078: return rc;" id="3421 -> 3424"]
3424 -> 3426 [label="Line 4417: Return edge from cpio_mknod_line to main" id="3424 -> 3426"]
3426 -> 3428 [label="Line 4417: skip" id="3426 -> 3428"]
3428 -> 3446 [label="Line 4417: [!(rc == 0)]" id="3428 -> 3446"]
3428 -> 3482 [label="Line 4417: [rc == 0]" id="3428 -> 3482"]
3482 -> 3492 [label="Line 4421: break" id="3482 -> 3492"]
3492 -> 3509 [label="Line 4425: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3492 -> 3509"]
3492 -> 3537 [label="Line 4425: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3492 -> 3537"]
3537 -> 4182 [label="Line 0: " id="3537 -> 4182"]
3509 -> 3520 [label="Line 4426: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3509 -> 3520"]
3520 -> 3537 [label="Line 0: " id="3520 -> 3537"]
3446 -> 3456 [label="Line 4418: ec = rc;" id="3446 -> 3456"]
3456 -> 3465 [label="Line 4419: fprintf(stderr, ' line %d\n', line_nr);" id="3456 -> 3465"]
3465 -> 3482 [label="Line 0: " id="3465 -> 3482"]
3392 -> 3395 [label="Line 4038: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3392 -> 3395"]
3387 -> 3391 [label="Line 4033: mode = mode | 24576; " id="3387 -> 3391"]
3383 -> 3422 [label="Line 4073: fprintf(stderr, 'Unrecognized nod format '%s'', line);" id="3383 -> 3422"]
3422 -> 3423 [label="Line 4074: Goto: fail" id="3422 -> 3423"]
3423 -> 3425 [label="Line 4078: return rc;" id="3423 -> 3425"]
3425 -> 3427 [label="Line 4417: Return edge from cpio_mknod_line to main" id="3425 -> 3427"]
3427 -> 3430 [label="Line 4417: skip" id="3427 -> 3430"]
2901 -> 2903 [label="Line 4408: fprintf(stderr, 'ERROR: incorrect format, newline required line %d: '%s'\n', line_nr, line);" id="2901 -> 2903"]
2903 -> 2905 [label="Line 4411: ec = -1; " id="2903 -> 2905"]
2898 -> 4831 [label="Line 4404: continue" id="2898 -> 4831"]
2894 -> 4833 [label="Line 4399: continue" id="2894 -> 4833"]
2892 -> 4834 [label="Line 4390: fprintf(stderr, 'ERROR: incorrect format, could not locate file type line %d: '%s'\n', line_nr, line);" id="2892 -> 4834"]
4834 -> 4835 [label="Line 4393: ec = -1; break" id="4834 -> 4835"]
4835 -> 4836 [label="Line 4430: [ec == 0]" id="4835 -> 4836"]
4835 -> 4837 [label="Line 4430: [!(ec == 0)]" id="4835 -> 4837"]
4836 -> 4838 [label="Line 4431: cpio_trailer()" id="4836 -> 4838"]
4838 -> 4839 [label="Line 3862: Function start dummy edge char s[256]; const char name[] = 'TRAILER!!!'; size_t __CPAchecker_TMP_0;" id="4838 -> 4839"]
4839 -> 4840 [label="Line 3865: __CPAchecker_TMP_0 = strlen(name);" id="4839 -> 4840"]
4840 -> 4841 [label="Line 3865: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', 0, 0, 0L, 0L, 1, 0L, 0, 0, 0, 0, 0, ((unsigned)__CPAchecker_TMP_0) + 1, 0);" id="4840 -> 4841"]
4841 -> 4842 [label="Line 3881: push_hdr(s)" id="4841 -> 4842"]
4842 -> 4843 [label="Line 0: Function start dummy edge" id="4842 -> 4843"]
4843 -> 4844 [label="Line 3856: fputs(s, stdout);" id="4843 -> 4844"]
4844 -> 4845 [label="Line 3857: offset = offset + 110; default return" id="4844 -> 4845"]
4845 -> 4846 [label="Line 3881: Return edge from push_hdr to cpio_trailer" id="4845 -> 4846"]
4846 -> 4847 [label="Line 3882: push_rest(name)" id="4846 -> 4847"]
4847 -> 4848 [label="Line 3839: Function start dummy edge size_t __CPAchecker_TMP_0;" id="4847 -> 4848"]
4848 -> 4849 [label="Line 3839: __CPAchecker_TMP_0 = strlen(name);" id="4848 -> 4849"]
4849 -> 4850 [label="Line 3839: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="4849 -> 4850"]
4850 -> 4851 [label="Line 3842: fputs(name, stdout);" id="4850 -> 4851"]
4851 -> 4852 [label="Line 3843: putchar(0);" id="4851 -> 4852"]
4852 -> 4854 [label="Line 3844: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="4852 -> 4854"]
2889 -> 4856 [label="Line 4386: continue" id="2889 -> 4856"]
2869 -> 2872 [label="Line 4372: int *__CPAchecker_TMP_2;" id="2869 -> 2872"]
2872 -> 2873 [label="Line 4372: __CPAchecker_TMP_2 = __errno_location();" id="2872 -> 2873"]
2873 -> 2874 [label="Line 4372: char *__CPAchecker_TMP_3;" id="2873 -> 2874"]
2874 -> 2875 [label="Line 4372: __CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);" id="2874 -> 2875"]
2875 -> 2876 [label="Line 4372: fprintf(stderr, 'ERROR: unable to open '%s': %s\n\n', filename, __CPAchecker_TMP_3);" id="2875 -> 2876"]
2876 -> 2877 [label="Line 4374: usage(argv[0])" id="2876 -> 2877"]
2877 -> 2878 [label="Line 0: Function start dummy edge" id="2877 -> 2878"]
2878 -> 2879 [label="Line 4264: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2878 -> 2879"]
2879 -> 2880 [label="Line 0: default return" id="2879 -> 2880"]
2880 -> 2881 [label="Line 4374: Return edge from usage to main" id="2880 -> 2881"]
2866 -> 2883 [label="Line 4370: cpio_list = stdin; " id="2866 -> 2883"]
2857 -> 2859 [label="Line 4365: usage(argv[0])" id="2857 -> 2859"]
2859 -> 2860 [label="Line 0: Function start dummy edge" id="2859 -> 2860"]
2860 -> 2861 [label="Line 4264: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2860 -> 2861"]
2861 -> 2862 [label="Line 0: default return" id="2861 -> 2862"]
2862 -> 2863 [label="Line 4365: Return edge from usage to main" id="2862 -> 2863"]
}
