digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N93\nmain entry\nABS0: true" id="1"]
34 [label="34 @ N94\nmain" id="34"]
36 [label="36 @ N95\nmain" id="36"]
67 [fillcolor="cornflowerblue" label="67 @ N101\nmain\nABS5" id="67"]
68 [label="68 @ N102\nmain" id="68"]
70 [label="70 @ N103\nmain" id="70"]
81 [label="81 @ N106\nmain" id="81"]
83 [label="83 @ N108\nmain" id="83"]
82 [label="82 @ N107\nmain" id="82"]
84 [label="84 @ N109\nmain" id="84"]
85 [label="85 @ N110\nmain" id="85"]
87 [label="87 @ N111\nmain" id="87"]
98 [label="98 @ N114\nmain" id="98"]
100 [label="100 @ N116\nmain" id="100"]
99 [label="99 @ N115\nmain" id="99"]
101 [label="101 @ N117\nmain" id="101"]
103 [label="103 @ N120\nmain" id="103"]
104 [label="104 @ N122\nmain" id="104"]
106 [label="106 @ N124\nmain" id="106"]
107 [label="107 @ N16\nDatabase_load entry" id="107"]
108 [label="108 @ N18\nDatabase_load" id="108"]
109 [label="109 @ N19\nDatabase_load" id="109"]
111 [label="111 @ N20\nDatabase_load" id="111"]
122 [label="122 @ N15\nDatabase_load exit" id="122"]
123 [label="123 @ N125\nmain" id="123"]
129 [label="129 @ N118\nmain" id="129"]
131 [label="131 @ N126\nmain" id="131"]
142 [label="142 @ N129\nmain" id="142"]
147 [label="147 @ N130\nmain" id="147"]
149 [label="149 @ N133\nmain" id="149"]
160 [label="160 @ N136\nmain" id="160"]
162 [label="162 @ N140\nmain" id="162"]
164 [label="164 @ N145\nmain" id="164"]
166 [label="166 @ N152\nmain" id="166"]
168 [label="168 @ N160\nmain" id="168"]
170 [label="170 @ N168\nmain" id="170"]
171 [label="171 @ N171\nmain" id="171"]
172 [label="172 @ N1\ndie entry" id="172"]
173 [label="173 @ N6\ndie" id="173"]
174 [label="174 @ N7\ndie" id="174"]
176 [label="176 @ N4\ndie" id="176"]
177 [label="177 @ N8\ndie" id="177"]
181 [label="181 @ N3\ndie" id="181"]
175 [label="175 @ N5\ndie" id="175"]
179 [label="179 @ N9\ndie" id="179"]
169 [label="169 @ N167\nmain" id="169"]
182 [label="182 @ N79\nDatabase_list entry" id="182"]
482 [fillcolor="cornflowerblue" label="482 @ N84\nDatabase_list\nABS12" id="482"]
484 [label="484 @ N87\nDatabase_list" id="484"]
485 [label="485 @ N78\nDatabase_list exit" id="485"]
486 [label="486 @ N169\nmain" id="486"]
515 [label="515 @ N137\nmain" id="515"]
544 [label="544 @ N173\nmain" id="544"]
679 [fillcolor="cornflowerblue" label="679 @ N101\nmain\nABS21: false" id="679"]
518 [label="518 @ N174\nmain" id="518"]
528 [label="528 @ N175\nmain" id="528"]
538 [label="538 @ N178\nmain" id="538"]
541 [label="541 @ N182\nmain" id="541"]
532 [label="532 @ N179\nmain" id="532"]
535 [label="535 @ N180\nmain" id="535"]
522 [label="522 @ N176\nmain" id="522"]
525 [label="525 @ N177\nmain" id="525"]
483 [label="483 @ N86\nDatabase_list" id="483"]
487 [label="487 @ N88\nDatabase_list" id="487"]
496 [label="496 @ N89\nDatabase_list" id="496"]
498 [fillcolor="cornflowerblue" label="498 @ N84\nDatabase_list\nABS13" id="498"]
500 [label="500 @ N87\nDatabase_list" id="500"]
501 [label="501 @ N78\nDatabase_list exit" id="501"]
502 [label="502 @ N169\nmain" id="502"]
516 [label="516 @ N137\nmain" id="516"]
546 [label="546 @ N173\nmain" id="546"]
681 [fillcolor="green" label="681 @ N101\nmain\nABS22" id="681"]
520 [label="520 @ N174\nmain" id="520"]
530 [label="530 @ N175\nmain" id="530"]
540 [label="540 @ N178\nmain" id="540"]
542 [label="542 @ N182\nmain" id="542"]
534 [label="534 @ N179\nmain" id="534"]
536 [label="536 @ N180\nmain" id="536"]
524 [label="524 @ N176\nmain" id="524"]
526 [label="526 @ N177\nmain" id="526"]
499 [label="499 @ N86\nDatabase_list" id="499"]
503 [label="503 @ N88\nDatabase_list" id="503"]
512 [label="512 @ N89\nDatabase_list" id="512"]
514 [fillcolor="green" label="514 @ N84\nDatabase_list\nABS14" id="514"]
505 [label="505 @ N90\nDatabase_list" id="505"]
506 [label="506 @ N12\nAddress_print entry" id="506"]
507 [label="507 @ N13\nAddress_print" id="507"]
508 [label="508 @ N14\nAddress_print" id="508"]
509 [label="509 @ N11\nAddress_print exit" id="509"]
510 [label="510 @ N91\nDatabase_list" id="510"]
489 [label="489 @ N90\nDatabase_list" id="489"]
490 [label="490 @ N12\nAddress_print entry" id="490"]
491 [label="491 @ N13\nAddress_print" id="491"]
492 [label="492 @ N14\nAddress_print" id="492"]
493 [label="493 @ N11\nAddress_print exit" id="493"]
494 [label="494 @ N91\nDatabase_list" id="494"]
167 [label="167 @ N159\nmain" id="167"]
203 [label="203 @ N161\nmain" id="203"]
214 [label="214 @ N74\nDatabase_delete entry" id="214"]
215 [label="215 @ N73\nDatabase_delete exit" id="215"]
216 [label="216 @ N164\nmain" id="216"]
217 [label="217 @ N24\nDatabase_write entry" id="217"]
218 [label="218 @ N25\nDatabase_write" id="218"]
219 [label="219 @ N26\nDatabase_write" id="219"]
220 [label="220 @ N27\nDatabase_write" id="220"]
221 [label="221 @ N28\nDatabase_write" id="221"]
223 [label="223 @ N29\nDatabase_write" id="223"]
234 [label="234 @ N32\nDatabase_write" id="234"]
236 [label="236 @ N33\nDatabase_write" id="236"]
247 [label="247 @ N23\nDatabase_write exit" id="247"]
248 [label="248 @ N165\nmain" id="248"]
374 [label="374 @ N137\nmain" id="374"]
459 [label="459 @ N173\nmain" id="459"]
548 [fillcolor="green" label="548 @ N101\nmain\nABS15" id="548"]
420 [label="420 @ N174\nmain" id="420"]
435 [label="435 @ N175\nmain" id="435"]
450 [label="450 @ N178\nmain" id="450"]
454 [label="454 @ N182\nmain" id="454"]
441 [label="441 @ N179\nmain" id="441"]
445 [label="445 @ N180\nmain" id="445"]
426 [label="426 @ N176\nmain" id="426"]
430 [label="430 @ N177\nmain" id="430"]
235 [label="235 @ N34\nDatabase_write" id="235"]
237 [label="237 @ N1\ndie entry" id="237"]
238 [label="238 @ N6\ndie" id="238"]
239 [label="239 @ N7\ndie" id="239"]
241 [label="241 @ N4\ndie" id="241"]
242 [label="242 @ N8\ndie" id="242"]
246 [label="246 @ N3\ndie" id="246"]
240 [label="240 @ N5\ndie" id="240"]
244 [label="244 @ N9\ndie" id="244"]
222 [label="222 @ N30\nDatabase_write" id="222"]
224 [label="224 @ N1\ndie entry" id="224"]
225 [label="225 @ N6\ndie" id="225"]
226 [label="226 @ N7\ndie" id="226"]
228 [label="228 @ N4\ndie" id="228"]
229 [label="229 @ N8\ndie" id="229"]
233 [label="233 @ N3\ndie" id="233"]
227 [label="227 @ N5\ndie" id="227"]
231 [label="231 @ N9\ndie" id="231"]
202 [label="202 @ N162\nmain" id="202"]
204 [label="204 @ N1\ndie entry" id="204"]
205 [label="205 @ N6\ndie" id="205"]
206 [label="206 @ N7\ndie" id="206"]
208 [label="208 @ N4\ndie" id="208"]
209 [label="209 @ N8\ndie" id="209"]
213 [label="213 @ N3\ndie" id="213"]
207 [label="207 @ N5\ndie" id="207"]
211 [label="211 @ N9\ndie" id="211"]
165 [label="165 @ N151\nmain" id="165"]
251 [label="251 @ N153\nmain" id="251"]
262 [label="262 @ N48\nDatabase_set entry" id="262"]
263 [label="263 @ N50\nDatabase_set" id="263"]
265 [label="265 @ N52\nDatabase_set" id="265"]
266 [label="266 @ N1\ndie entry" id="266"]
267 [label="267 @ N6\ndie" id="267"]
268 [label="268 @ N7\ndie" id="268"]
270 [label="270 @ N4\ndie" id="270"]
271 [label="271 @ N8\ndie" id="271"]
275 [label="275 @ N3\ndie" id="275"]
269 [label="269 @ N5\ndie" id="269"]
273 [label="273 @ N9\ndie" id="273"]
264 [label="264 @ N51\nDatabase_set" id="264"]
276 [label="276 @ N55\nDatabase_set" id="276"]
277 [label="277 @ N56\nDatabase_set" id="277"]
279 [label="279 @ N57\nDatabase_set" id="279"]
290 [label="290 @ N60\nDatabase_set" id="290"]
292 [label="292 @ N61\nDatabase_set" id="292"]
303 [label="303 @ N47\nDatabase_set exit" id="303"]
304 [label="304 @ N156\nmain" id="304"]
305 [label="305 @ N24\nDatabase_write entry" id="305"]
306 [label="306 @ N25\nDatabase_write" id="306"]
307 [label="307 @ N26\nDatabase_write" id="307"]
308 [label="308 @ N27\nDatabase_write" id="308"]
309 [label="309 @ N28\nDatabase_write" id="309"]
311 [label="311 @ N29\nDatabase_write" id="311"]
322 [label="322 @ N32\nDatabase_write" id="322"]
324 [label="324 @ N33\nDatabase_write" id="324"]
335 [label="335 @ N23\nDatabase_write exit" id="335"]
336 [label="336 @ N157\nmain" id="336"]
323 [label="323 @ N34\nDatabase_write" id="323"]
325 [label="325 @ N1\ndie entry" id="325"]
326 [label="326 @ N6\ndie" id="326"]
327 [label="327 @ N7\ndie" id="327"]
329 [label="329 @ N4\ndie" id="329"]
330 [label="330 @ N8\ndie" id="330"]
334 [label="334 @ N3\ndie" id="334"]
328 [label="328 @ N5\ndie" id="328"]
332 [label="332 @ N9\ndie" id="332"]
310 [label="310 @ N30\nDatabase_write" id="310"]
312 [label="312 @ N1\ndie entry" id="312"]
313 [label="313 @ N6\ndie" id="313"]
314 [label="314 @ N7\ndie" id="314"]
316 [label="316 @ N4\ndie" id="316"]
317 [label="317 @ N8\ndie" id="317"]
321 [label="321 @ N3\ndie" id="321"]
315 [label="315 @ N5\ndie" id="315"]
319 [label="319 @ N9\ndie" id="319"]
291 [label="291 @ N62\nDatabase_set" id="291"]
293 [label="293 @ N1\ndie entry" id="293"]
294 [label="294 @ N6\ndie" id="294"]
295 [label="295 @ N7\ndie" id="295"]
297 [label="297 @ N4\ndie" id="297"]
298 [label="298 @ N8\ndie" id="298"]
302 [label="302 @ N3\ndie" id="302"]
296 [label="296 @ N5\ndie" id="296"]
300 [label="300 @ N9\ndie" id="300"]
278 [label="278 @ N58\nDatabase_set" id="278"]
280 [label="280 @ N1\ndie entry" id="280"]
281 [label="281 @ N6\ndie" id="281"]
282 [label="282 @ N7\ndie" id="282"]
284 [label="284 @ N4\ndie" id="284"]
285 [label="285 @ N8\ndie" id="285"]
289 [label="289 @ N3\ndie" id="289"]
283 [label="283 @ N5\ndie" id="283"]
287 [label="287 @ N9\ndie" id="287"]
250 [label="250 @ N154\nmain" id="250"]
252 [label="252 @ N1\ndie entry" id="252"]
253 [label="253 @ N6\ndie" id="253"]
254 [label="254 @ N7\ndie" id="254"]
256 [label="256 @ N4\ndie" id="256"]
257 [label="257 @ N8\ndie" id="257"]
261 [label="261 @ N3\ndie" id="261"]
255 [label="255 @ N5\ndie" id="255"]
259 [label="259 @ N9\ndie" id="259"]
163 [label="163 @ N144\nmain" id="163"]
340 [label="340 @ N146\nmain" id="340"]
351 [label="351 @ N65\nDatabase_get entry" id="351"]
352 [label="352 @ N67\nDatabase_get" id="352"]
354 [label="354 @ N69\nDatabase_get" id="354"]
355 [label="355 @ N12\nAddress_print entry" id="355"]
356 [label="356 @ N13\nAddress_print" id="356"]
357 [label="357 @ N14\nAddress_print" id="357"]
358 [label="358 @ N11\nAddress_print exit" id="358"]
359 [label="359 @ N71\nDatabase_get" id="359"]
360 [label="360 @ N68\nDatabase_get" id="360"]
371 [label="371 @ N64\nDatabase_get exit" id="371"]
372 [label="372 @ N149\nmain" id="372"]
353 [label="353 @ N70\nDatabase_get" id="353"]
361 [label="361 @ N1\ndie entry" id="361"]
362 [label="362 @ N6\ndie" id="362"]
363 [label="363 @ N7\ndie" id="363"]
365 [label="365 @ N4\ndie" id="365"]
366 [label="366 @ N8\ndie" id="366"]
370 [label="370 @ N3\ndie" id="370"]
364 [label="364 @ N5\ndie" id="364"]
368 [label="368 @ N9\ndie" id="368"]
339 [label="339 @ N147\nmain" id="339"]
341 [label="341 @ N1\ndie entry" id="341"]
342 [label="342 @ N6\ndie" id="342"]
343 [label="343 @ N7\ndie" id="343"]
345 [label="345 @ N4\ndie" id="345"]
346 [label="346 @ N8\ndie" id="346"]
350 [label="350 @ N3\ndie" id="350"]
344 [label="344 @ N5\ndie" id="344"]
348 [label="348 @ N9\ndie" id="348"]
161 [label="161 @ N139\nmain" id="161"]
375 [label="375 @ N37\nDatabase_create entry" id="375"]
569 [fillcolor="cornflowerblue" label="569 @ N41\nDatabase_create\nABS18" id="569"]
571 [label="571 @ N44\nDatabase_create" id="571"]
572 [label="572 @ N36\nDatabase_create exit" id="572"]
573 [label="573 @ N141\nmain" id="573"]
582 [label="582 @ N24\nDatabase_write entry" id="582"]
583 [label="583 @ N25\nDatabase_write" id="583"]
584 [label="584 @ N26\nDatabase_write" id="584"]
585 [label="585 @ N27\nDatabase_write" id="585"]
586 [label="586 @ N28\nDatabase_write" id="586"]
588 [label="588 @ N29\nDatabase_write" id="588"]
599 [label="599 @ N32\nDatabase_write" id="599"]
601 [label="601 @ N33\nDatabase_write" id="601"]
612 [label="612 @ N23\nDatabase_write exit" id="612"]
613 [label="613 @ N142\nmain" id="613"]
646 [label="646 @ N137\nmain" id="646"]
675 [label="675 @ N173\nmain" id="675"]
683 [fillcolor="green" label="683 @ N101\nmain\nABS23: false" id="683"]
649 [label="649 @ N174\nmain" id="649"]
659 [label="659 @ N175\nmain" id="659"]
669 [label="669 @ N178\nmain" id="669"]
672 [label="672 @ N182\nmain" id="672"]
663 [label="663 @ N179\nmain" id="663"]
666 [label="666 @ N180\nmain" id="666"]
653 [label="653 @ N176\nmain" id="653"]
656 [label="656 @ N177\nmain" id="656"]
600 [label="600 @ N34\nDatabase_write" id="600"]
602 [label="602 @ N1\ndie entry" id="602"]
603 [label="603 @ N6\ndie" id="603"]
604 [label="604 @ N7\ndie" id="604"]
606 [label="606 @ N4\ndie" id="606"]
607 [label="607 @ N8\ndie" id="607"]
611 [label="611 @ N3\ndie" id="611"]
605 [label="605 @ N5\ndie" id="605"]
609 [label="609 @ N9\ndie" id="609"]
587 [label="587 @ N30\nDatabase_write" id="587"]
589 [label="589 @ N1\ndie entry" id="589"]
590 [label="590 @ N6\ndie" id="590"]
591 [label="591 @ N7\ndie" id="591"]
593 [label="593 @ N4\ndie" id="593"]
594 [label="594 @ N8\ndie" id="594"]
598 [label="598 @ N3\ndie" id="598"]
592 [label="592 @ N5\ndie" id="592"]
596 [label="596 @ N9\ndie" id="596"]
570 [label="570 @ N43\nDatabase_create" id="570"]
575 [fillcolor="cornflowerblue" label="575 @ N41\nDatabase_create\nABS19" id="575"]
577 [label="577 @ N44\nDatabase_create" id="577"]
578 [label="578 @ N36\nDatabase_create exit" id="578"]
579 [label="579 @ N141\nmain" id="579"]
614 [label="614 @ N24\nDatabase_write entry" id="614"]
615 [label="615 @ N25\nDatabase_write" id="615"]
616 [label="616 @ N26\nDatabase_write" id="616"]
617 [label="617 @ N27\nDatabase_write" id="617"]
618 [label="618 @ N28\nDatabase_write" id="618"]
620 [label="620 @ N29\nDatabase_write" id="620"]
631 [label="631 @ N32\nDatabase_write" id="631"]
633 [label="633 @ N33\nDatabase_write" id="633"]
644 [label="644 @ N23\nDatabase_write exit" id="644"]
645 [label="645 @ N142\nmain" id="645"]
647 [label="647 @ N137\nmain" id="647"]
677 [label="677 @ N173\nmain" id="677"]
685 [fillcolor="green" label="685 @ N101\nmain\nABS24" id="685"]
651 [label="651 @ N174\nmain" id="651"]
661 [label="661 @ N175\nmain" id="661"]
671 [label="671 @ N178\nmain" id="671"]
673 [label="673 @ N182\nmain" id="673"]
665 [label="665 @ N179\nmain" id="665"]
667 [label="667 @ N180\nmain" id="667"]
655 [label="655 @ N176\nmain" id="655"]
657 [label="657 @ N177\nmain" id="657"]
632 [label="632 @ N34\nDatabase_write" id="632"]
634 [label="634 @ N1\ndie entry" id="634"]
635 [label="635 @ N6\ndie" id="635"]
636 [label="636 @ N7\ndie" id="636"]
638 [label="638 @ N4\ndie" id="638"]
639 [label="639 @ N8\ndie" id="639"]
643 [label="643 @ N3\ndie" id="643"]
637 [label="637 @ N5\ndie" id="637"]
641 [label="641 @ N9\ndie" id="641"]
619 [label="619 @ N30\nDatabase_write" id="619"]
621 [label="621 @ N1\ndie entry" id="621"]
622 [label="622 @ N6\ndie" id="622"]
623 [label="623 @ N7\ndie" id="623"]
625 [label="625 @ N4\ndie" id="625"]
626 [label="626 @ N8\ndie" id="626"]
630 [label="630 @ N3\ndie" id="630"]
624 [label="624 @ N5\ndie" id="624"]
628 [label="628 @ N9\ndie" id="628"]
576 [label="576 @ N43\nDatabase_create" id="576"]
581 [fillcolor="green" label="581 @ N41\nDatabase_create\nABS20" id="581"]
148 [label="148 @ N134\nmain" id="148"]
150 [label="150 @ N1\ndie entry" id="150"]
151 [label="151 @ N6\ndie" id="151"]
152 [label="152 @ N7\ndie" id="152"]
154 [label="154 @ N4\ndie" id="154"]
155 [label="155 @ N8\ndie" id="155"]
159 [label="159 @ N3\ndie" id="159"]
153 [label="153 @ N5\ndie" id="153"]
157 [label="157 @ N9\ndie" id="157"]
143 [label="143 @ N131\nmain" id="143"]
145 [label="145 @ N132\nmain" id="145"]
130 [label="130 @ N127\nmain" id="130"]
132 [label="132 @ N1\ndie entry" id="132"]
133 [label="133 @ N6\ndie" id="133"]
134 [label="134 @ N7\ndie" id="134"]
136 [label="136 @ N4\ndie" id="136"]
137 [label="137 @ N8\ndie" id="137"]
141 [label="141 @ N3\ndie" id="141"]
135 [label="135 @ N5\ndie" id="135"]
139 [label="139 @ N9\ndie" id="139"]
110 [label="110 @ N21\nDatabase_load" id="110"]
112 [label="112 @ N1\ndie entry" id="112"]
113 [label="113 @ N6\ndie" id="113"]
114 [label="114 @ N7\ndie" id="114"]
116 [label="116 @ N4\ndie" id="116"]
117 [label="117 @ N8\ndie" id="117"]
121 [label="121 @ N3\ndie" id="121"]
115 [label="115 @ N5\ndie" id="115"]
119 [label="119 @ N9\ndie" id="119"]
105 [label="105 @ N123\nmain" id="105"]
102 [label="102 @ N119\nmain" id="102"]
127 [label="127 @ N121\nmain" id="127"]
86 [label="86 @ N112\nmain" id="86"]
88 [label="88 @ N1\ndie entry" id="88"]
89 [label="89 @ N6\ndie" id="89"]
90 [label="90 @ N7\ndie" id="90"]
92 [label="92 @ N4\ndie" id="92"]
93 [label="93 @ N8\ndie" id="93"]
97 [label="97 @ N3\ndie" id="97"]
91 [label="91 @ N5\ndie" id="91"]
95 [label="95 @ N9\ndie" id="95"]
69 [label="69 @ N104\nmain" id="69"]
71 [label="71 @ N1\ndie entry" id="71"]
72 [label="72 @ N6\ndie" id="72"]
73 [label="73 @ N7\ndie" id="73"]
75 [label="75 @ N4\ndie" id="75"]
76 [label="76 @ N8\ndie" id="76"]
80 [label="80 @ N3\ndie" id="80"]
74 [label="74 @ N5\ndie" id="74"]
78 [label="78 @ N9\ndie" id="78"]
35 [label="35 @ N96\nmain" id="35"]
37 [label="37 @ N1\ndie entry" id="37"]
38 [label="38 @ N6\ndie" id="38"]
39 [label="39 @ N7\ndie" id="39"]
41 [label="41 @ N4\ndie" id="41"]
42 [label="42 @ N8\ndie" id="42"]
46 [label="46 @ N3\ndie" id="46"]
40 [label="40 @ N5\ndie" id="40"]
44 [label="44 @ N9\ndie" id="44"]
1 -> 34 [label="Line 0: INIT GLOBAL VARS typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); int * __errno_location(); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); int Num = 2; struct Address {   int id;   int set;   char name[512];   char email[512]; } ; struct Database {   struct Address rows[100]; } ; struct Connection {   FILE *file;   struct Database *db; } ; void die(const char *message); void Address_print(struct Address *addr); void Database_load(struct Connection *conn); void Database_write(struct Connection *conn); void Database_create(struct Connection *conn); void Database_set(struct Connection *conn, int id, const char *name, const char *email); void Database_get(struct Connection *conn, int id); void Database_delete(struct Connection *conn, int id); void Database_list(struct Connection *conn); int main(int argc, char *argv[]); Function start dummy edge" id="1 -> 34"]
34 -> 35 [label="Line 2203: [argc < 3]" id="34 -> 35"]
34 -> 36 [label="Line 2203: [!(argc < 3)]" id="34 -> 36"]
36 -> 67 [label="Line 2205: char *filename = argv[1]; char action = argv[2][0]; struct Connection *conn; Label: l1" id="36 -> 67"]
548 -> 67 [style="dashed" weight="0" label="covered by"]
681 -> 67 [style="dashed" weight="0" label="covered by"]
685 -> 67 [style="dashed" weight="0" label="covered by"]
67 -> 68 [label="Line 2210: conn = malloc(8);" id="67 -> 68"]
68 -> 69 [label="Line 2212: [conn == 0]" id="68 -> 69"]
68 -> 70 [label="Line 2212: [!(conn == 0)]" id="68 -> 70"]
70 -> 81 [label="Line 2214: Num = Num - 1;" id="70 -> 81"]
81 -> 82 [label="Line 2215: [Num >= 0]" id="81 -> 82"]
81 -> 83 [label="Line 2215: [!(Num >= 0)]" id="81 -> 83"]
82 -> 84 [label="Line 2215: 0;" id="82 -> 84"]
84 -> 85 [label="Line 2217: conn->db = malloc(103200);" id="84 -> 85"]
85 -> 86 [label="Line 2219: [(conn->db) == 0]" id="85 -> 86"]
85 -> 87 [label="Line 2219: [!((conn->db) == 0)]" id="85 -> 87"]
87 -> 98 [label="Line 2221: Num = Num - 1;" id="87 -> 98"]
98 -> 99 [label="Line 2222: [Num >= 0]" id="98 -> 99"]
98 -> 100 [label="Line 2222: [!(Num >= 0)]" id="98 -> 100"]
99 -> 101 [label="Line 2222: 0;" id="99 -> 101"]
101 -> 102 [label="Line 2224: [action == 'c']" id="101 -> 102"]
101 -> 103 [label="Line 2224: [!(action == 'c')]" id="101 -> 103"]
103 -> 104 [label="Line 2228: conn->file = fopen(filename, 'r+');" id="103 -> 104"]
104 -> 105 [label="Line 2230: [(conn->file) == 0]" id="104 -> 105"]
104 -> 106 [label="Line 2230: [!((conn->file) == 0)]" id="104 -> 106"]
106 -> 107 [label="Line 2231: Database_load(conn)" id="106 -> 107"]
107 -> 108 [label="Line 2127: Function start dummy edge int rc;" id="107 -> 108"]
108 -> 109 [label="Line 2127: rc = fread(conn->db, 103200, 1, conn->file);" id="108 -> 109"]
109 -> 110 [label="Line 2128: [rc != 1]" id="109 -> 110"]
109 -> 111 [label="Line 2128: [!(rc != 1)]" id="109 -> 111"]
111 -> 122 [label="Line 0: default return" id="111 -> 122"]
122 -> 123 [label="Line 2231: Return edge from Database_load to main" id="122 -> 123"]
123 -> 129 [label="Line 0: " id="123 -> 129"]
129 -> 130 [label="Line 2235: [(conn->file) == 0]" id="129 -> 130"]
129 -> 131 [label="Line 2235: [!((conn->file) == 0)]" id="129 -> 131"]
131 -> 142 [label="Line 2239: int id = 0;" id="131 -> 142"]
142 -> 143 [label="Line 2241: [argc > 3]" id="142 -> 143"]
142 -> 147 [label="Line 2241: [!(argc > 3)]" id="142 -> 147"]
147 -> 148 [label="Line 2242: [id >= 100]" id="147 -> 148"]
147 -> 149 [label="Line 2242: [!(id >= 100)]" id="147 -> 149"]
149 -> 160 [label="Line 2244: switch (action)" id="149 -> 160"]
160 -> 161 [label="Line 2245: [action == 'c']" id="160 -> 161"]
160 -> 162 [label="Line 2245: [!(action == 'c')]" id="160 -> 162"]
162 -> 163 [label="Line 2250: [action == 'g']" id="162 -> 163"]
162 -> 164 [label="Line 2250: [!(action == 'g')]" id="162 -> 164"]
164 -> 165 [label="Line 2256: [action == 's']" id="164 -> 165"]
164 -> 166 [label="Line 2256: [!(action == 's')]" id="164 -> 166"]
166 -> 167 [label="Line 2263: [action == 'd']" id="166 -> 167"]
166 -> 168 [label="Line 2263: [!(action == 'd')]" id="166 -> 168"]
168 -> 169 [label="Line 2270: [action == 'l']" id="168 -> 169"]
168 -> 170 [label="Line 2270: [!(action == 'l')]" id="168 -> 170"]
170 -> 171 [label="Line 0: default" id="170 -> 171"]
171 -> 172 [label="Line 2274: die('Invalid action, only: c=create, g=get, s=set, d=del, l=list')" id="171 -> 172"]
172 -> 173 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="172 -> 173"]
173 -> 174 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="173 -> 174"]
174 -> 175 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="174 -> 175"]
174 -> 176 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="174 -> 176"]
176 -> 177 [label="Line 2111: perror(message);" id="176 -> 177"]
177 -> 181 [label="Line 0: " id="177 -> 181"]
175 -> 179 [label="Line 2113: printf('ERROR: %s\n', message);" id="175 -> 179"]
179 -> 181 [label="Line 0: " id="179 -> 181"]
169 -> 182 [label="Line 2271: Database_list(conn)" id="169 -> 182"]
182 -> 482 [label="Line 2189: Function start dummy edge int i = 0; struct Database *db = conn->db; for i = 0;" id="182 -> 482"]
482 -> 483 [label="Line 2192: [i < 100]" id="482 -> 483"]
482 -> 484 [label="Line 2192: [!(i < 100)]" id="482 -> 484"]
484 -> 485 [label="Line 0: default return" id="484 -> 485"]
485 -> 486 [label="Line 2271: Return edge from Database_list to main" id="485 -> 486"]
486 -> 515 [label="Line 2272: break" id="486 -> 515"]
515 -> 518 [label="Line 2277: [!(conn == 0)]" id="515 -> 518"]
515 -> 544 [label="Line 2277: [conn == 0]" id="515 -> 544"]
544 -> 679 [label="Line 2295: Goto: l1" id="544 -> 679"]
683 -> 679 [style="dashed" weight="0" label="covered by"]
518 -> 522 [label="Line 2279: [!((conn->file) == 0)]" id="518 -> 522"]
518 -> 528 [label="Line 2279: [(conn->file) == 0]" id="518 -> 528"]
528 -> 532 [label="Line 2284: [!((conn->db) == 0)]" id="528 -> 532"]
528 -> 538 [label="Line 2284: [(conn->db) == 0]" id="528 -> 538"]
538 -> 541 [label="Line 2291: free(conn);" id="538 -> 541"]
541 -> 544 [label="Line 2293: Num = Num + 1; " id="541 -> 544"]
532 -> 535 [label="Line 2286: free(conn->db);" id="532 -> 535"]
535 -> 538 [label="Line 2288: Num = Num + 1; " id="535 -> 538"]
522 -> 525 [label="Line 2281: fclose(conn->file);" id="522 -> 525"]
525 -> 528 [label="Line 0: " id="525 -> 528"]
483 -> 487 [label="Line 2193: struct Address *cur = &((db->rows)[i]);" id="483 -> 487"]
487 -> 489 [label="Line 2195: [!((cur->set) == 0)]" id="487 -> 489"]
487 -> 496 [label="Line 2195: [(cur->set) == 0]" id="487 -> 496"]
496 -> 498 [label="Line 2192:  i = i + 1;" id="496 -> 498"]
514 -> 498 [style="dashed" weight="0" label="covered by"]
498 -> 499 [label="Line 2192: [i < 100]" id="498 -> 499"]
498 -> 500 [label="Line 2192: [!(i < 100)]" id="498 -> 500"]
500 -> 501 [label="Line 0: default return" id="500 -> 501"]
501 -> 502 [label="Line 2271: Return edge from Database_list to main" id="501 -> 502"]
502 -> 516 [label="Line 2272: break" id="502 -> 516"]
516 -> 520 [label="Line 2277: [!(conn == 0)]" id="516 -> 520"]
516 -> 546 [label="Line 2277: [conn == 0]" id="516 -> 546"]
546 -> 681 [label="Line 2295: Goto: l1" id="546 -> 681"]
520 -> 524 [label="Line 2279: [!((conn->file) == 0)]" id="520 -> 524"]
520 -> 530 [label="Line 2279: [(conn->file) == 0]" id="520 -> 530"]
530 -> 534 [label="Line 2284: [!((conn->db) == 0)]" id="530 -> 534"]
530 -> 540 [label="Line 2284: [(conn->db) == 0]" id="530 -> 540"]
540 -> 542 [label="Line 2291: free(conn);" id="540 -> 542"]
542 -> 546 [label="Line 2293: Num = Num + 1; " id="542 -> 546"]
534 -> 536 [label="Line 2286: free(conn->db);" id="534 -> 536"]
536 -> 540 [label="Line 2288: Num = Num + 1; " id="536 -> 540"]
524 -> 526 [label="Line 2281: fclose(conn->file);" id="524 -> 526"]
526 -> 530 [label="Line 0: " id="526 -> 530"]
499 -> 503 [label="Line 2193: struct Address *cur = &((db->rows)[i]);" id="499 -> 503"]
503 -> 505 [label="Line 2195: [!((cur->set) == 0)]" id="503 -> 505"]
503 -> 512 [label="Line 2195: [(cur->set) == 0]" id="503 -> 512"]
512 -> 514 [label="Line 2192:  i = i + 1;" id="512 -> 514"]
505 -> 506 [label="Line 2196: Address_print(cur)" id="505 -> 506"]
506 -> 507 [label="Line 0: Function start dummy edge" id="506 -> 507"]
507 -> 508 [label="Line 2121: printf('%d %s %s\n', addr->id, addr->name, addr->email);" id="507 -> 508"]
508 -> 509 [label="Line 0: default return" id="508 -> 509"]
509 -> 510 [label="Line 2196: Return edge from Address_print to Database_list" id="509 -> 510"]
510 -> 512 [label="Line 0: " id="510 -> 512"]
489 -> 490 [label="Line 2196: Address_print(cur)" id="489 -> 490"]
490 -> 491 [label="Line 0: Function start dummy edge" id="490 -> 491"]
491 -> 492 [label="Line 2121: printf('%d %s %s\n', addr->id, addr->name, addr->email);" id="491 -> 492"]
492 -> 493 [label="Line 0: default return" id="492 -> 493"]
493 -> 494 [label="Line 2196: Return edge from Address_print to Database_list" id="493 -> 494"]
494 -> 496 [label="Line 0: " id="494 -> 496"]
167 -> 202 [label="Line 2264: [argc != 4]" id="167 -> 202"]
167 -> 203 [label="Line 2264: [!(argc != 4)]" id="167 -> 203"]
203 -> 214 [label="Line 2266: Database_delete(conn, id)" id="203 -> 214"]
214 -> 215 [label="Line 2183: Function start dummy edge struct Address addr = { .id = id, .set = 0 }; (conn->db->rows)[id] = addr; default return" id="214 -> 215"]
215 -> 216 [label="Line 2266: Return edge from Database_delete to main" id="215 -> 216"]
216 -> 217 [label="Line 2267: Database_write(conn)" id="216 -> 217"]
217 -> 218 [label="Line 0: Function start dummy edge" id="217 -> 218"]
218 -> 219 [label="Line 2134: rewind(conn->file);" id="218 -> 219"]
219 -> 220 [label="Line 2136: int rc;" id="219 -> 220"]
220 -> 221 [label="Line 2136: rc = fwrite(conn->db, 103200, 1, conn->file);" id="220 -> 221"]
221 -> 222 [label="Line 2137: [rc != 1]" id="221 -> 222"]
221 -> 223 [label="Line 2137: [!(rc != 1)]" id="221 -> 223"]
223 -> 234 [label="Line 2139: rc = fflush(conn->file);" id="223 -> 234"]
234 -> 235 [label="Line 2140: [rc == -1]" id="234 -> 235"]
234 -> 236 [label="Line 2140: [!(rc == -1)]" id="234 -> 236"]
236 -> 247 [label="Line 0: default return" id="236 -> 247"]
247 -> 248 [label="Line 2267: Return edge from Database_write to main" id="247 -> 248"]
248 -> 374 [label="Line 2268: break" id="248 -> 374"]
374 -> 420 [label="Line 2277: [!(conn == 0)]" id="374 -> 420"]
374 -> 459 [label="Line 2277: [conn == 0]" id="374 -> 459"]
459 -> 548 [label="Line 2295: Goto: l1" id="459 -> 548"]
420 -> 426 [label="Line 2279: [!((conn->file) == 0)]" id="420 -> 426"]
420 -> 435 [label="Line 2279: [(conn->file) == 0]" id="420 -> 435"]
435 -> 441 [label="Line 2284: [!((conn->db) == 0)]" id="435 -> 441"]
435 -> 450 [label="Line 2284: [(conn->db) == 0]" id="435 -> 450"]
450 -> 454 [label="Line 2291: free(conn);" id="450 -> 454"]
454 -> 459 [label="Line 2293: Num = Num + 1; " id="454 -> 459"]
441 -> 445 [label="Line 2286: free(conn->db);" id="441 -> 445"]
445 -> 450 [label="Line 2288: Num = Num + 1; " id="445 -> 450"]
426 -> 430 [label="Line 2281: fclose(conn->file);" id="426 -> 430"]
430 -> 435 [label="Line 0: " id="430 -> 435"]
235 -> 237 [label="Line 2140: die('Cannot flush database.')" id="235 -> 237"]
237 -> 238 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="237 -> 238"]
238 -> 239 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="238 -> 239"]
239 -> 240 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="239 -> 240"]
239 -> 241 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="239 -> 241"]
241 -> 242 [label="Line 2111: perror(message);" id="241 -> 242"]
242 -> 246 [label="Line 0: " id="242 -> 246"]
240 -> 244 [label="Line 2113: printf('ERROR: %s\n', message);" id="240 -> 244"]
244 -> 246 [label="Line 0: " id="244 -> 246"]
222 -> 224 [label="Line 2137: die('Failed to write database.')" id="222 -> 224"]
224 -> 225 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="224 -> 225"]
225 -> 226 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="225 -> 226"]
226 -> 227 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="226 -> 227"]
226 -> 228 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="226 -> 228"]
228 -> 229 [label="Line 2111: perror(message);" id="228 -> 229"]
229 -> 233 [label="Line 0: " id="229 -> 233"]
227 -> 231 [label="Line 2113: printf('ERROR: %s\n', message);" id="227 -> 231"]
231 -> 233 [label="Line 0: " id="231 -> 233"]
202 -> 204 [label="Line 2264: die('Need id to delete')" id="202 -> 204"]
204 -> 205 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="204 -> 205"]
205 -> 206 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="205 -> 206"]
206 -> 207 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="206 -> 207"]
206 -> 208 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="206 -> 208"]
208 -> 209 [label="Line 2111: perror(message);" id="208 -> 209"]
209 -> 213 [label="Line 0: " id="209 -> 213"]
207 -> 211 [label="Line 2113: printf('ERROR: %s\n', message);" id="207 -> 211"]
211 -> 213 [label="Line 0: " id="211 -> 213"]
165 -> 250 [label="Line 2257: [argc != 6]" id="165 -> 250"]
165 -> 251 [label="Line 2257: [!(argc != 6)]" id="165 -> 251"]
251 -> 262 [label="Line 2259: Database_set(conn, id, argv[4], argv[5])" id="251 -> 262"]
262 -> 263 [label="Line 2157: Function start dummy edge struct Address *addr = &((conn->db->rows)[id]);" id="262 -> 263"]
263 -> 264 [label="Line 2158: [(addr->set) == 0]" id="263 -> 264"]
263 -> 265 [label="Line 2158: [!((addr->set) == 0)]" id="263 -> 265"]
265 -> 266 [label="Line 2158: die('Already set, delete it first')" id="265 -> 266"]
266 -> 267 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="266 -> 267"]
267 -> 268 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="267 -> 268"]
268 -> 269 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="268 -> 269"]
268 -> 270 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="268 -> 270"]
270 -> 271 [label="Line 2111: perror(message);" id="270 -> 271"]
271 -> 275 [label="Line 0: " id="271 -> 275"]
269 -> 273 [label="Line 2113: printf('ERROR: %s\n', message);" id="269 -> 273"]
273 -> 275 [label="Line 0: " id="273 -> 275"]
264 -> 276 [label="Line 2160: addr->set = 1; char *res;" id="264 -> 276"]
276 -> 277 [label="Line 2162: res = strncpy(addr->name, name, 512);" id="276 -> 277"]
277 -> 278 [label="Line 2164: [res == 0]" id="277 -> 278"]
277 -> 279 [label="Line 2164: [!(res == 0)]" id="277 -> 279"]
279 -> 290 [label="Line 2166: res = strncpy(addr->email, email, 512);" id="279 -> 290"]
290 -> 291 [label="Line 2167: [res == 0]" id="290 -> 291"]
290 -> 292 [label="Line 2167: [!(res == 0)]" id="290 -> 292"]
292 -> 303 [label="Line 0: default return" id="292 -> 303"]
303 -> 304 [label="Line 2259: Return edge from Database_set to main" id="303 -> 304"]
304 -> 305 [label="Line 2260: Database_write(conn)" id="304 -> 305"]
305 -> 306 [label="Line 0: Function start dummy edge" id="305 -> 306"]
306 -> 307 [label="Line 2134: rewind(conn->file);" id="306 -> 307"]
307 -> 308 [label="Line 2136: int rc;" id="307 -> 308"]
308 -> 309 [label="Line 2136: rc = fwrite(conn->db, 103200, 1, conn->file);" id="308 -> 309"]
309 -> 310 [label="Line 2137: [rc != 1]" id="309 -> 310"]
309 -> 311 [label="Line 2137: [!(rc != 1)]" id="309 -> 311"]
311 -> 322 [label="Line 2139: rc = fflush(conn->file);" id="311 -> 322"]
322 -> 323 [label="Line 2140: [rc == -1]" id="322 -> 323"]
322 -> 324 [label="Line 2140: [!(rc == -1)]" id="322 -> 324"]
324 -> 335 [label="Line 0: default return" id="324 -> 335"]
335 -> 336 [label="Line 2260: Return edge from Database_write to main" id="335 -> 336"]
336 -> 374 [label="Line 2261: break" id="336 -> 374"]
323 -> 325 [label="Line 2140: die('Cannot flush database.')" id="323 -> 325"]
325 -> 326 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="325 -> 326"]
326 -> 327 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="326 -> 327"]
327 -> 328 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="327 -> 328"]
327 -> 329 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="327 -> 329"]
329 -> 330 [label="Line 2111: perror(message);" id="329 -> 330"]
330 -> 334 [label="Line 0: " id="330 -> 334"]
328 -> 332 [label="Line 2113: printf('ERROR: %s\n', message);" id="328 -> 332"]
332 -> 334 [label="Line 0: " id="332 -> 334"]
310 -> 312 [label="Line 2137: die('Failed to write database.')" id="310 -> 312"]
312 -> 313 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="312 -> 313"]
313 -> 314 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="313 -> 314"]
314 -> 315 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="314 -> 315"]
314 -> 316 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="314 -> 316"]
316 -> 317 [label="Line 2111: perror(message);" id="316 -> 317"]
317 -> 321 [label="Line 0: " id="317 -> 321"]
315 -> 319 [label="Line 2113: printf('ERROR: %s\n', message);" id="315 -> 319"]
319 -> 321 [label="Line 0: " id="319 -> 321"]
291 -> 293 [label="Line 2167: die('Email copy failed')" id="291 -> 293"]
293 -> 294 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="293 -> 294"]
294 -> 295 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="294 -> 295"]
295 -> 296 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="295 -> 296"]
295 -> 297 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="295 -> 297"]
297 -> 298 [label="Line 2111: perror(message);" id="297 -> 298"]
298 -> 302 [label="Line 0: " id="298 -> 302"]
296 -> 300 [label="Line 2113: printf('ERROR: %s\n', message);" id="296 -> 300"]
300 -> 302 [label="Line 0: " id="300 -> 302"]
278 -> 280 [label="Line 2164: die('Name copy failed')" id="278 -> 280"]
280 -> 281 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="280 -> 281"]
281 -> 282 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="281 -> 282"]
282 -> 283 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="282 -> 283"]
282 -> 284 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="282 -> 284"]
284 -> 285 [label="Line 2111: perror(message);" id="284 -> 285"]
285 -> 289 [label="Line 0: " id="285 -> 289"]
283 -> 287 [label="Line 2113: printf('ERROR: %s\n', message);" id="283 -> 287"]
287 -> 289 [label="Line 0: " id="287 -> 289"]
250 -> 252 [label="Line 2257: die('Need id, name, email to set')" id="250 -> 252"]
252 -> 253 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="252 -> 253"]
253 -> 254 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="253 -> 254"]
254 -> 255 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="254 -> 255"]
254 -> 256 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="254 -> 256"]
256 -> 257 [label="Line 2111: perror(message);" id="256 -> 257"]
257 -> 261 [label="Line 0: " id="257 -> 261"]
255 -> 259 [label="Line 2113: printf('ERROR: %s\n', message);" id="255 -> 259"]
259 -> 261 [label="Line 0: " id="259 -> 261"]
163 -> 339 [label="Line 2251: [argc != 4]" id="163 -> 339"]
163 -> 340 [label="Line 2251: [!(argc != 4)]" id="163 -> 340"]
340 -> 351 [label="Line 2253: Database_get(conn, id)" id="340 -> 351"]
351 -> 352 [label="Line 2172: Function start dummy edge struct Address *addr = &((conn->db->rows)[id]);" id="351 -> 352"]
352 -> 353 [label="Line 2174: [(addr->set) == 0]" id="352 -> 353"]
352 -> 354 [label="Line 2174: [!((addr->set) == 0)]" id="352 -> 354"]
354 -> 355 [label="Line 2175: Address_print(addr)" id="354 -> 355"]
355 -> 356 [label="Line 0: Function start dummy edge" id="355 -> 356"]
356 -> 357 [label="Line 2121: printf('%d %s %s\n', addr->id, addr->name, addr->email);" id="356 -> 357"]
357 -> 358 [label="Line 0: default return" id="357 -> 358"]
358 -> 359 [label="Line 2175: Return edge from Address_print to Database_get" id="358 -> 359"]
359 -> 360 [label="Line 0: " id="359 -> 360"]
360 -> 371 [label="Line 0: default return" id="360 -> 371"]
371 -> 372 [label="Line 2253: Return edge from Database_get to main" id="371 -> 372"]
372 -> 374 [label="Line 2254: break" id="372 -> 374"]
353 -> 361 [label="Line 2177: die('ID is not set')" id="353 -> 361"]
361 -> 362 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="361 -> 362"]
362 -> 363 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="362 -> 363"]
363 -> 364 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="363 -> 364"]
363 -> 365 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="363 -> 365"]
365 -> 366 [label="Line 2111: perror(message);" id="365 -> 366"]
366 -> 370 [label="Line 0: " id="366 -> 370"]
364 -> 368 [label="Line 2113: printf('ERROR: %s\n', message);" id="364 -> 368"]
368 -> 370 [label="Line 0: " id="368 -> 370"]
339 -> 341 [label="Line 2251: die('Need an id to get')" id="339 -> 341"]
341 -> 342 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="341 -> 342"]
342 -> 343 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="342 -> 343"]
343 -> 344 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="343 -> 344"]
343 -> 345 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="343 -> 345"]
345 -> 346 [label="Line 2111: perror(message);" id="345 -> 346"]
346 -> 350 [label="Line 0: " id="346 -> 350"]
344 -> 348 [label="Line 2113: printf('ERROR: %s\n', message);" id="344 -> 348"]
348 -> 350 [label="Line 0: " id="348 -> 350"]
161 -> 375 [label="Line 2246: Database_create(conn)" id="161 -> 375"]
375 -> 569 [label="Line 2145: Function start dummy edge int i = 0; for i = 0;" id="375 -> 569"]
569 -> 570 [label="Line 2147: [i < 100]" id="569 -> 570"]
569 -> 571 [label="Line 2147: [!(i < 100)]" id="569 -> 571"]
571 -> 572 [label="Line 0: default return" id="571 -> 572"]
572 -> 573 [label="Line 2246: Return edge from Database_create to main" id="572 -> 573"]
573 -> 582 [label="Line 2247: Database_write(conn)" id="573 -> 582"]
582 -> 583 [label="Line 0: Function start dummy edge" id="582 -> 583"]
583 -> 584 [label="Line 2134: rewind(conn->file);" id="583 -> 584"]
584 -> 585 [label="Line 2136: int rc;" id="584 -> 585"]
585 -> 586 [label="Line 2136: rc = fwrite(conn->db, 103200, 1, conn->file);" id="585 -> 586"]
586 -> 587 [label="Line 2137: [rc != 1]" id="586 -> 587"]
586 -> 588 [label="Line 2137: [!(rc != 1)]" id="586 -> 588"]
588 -> 599 [label="Line 2139: rc = fflush(conn->file);" id="588 -> 599"]
599 -> 600 [label="Line 2140: [rc == -1]" id="599 -> 600"]
599 -> 601 [label="Line 2140: [!(rc == -1)]" id="599 -> 601"]
601 -> 612 [label="Line 0: default return" id="601 -> 612"]
612 -> 613 [label="Line 2247: Return edge from Database_write to main" id="612 -> 613"]
613 -> 646 [label="Line 2248: break" id="613 -> 646"]
646 -> 649 [label="Line 2277: [!(conn == 0)]" id="646 -> 649"]
646 -> 675 [label="Line 2277: [conn == 0]" id="646 -> 675"]
675 -> 683 [label="Line 2295: Goto: l1" id="675 -> 683"]
649 -> 653 [label="Line 2279: [!((conn->file) == 0)]" id="649 -> 653"]
649 -> 659 [label="Line 2279: [(conn->file) == 0]" id="649 -> 659"]
659 -> 663 [label="Line 2284: [!((conn->db) == 0)]" id="659 -> 663"]
659 -> 669 [label="Line 2284: [(conn->db) == 0]" id="659 -> 669"]
669 -> 672 [label="Line 2291: free(conn);" id="669 -> 672"]
672 -> 675 [label="Line 2293: Num = Num + 1; " id="672 -> 675"]
663 -> 666 [label="Line 2286: free(conn->db);" id="663 -> 666"]
666 -> 669 [label="Line 2288: Num = Num + 1; " id="666 -> 669"]
653 -> 656 [label="Line 2281: fclose(conn->file);" id="653 -> 656"]
656 -> 659 [label="Line 0: " id="656 -> 659"]
600 -> 602 [label="Line 2140: die('Cannot flush database.')" id="600 -> 602"]
602 -> 603 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="602 -> 603"]
603 -> 604 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="603 -> 604"]
604 -> 605 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="604 -> 605"]
604 -> 606 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="604 -> 606"]
606 -> 607 [label="Line 2111: perror(message);" id="606 -> 607"]
607 -> 611 [label="Line 0: " id="607 -> 611"]
605 -> 609 [label="Line 2113: printf('ERROR: %s\n', message);" id="605 -> 609"]
609 -> 611 [label="Line 0: " id="609 -> 611"]
587 -> 589 [label="Line 2137: die('Failed to write database.')" id="587 -> 589"]
589 -> 590 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="589 -> 590"]
590 -> 591 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="590 -> 591"]
591 -> 592 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="591 -> 592"]
591 -> 593 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="591 -> 593"]
593 -> 594 [label="Line 2111: perror(message);" id="593 -> 594"]
594 -> 598 [label="Line 0: " id="594 -> 598"]
592 -> 596 [label="Line 2113: printf('ERROR: %s\n', message);" id="592 -> 596"]
596 -> 598 [label="Line 0: " id="596 -> 598"]
570 -> 575 [label="Line 2147: struct Address addr = { .id = i, .set = 0 }; (conn->db->rows)[i] = addr;  i = i + 1;" id="570 -> 575"]
581 -> 575 [style="dashed" weight="0" label="covered by"]
575 -> 576 [label="Line 2147: [i < 100]" id="575 -> 576"]
575 -> 577 [label="Line 2147: [!(i < 100)]" id="575 -> 577"]
577 -> 578 [label="Line 0: default return" id="577 -> 578"]
578 -> 579 [label="Line 2246: Return edge from Database_create to main" id="578 -> 579"]
579 -> 614 [label="Line 2247: Database_write(conn)" id="579 -> 614"]
614 -> 615 [label="Line 0: Function start dummy edge" id="614 -> 615"]
615 -> 616 [label="Line 2134: rewind(conn->file);" id="615 -> 616"]
616 -> 617 [label="Line 2136: int rc;" id="616 -> 617"]
617 -> 618 [label="Line 2136: rc = fwrite(conn->db, 103200, 1, conn->file);" id="617 -> 618"]
618 -> 619 [label="Line 2137: [rc != 1]" id="618 -> 619"]
618 -> 620 [label="Line 2137: [!(rc != 1)]" id="618 -> 620"]
620 -> 631 [label="Line 2139: rc = fflush(conn->file);" id="620 -> 631"]
631 -> 632 [label="Line 2140: [rc == -1]" id="631 -> 632"]
631 -> 633 [label="Line 2140: [!(rc == -1)]" id="631 -> 633"]
633 -> 644 [label="Line 0: default return" id="633 -> 644"]
644 -> 645 [label="Line 2247: Return edge from Database_write to main" id="644 -> 645"]
645 -> 647 [label="Line 2248: break" id="645 -> 647"]
647 -> 651 [label="Line 2277: [!(conn == 0)]" id="647 -> 651"]
647 -> 677 [label="Line 2277: [conn == 0]" id="647 -> 677"]
677 -> 685 [label="Line 2295: Goto: l1" id="677 -> 685"]
651 -> 655 [label="Line 2279: [!((conn->file) == 0)]" id="651 -> 655"]
651 -> 661 [label="Line 2279: [(conn->file) == 0]" id="651 -> 661"]
661 -> 665 [label="Line 2284: [!((conn->db) == 0)]" id="661 -> 665"]
661 -> 671 [label="Line 2284: [(conn->db) == 0]" id="661 -> 671"]
671 -> 673 [label="Line 2291: free(conn);" id="671 -> 673"]
673 -> 677 [label="Line 2293: Num = Num + 1; " id="673 -> 677"]
665 -> 667 [label="Line 2286: free(conn->db);" id="665 -> 667"]
667 -> 671 [label="Line 2288: Num = Num + 1; " id="667 -> 671"]
655 -> 657 [label="Line 2281: fclose(conn->file);" id="655 -> 657"]
657 -> 661 [label="Line 0: " id="657 -> 661"]
632 -> 634 [label="Line 2140: die('Cannot flush database.')" id="632 -> 634"]
634 -> 635 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="634 -> 635"]
635 -> 636 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="635 -> 636"]
636 -> 637 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="636 -> 637"]
636 -> 638 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="636 -> 638"]
638 -> 639 [label="Line 2111: perror(message);" id="638 -> 639"]
639 -> 643 [label="Line 0: " id="639 -> 643"]
637 -> 641 [label="Line 2113: printf('ERROR: %s\n', message);" id="637 -> 641"]
641 -> 643 [label="Line 0: " id="641 -> 643"]
619 -> 621 [label="Line 2137: die('Failed to write database.')" id="619 -> 621"]
621 -> 622 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="621 -> 622"]
622 -> 623 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="622 -> 623"]
623 -> 624 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="623 -> 624"]
623 -> 625 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="623 -> 625"]
625 -> 626 [label="Line 2111: perror(message);" id="625 -> 626"]
626 -> 630 [label="Line 0: " id="626 -> 630"]
624 -> 628 [label="Line 2113: printf('ERROR: %s\n', message);" id="624 -> 628"]
628 -> 630 [label="Line 0: " id="628 -> 630"]
576 -> 581 [label="Line 2147: struct Address addr = { .id = i, .set = 0 }; (conn->db->rows)[i] = addr;  i = i + 1;" id="576 -> 581"]
148 -> 150 [label="Line 2242: die('There's not that many records.')" id="148 -> 150"]
150 -> 151 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="150 -> 151"]
151 -> 152 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="151 -> 152"]
152 -> 153 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="152 -> 153"]
152 -> 154 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="152 -> 154"]
154 -> 155 [label="Line 2111: perror(message);" id="154 -> 155"]
155 -> 159 [label="Line 0: " id="155 -> 159"]
153 -> 157 [label="Line 2113: printf('ERROR: %s\n', message);" id="153 -> 157"]
157 -> 159 [label="Line 0: " id="157 -> 159"]
143 -> 145 [label="Line 2241: id = atoi(argv[3]);" id="143 -> 145"]
145 -> 147 [label="Line 0: " id="145 -> 147"]
130 -> 132 [label="Line 2235: die('Failed to open the file')" id="130 -> 132"]
132 -> 133 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="132 -> 133"]
133 -> 134 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="133 -> 134"]
134 -> 135 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="134 -> 135"]
134 -> 136 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="134 -> 136"]
136 -> 137 [label="Line 2111: perror(message);" id="136 -> 137"]
137 -> 141 [label="Line 0: " id="137 -> 141"]
135 -> 139 [label="Line 2113: printf('ERROR: %s\n', message);" id="135 -> 139"]
139 -> 141 [label="Line 0: " id="139 -> 141"]
110 -> 112 [label="Line 2128: die('Failed to load database.')" id="110 -> 112"]
112 -> 113 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="112 -> 113"]
113 -> 114 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="113 -> 114"]
114 -> 115 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="114 -> 115"]
114 -> 116 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="114 -> 116"]
116 -> 117 [label="Line 2111: perror(message);" id="116 -> 117"]
117 -> 121 [label="Line 0: " id="117 -> 121"]
115 -> 119 [label="Line 2113: printf('ERROR: %s\n', message);" id="115 -> 119"]
119 -> 121 [label="Line 0: " id="119 -> 121"]
105 -> 129 [label="Line 0: " id="105 -> 129"]
102 -> 127 [label="Line 2225: conn->file = fopen(filename, 'w');" id="102 -> 127"]
127 -> 129 [label="Line 0: " id="127 -> 129"]
86 -> 88 [label="Line 2219: die('Memory error')" id="86 -> 88"]
88 -> 89 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="88 -> 89"]
89 -> 90 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="89 -> 90"]
90 -> 91 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="90 -> 91"]
90 -> 92 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="90 -> 92"]
92 -> 93 [label="Line 2111: perror(message);" id="92 -> 93"]
93 -> 97 [label="Line 0: " id="93 -> 97"]
91 -> 95 [label="Line 2113: printf('ERROR: %s\n', message);" id="91 -> 95"]
95 -> 97 [label="Line 0: " id="95 -> 97"]
69 -> 71 [label="Line 2212: die('Memory error')" id="69 -> 71"]
71 -> 72 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="71 -> 72"]
72 -> 73 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="72 -> 73"]
73 -> 74 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="73 -> 74"]
73 -> 75 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="73 -> 75"]
75 -> 76 [label="Line 2111: perror(message);" id="75 -> 76"]
76 -> 80 [label="Line 0: " id="76 -> 80"]
74 -> 78 [label="Line 2113: printf('ERROR: %s\n', message);" id="74 -> 78"]
78 -> 80 [label="Line 0: " id="78 -> 80"]
35 -> 37 [label="Line 2203: die('USAGE: ex17 <dbfile> <action> [action params]')" id="35 -> 37"]
37 -> 38 [label="Line 2110: Function start dummy edge int *__CPAchecker_TMP_0;" id="37 -> 38"]
38 -> 39 [label="Line 2110: __CPAchecker_TMP_0 = __errno_location();" id="38 -> 39"]
39 -> 40 [label="Line 2110: [(*__CPAchecker_TMP_0) == 0]" id="39 -> 40"]
39 -> 41 [label="Line 2110: [!((*__CPAchecker_TMP_0) == 0)]" id="39 -> 41"]
41 -> 42 [label="Line 2111: perror(message);" id="41 -> 42"]
42 -> 46 [label="Line 0: " id="42 -> 46"]
40 -> 44 [label="Line 2113: printf('ERROR: %s\n', message);" id="40 -> 44"]
44 -> 46 [label="Line 0: " id="44 -> 46"]
}
