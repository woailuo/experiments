{"nodes":{"0":{"no":0,"func":"nybble"},"1":{"no":1,"func":"nybble"},"2":{"no":2,"func":"nybble"},"4":{"no":4,"func":"nybble"},"5":{"no":5,"func":"nybble"},"6":{"no":6,"func":"nybble"},"9":{"no":9,"func":"nybble"},"10":{"no":10,"func":"nybble"},"11":{"no":11,"func":"nybble"},"13":{"no":13,"func":"nybble"},"14":{"no":14,"func":"nybble"},"15":{"no":15,"func":"nybble"},"18":{"no":18,"func":"hex"},"19":{"no":19,"func":"hex"},"20":{"no":20,"func":"hex"},"21":{"no":21,"func":"hex"},"22":{"no":22,"func":"hex"},"23":{"no":23,"func":"hex"},"24":{"no":24,"func":"hex"},"28":{"no":28,"func":"usage"},"29":{"no":29,"func":"usage"},"30":{"no":30,"func":"usage"},"31":{"no":31,"func":"usage"},"32":{"no":32,"func":"usage"},"33":{"no":33,"func":"usage"},"34":{"no":34,"func":"usage"},"35":{"no":35,"func":"usage"},"37":{"no":37,"func":"main"},"38":{"no":38,"func":"main"},"45":{"no":45,"func":"main"},"46":{"no":46,"func":"main"},"47":{"no":47,"func":"main"},"48":{"no":48,"func":"main"},"49":{"no":49,"func":"main"},"50":{"no":50,"func":"main"},"52":{"no":52,"func":"main"},"53":{"no":53,"func":"main"},"56":{"no":56,"func":"main"},"57":{"no":57,"func":"main"},"60":{"no":60,"func":"main"},"61":{"no":61,"func":"main"},"67":{"no":67,"func":"main"},"68":{"no":68,"func":"main"},"69":{"no":69,"func":"main"},"70":{"no":70,"func":"main"},"72":{"no":72,"func":"main"},"73":{"no":73,"func":"main"},"74":{"no":74,"func":"main"},"75":{"no":75,"func":"main"},"76":{"no":76,"func":"main"},"78":{"no":78,"func":"main"},"79":{"no":79,"func":"main"},"80":{"no":80,"func":"main"},"81":{"no":81,"func":"main"},"82":{"no":82,"func":"main"},"83":{"no":83,"func":"main"},"84":{"no":84,"func":"main"},"85":{"no":85,"func":"main"},"86":{"no":86,"func":"main"},"87":{"no":87,"func":"main"},"89":{"no":89,"func":"main"},"90":{"no":90,"func":"main"},"91":{"no":91,"func":"main"},"92":{"no":92,"func":"main"},"93":{"no":93,"func":"main"},"95":{"no":95,"func":"main"},"96":{"no":96,"func":"main"},"97":{"no":97,"func":"main"},"98":{"no":98,"func":"main"},"100":{"no":100,"func":"main"},"101":{"no":101,"func":"main"},"102":{"no":102,"func":"main"},"103":{"no":103,"func":"main"},"104":{"no":104,"func":"main"},"106":{"no":106,"func":"main"},"107":{"no":107,"func":"main"},"108":{"no":108,"func":"main"},"109":{"no":109,"func":"main"},"110":{"no":110,"func":"main"},"111":{"no":111,"func":"main"},"112":{"no":112,"func":"main"},"113":{"no":113,"func":"main"},"114":{"no":114,"func":"main"},"115":{"no":115,"func":"main"},"117":{"no":117,"func":"main"},"118":{"no":118,"func":"main"},"119":{"no":119,"func":"main"},"120":{"no":120,"func":"main"},"122":{"no":122,"func":"main"},"123":{"no":123,"func":"main"},"125":{"no":125,"func":"process_ihex"},"126":{"no":126,"func":"process_ihex"},"127":{"no":127,"func":"process_ihex"},"139":{"no":139,"func":"process_ihex"},"140":{"no":140,"func":"process_ihex"},"141":{"no":141,"func":"process_ihex"},"142":{"no":142,"func":"process_ihex"},"143":{"no":143,"func":"process_ihex"},"144":{"no":144,"func":"process_ihex"},"148":{"no":148,"func":"process_ihex"},"149":{"no":149,"func":"process_ihex"},"151":{"no":151,"func":"process_ihex"},"153":{"no":153,"func":"process_ihex"},"154":{"no":154,"func":"process_ihex"},"155":{"no":155,"func":"process_ihex"},"157":{"no":157,"func":"process_ihex"},"158":{"no":158,"func":"process_ihex"},"159":{"no":159,"func":"process_ihex"},"160":{"no":160,"func":"process_ihex"},"162":{"no":162,"func":"process_ihex"},"163":{"no":163,"func":"process_ihex"},"166":{"no":166,"func":"process_ihex"},"167":{"no":167,"func":"process_ihex"},"168":{"no":168,"func":"process_ihex"},"169":{"no":169,"func":"process_ihex"},"170":{"no":170,"func":"process_ihex"},"171":{"no":171,"func":"process_ihex"},"172":{"no":172,"func":"process_ihex"},"173":{"no":173,"func":"process_ihex"},"175":{"no":175,"func":"process_ihex"},"176":{"no":176,"func":"process_ihex"},"177":{"no":177,"func":"process_ihex"},"178":{"no":178,"func":"process_ihex"},"179":{"no":179,"func":"process_ihex"},"181":{"no":181,"func":"process_ihex"},"182":{"no":182,"func":"process_ihex"},"185":{"no":185,"func":"process_ihex"},"186":{"no":186,"func":"process_ihex"},"188":{"no":188,"func":"process_ihex"},"189":{"no":189,"func":"process_ihex"},"192":{"no":192,"func":"process_ihex"},"194":{"no":194,"func":"process_ihex"},"195":{"no":195,"func":"process_ihex"},"196":{"no":196,"func":"process_ihex"},"200":{"no":200,"func":"process_ihex"},"201":{"no":201,"func":"process_ihex"},"202":{"no":202,"func":"process_ihex"},"203":{"no":203,"func":"process_ihex"},"204":{"no":204,"func":"process_ihex"},"206":{"no":206,"func":"process_ihex"},"207":{"no":207,"func":"process_ihex"},"209":{"no":209,"func":"process_ihex"},"210":{"no":210,"func":"process_ihex"},"211":{"no":211,"func":"process_ihex"},"212":{"no":212,"func":"process_ihex"},"214":{"no":214,"func":"process_ihex"},"215":{"no":215,"func":"process_ihex"},"217":{"no":217,"func":"process_ihex"},"218":{"no":218,"func":"process_ihex"},"219":{"no":219,"func":"process_ihex"},"220":{"no":220,"func":"process_ihex"},"221":{"no":221,"func":"process_ihex"},"222":{"no":222,"func":"process_ihex"},"225":{"no":225,"func":"process_ihex"},"226":{"no":226,"func":"process_ihex"},"227":{"no":227,"func":"process_ihex"},"228":{"no":228,"func":"process_ihex"},"229":{"no":229,"func":"process_ihex"},"230":{"no":230,"func":"process_ihex"},"231":{"no":231,"func":"process_ihex"},"232":{"no":232,"func":"process_ihex"},"235":{"no":235,"func":"process_ihex"},"236":{"no":236,"func":"process_ihex"},"237":{"no":237,"func":"process_ihex"},"238":{"no":238,"func":"process_ihex"},"241":{"no":241,"func":"process_ihex"},"242":{"no":242,"func":"process_ihex"},"243":{"no":243,"func":"process_ihex"},"244":{"no":244,"func":"process_ihex"},"245":{"no":245,"func":"process_ihex"},"246":{"no":246,"func":"process_ihex"},"247":{"no":247,"func":"process_ihex"},"248":{"no":248,"func":"process_ihex"},"250":{"no":250,"func":"process_ihex"},"251":{"no":251,"func":"process_ihex"},"252":{"no":252,"func":"process_ihex"},"253":{"no":253,"func":"process_ihex"},"254":{"no":254,"func":"process_ihex"},"255":{"no":255,"func":"process_ihex"},"257":{"no":257,"func":"process_ihex"},"258":{"no":258,"func":"process_ihex"},"261":{"no":261,"func":"file_record"},"262":{"no":262,"func":"file_record"},"263":{"no":263,"func":"file_record"},"265":{"no":265,"func":"file_record"},"266":{"no":266,"func":"file_record"},"267":{"no":267,"func":"file_record"},"268":{"no":268,"func":"file_record"},"269":{"no":269,"func":"file_record"},"273":{"no":273,"func":"output_records"},"274":{"no":274,"func":"output_records"},"275":{"no":275,"func":"output_records"},"278":{"no":278,"func":"output_records"},"279":{"no":279,"func":"output_records"},"280":{"no":280,"func":"output_records"},"281":{"no":281,"func":"output_records"},"282":{"no":282,"func":"output_records"},"283":{"no":283,"func":"output_records"},"284":{"no":284,"func":"output_records"},"285":{"no":285,"func":"output_records"},"286":{"no":286,"func":"output_records"},"287":{"no":287,"func":"output_records"},"290":{"no":290,"func":"output_records"},"291":{"no":291,"func":"output_records"},"292":{"no":292,"func":"output_records"},"293":{"no":293,"func":"output_records"},"296":{"no":296,"func":"main"}},"edges":{"244->257":{"file":"<none>","line":0,"source":244,"type":"BlankEdge","stmt":"default","target":257},"82->83":{"file":"tf\/ihex2fw.c","line":4429,"source":82,"type":"DeclarationEdge","stmt":"char *__CPAchecker_TMP_4;","target":83},"279->281":{"file":"tf\/ihex2fw.c","line":4599,"source":279,"type":"DeclarationEdge","stmt":"unsigned short int writelen = ((p->len) + 9) & (~3);","target":281},"296->45":{"file":"<multiple files>","line":0,"source":296,"type":"MultiEdge","stmt":"typedef signed char int8_t; typedef short int int16_t; typedef int int32_t; typedef long int int64_t; typedef unsigned char uint8_t; typedef unsigned short int uint16_t; typedef unsigned int uint32_t; typedef unsigned long int uint64_t; typedef signed char int_least8_t; typedef short int int_least16_t; typedef int int_least32_t; typedef long int int_least64_t; typedef unsigned char uint_least8_t; typedef unsigned short int uint_least16_t; typedef unsigned int uint_least32_t; typedef unsigned long int uint_least64_t; typedef signed char int_fast8_t; typedef long int int_fast16_t; typedef long int int_fast32_t; typedef long int int_fast64_t; typedef unsigned char uint_fast8_t; typedef unsigned long int uint_fast16_t; typedef unsigned long int uint_fast32_t; typedef unsigned long int uint_fast64_t; typedef long int intptr_t; typedef unsigned long int uintptr_t; typedef long int intmax_t; typedef unsigned long int uintmax_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 { int __val[2]; }; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int size_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_1 { unsigned long int __val[32UL]; }; typedef struct __anon_type_1 __sigset_t; typedef __sigset_t sigset_t; struct timespec { __time_t tv_sec; long int tv_nsec; }; struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_2 { __fd_mask __fds_bits[32]; }; typedef struct __anon_type_2 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_3 { char __size[56]; long int __align; }; typedef union __anon_type_3 pthread_attr_t; struct __pthread_internal_list { struct __pthread_internal_list *__prev; struct __pthread_internal_list *__next; }; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s { int __lock; unsigned int __count; int __owner; unsigned int __nusers; int __kind; int __spins; __pthread_list_t __list; }; union __anon_type_4 { struct __pthread_mutex_s __data; char __size[40]; long int __align; }; typedef union __anon_type_4 pthread_mutex_t; union __anon_type_5 { char __size[4]; int __align; }; typedef union __anon_type_5 pthread_mutexattr_t; struct __anon_type_6 { int __lock; unsigned int __futex; unsigned long long int __total_seq; unsigned long long int __wakeup_seq; unsigned long long int __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq; }; union __anon_type_7 { struct __anon_type_6 __data; char __size[48]; long long int __align; }; typedef union __anon_type_7 pthread_cond_t; union __anon_type_8 { char __size[4]; int __align; }; typedef union __anon_type_8 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_9 { int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long int __pad1; unsigned long int __pad2; unsigned int __flags; }; union __anon_type_10 { struct __anon_type_9 __data; char __size[56]; long int __align; }; typedef union __anon_type_10 pthread_rwlock_t; union __anon_type_11 { char __size[8]; long int __align; }; typedef union __anon_type_11 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_12 { char __size[32]; long int __align; }; typedef union __anon_type_12 pthread_barrier_t; union __anon_type_13 { char __size[4]; int __align; }; typedef union __anon_type_13 pthread_barrierattr_t; struct iovec { void *iov_base; size_t iov_len; }; ssize_t readv(int __fd, const struct iovec *__iovec, int __count); ssize_t writev(int __fd, const struct iovec *__iovec, int __count); ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); typedef __socklen_t socklen_t; enum __socket_type { SOCK_STREAM = 1, SOCK_DGRAM = 2, SOCK_RAW = 3, SOCK_RDM = 4, SOCK_SEQPACKET = 5, SOCK_DCCP = 6, SOCK_PACKET = 10, SOCK_CLOEXEC = 524288, SOCK_NONBLOCK = 2048 }; typedef unsigned short int sa_family_t; struct sockaddr { sa_family_t sa_family; char sa_data[14]; }; struct sockaddr_storage { sa_family_t ss_family; unsigned long int __ss_align; char __ss_padding[120UL]; }; enum __anon_type_14 { MSG_OOB = 1, MSG_PEEK = 2, MSG_DONTROUTE = 4, MSG_CTRUNC = 8, MSG_PROXY = 16, MSG_TRUNC = 32, MSG_DONTWAIT = 64, MSG_EOR = 128, MSG_WAITALL = 256, MSG_FIN = 512, MSG_SYN = 1024, MSG_CONFIRM = 2048, MSG_RST = 4096, MSG_ERRQUEUE = 8192, MSG_NOSIGNAL = 16384, MSG_MORE = 32768, MSG_CMSG_CLOEXEC = 1073741824 }; struct msghdr { void *msg_name; socklen_t msg_namelen; struct iovec *msg_iov; size_t msg_iovlen; void *msg_control; size_t msg_controllen; int msg_flags; }; struct cmsghdr { size_t cmsg_len; int cmsg_level; int cmsg_type; unsigned char __cmsg_data[]; }; struct cmsghdr * __cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg); enum __anon_type_15 { SCM_RIGHTS = 1 }; struct linger { int l_onoff; int l_linger; }; struct osockaddr { unsigned short int sa_family; unsigned char sa_data[14]; }; enum __anon_type_16 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2 }; int socket(int __domain, int __type, int __protocol); int socketpair(int __domain, int __type, int __protocol, int __fds[2]); int bind(int __fd, const struct sockaddr *__addr, socklen_t __len); int getsockname(int __fd, struct sockaddr *__addr, socklen_t *__len); int connect(int __fd, const struct sockaddr *__addr, socklen_t __len); int getpeername(int __fd, struct sockaddr *__addr, socklen_t *__len); ssize_t send(int __fd, const void *__buf, size_t __n, int __flags); ssize_t recv(int __fd, void *__buf, size_t __n, int __flags); ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len); ssize_t recvfrom(int __fd, void *__buf, size_t __n, int __flags, struct sockaddr *__addr, socklen_t *__addr_len); ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags); ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags); int getsockopt(int __fd, int __level, int __optname, void *__optval, socklen_t *__optlen); int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen); int listen(int __fd, int __n); int accept(int __fd, struct sockaddr *__addr, socklen_t *__addr_len); int shutdown(int __fd, int __how); int sockatmark(int __fd); int isfdtype(int __fd, int __fdtype); enum __anon_type_17 { IPPROTO_IP = 0, IPPROTO_HOPOPTS = 0, IPPROTO_ICMP = 1, IPPROTO_IGMP = 2, IPPROTO_IPIP = 4, IPPROTO_TCP = 6, IPPROTO_EGP = 8, IPPROTO_PUP = 12, IPPROTO_UDP = 17, IPPROTO_IDP = 22, IPPROTO_TP = 29, IPPROTO_DCCP = 33, IPPROTO_IPV6 = 41, IPPROTO_ROUTING = 43, IPPROTO_FRAGMENT = 44, IPPROTO_RSVP = 46, IPPROTO_GRE = 47, IPPROTO_ESP = 50, IPPROTO_AH = 51, IPPROTO_ICMPV6 = 58, IPPROTO_NONE = 59, IPPROTO_DSTOPTS = 60, IPPROTO_MTP = 92, IPPROTO_ENCAP = 98, IPPROTO_PIM = 103, IPPROTO_COMP = 108, IPPROTO_SCTP = 132, IPPROTO_UDPLITE = 136, IPPROTO_RAW = 255, IPPROTO_MAX = 256 }; typedef uint16_t in_port_t; enum __anon_type_18 { IPPORT_ECHO = 7, IPPORT_DISCARD = 9, IPPORT_SYSTAT = 11, IPPORT_DAYTIME = 13, IPPORT_NETSTAT = 15, IPPORT_FTP = 21, IPPORT_TELNET = 23, IPPORT_SMTP = 25, IPPORT_TIMESERVER = 37, IPPORT_NAMESERVER = 42, IPPORT_WHOIS = 43, IPPORT_MTP = 57, IPPORT_TFTP = 69, IPPORT_RJE = 77, IPPORT_FINGER = 79, IPPORT_TTYLINK = 87, IPPORT_SUPDUP = 95, IPPORT_EXECSERVER = 512, IPPORT_LOGINSERVER = 513, IPPORT_CMDSERVER = 514, IPPORT_EFSSERVER = 520, IPPORT_BIFFUDP = 512, IPPORT_WHOSERVER = 513, IPPORT_ROUTESERVER = 520, IPPORT_RESERVED = 1024, IPPORT_USERRESERVED = 5000 }; typedef uint32_t in_addr_t; struct in_addr { in_addr_t s_addr; }; union __anon_type_19 { uint8_t __u6_addr8[16]; uint16_t __u6_addr16[8]; uint32_t __u6_addr32[4]; }; struct in6_addr { union __anon_type_19 __in6_u; }; extern const struct in6_addr in6addr_any; extern const struct in6_addr in6addr_loopback; struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; struct in_addr sin_addr; unsigned char sin_zero[8UL]; }; struct sockaddr_in6 { sa_family_t sin6_family; in_port_t sin6_port; uint32_t sin6_flowinfo; struct in6_addr sin6_addr; uint32_t sin6_scope_id; }; struct ip_mreq { struct in_addr imr_multiaddr; struct in_addr imr_interface; }; struct ip_mreq_source { struct in_addr imr_multiaddr; struct in_addr imr_interface; struct in_addr imr_sourceaddr; }; struct ipv6_mreq { struct in6_addr ipv6mr_multiaddr; unsigned int ipv6mr_interface; }; struct group_req { uint32_t gr_interface; struct sockaddr_storage gr_group; }; struct group_source_req { uint32_t gsr_interface; struct sockaddr_storage gsr_group; struct sockaddr_storage gsr_source; }; struct ip_msfilter { struct in_addr imsf_multiaddr; struct in_addr imsf_interface; uint32_t imsf_fmode; uint32_t imsf_numsrc; struct in_addr imsf_slist[1]; }; struct group_filter { uint32_t gf_interface; struct sockaddr_storage gf_group; uint32_t gf_fmode; uint32_t gf_numsrc; struct sockaddr_storage gf_slist[1]; }; struct ip_opts { struct in_addr ip_dst; char ip_opts[40]; }; struct ip_mreqn { struct in_addr imr_multiaddr; struct in_addr imr_address; int imr_ifindex; }; struct in_pktinfo { int ipi_ifindex; struct in_addr ipi_spec_dst; struct in_addr ipi_addr; }; uint32_t ntohl(uint32_t __netlong); uint16_t ntohs(uint16_t __netshort); uint32_t htonl(uint32_t __hostlong); uint16_t htons(uint16_t __hostshort); int bindresvport(int __sockfd, struct sockaddr_in *__sock_in); int bindresvport6(int __sockfd, struct sockaddr_in6 *__sock_in); in_addr_t inet_addr(const char *__cp); in_addr_t inet_lnaof(struct in_addr __in); struct in_addr inet_makeaddr(in_addr_t __net, in_addr_t __host); in_addr_t inet_netof(struct in_addr __in); in_addr_t inet_network(const char *__cp); char * inet_ntoa(struct in_addr __in); int inet_pton(int __af, const char *__cp, void *__buf); const char * inet_ntop(int __af, const void *__cp, char *__buf, socklen_t __len); int inet_aton(const char *__cp, struct in_addr *__inp); char * inet_neta(in_addr_t __net, char *__buf, size_t __len); char * inet_net_ntop(int __af, const void *__cp, int __bits, char *__buf, size_t __len); int inet_net_pton(int __af, const char *__cp, void *__buf, size_t __len); unsigned int inet_nsap_addr(const char *__cp, unsigned char *__buf, int __len); char * inet_nsap_ntoa(int __len, const unsigned char *__cp, char *__buf); struct _IO_FILE; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_20 { unsigned int __wch; char __wchb[4]; }; struct __anon_type_21 { int __count; union __anon_type_20 __value; }; typedef struct __anon_type_21 __mbstate_t; struct __anon_type_22 { __off_t __pos; __mbstate_t __state; }; typedef struct __anon_type_22 _G_fpos_t; struct __anon_type_23 { __off64_t __pos; __mbstate_t __state; }; typedef struct __anon_type_23 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t; typedef void _IO_lock_t; struct _IO_marker { struct _IO_marker *_next; struct _IO_FILE *_sbuf; int _pos; }; enum __codecvt_result { __codecvt_ok = 0, __codecvt_partial = 1, __codecvt_error = 2, __codecvt_noconv = 3 }; struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40UL]; }; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t ); size_t _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); int * __errno_location(); struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; struct timespec st_atim; struct timespec st_mtim; struct timespec st_ctim; long int __unused[3]; }; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * mmap(void *__addr, size_t __len, int __prot, int __flags, int __fd, __off_t __offset); int munmap(void *__addr, size_t __len); int mprotect(void *__addr, size_t __len, int __prot); int msync(void *__addr, size_t __len, int __flags); int madvise(void *__addr, size_t __len, int __advice); int posix_madvise(void *__addr, size_t __len, int __advice); int mlock(const void *__addr, size_t __len); int munlock(const void *__addr, size_t __len); int mlockall(int __flags); int munlockall(); int mincore(void *__start, size_t __len, unsigned char *__vec); int shm_open(const char *__name, int __oflag, mode_t __mode); int shm_unlink(const char *__name); struct flock { short int l_type; short int l_whence; __off_t l_start; __off_t l_len; __pid_t l_pid; }; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int lockf(int __fd, int __cmd, __off_t __len); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct { struct locale_data *__locales[13]; const unsigned short int *__ctype_b; const int *__ctype_tolower; const int *__ctype_toupper; const char *__names[13]; }; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t strcspn(const char *__s, const char *__reject); size_t strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t strlen(const char *__s); size_t strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t read(int __fd, void *__buf, size_t __nbytes); ssize_t write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum __anon_type_24 { _PC_LINK_MAX = 0, _PC_MAX_CANON = 1, _PC_MAX_INPUT = 2, _PC_NAME_MAX = 3, _PC_PATH_MAX = 4, _PC_PIPE_BUF = 5, _PC_CHOWN_RESTRICTED = 6, _PC_NO_TRUNC = 7, _PC_VDISABLE = 8, _PC_SYNC_IO = 9, _PC_ASYNC_IO = 10, _PC_PRIO_IO = 11, _PC_SOCK_MAXBUF = 12, _PC_FILESIZEBITS = 13, _PC_REC_INCR_XFER_SIZE = 14, _PC_REC_MAX_XFER_SIZE = 15, _PC_REC_MIN_XFER_SIZE = 16, _PC_REC_XFER_ALIGN = 17, _PC_ALLOC_SIZE_MIN = 18, _PC_SYMLINK_MAX = 19, _PC_2_SYMLINKS = 20 }; enum __anon_type_25 { _SC_ARG_MAX = 0, _SC_CHILD_MAX = 1, _SC_CLK_TCK = 2, _SC_NGROUPS_MAX = 3, _SC_OPEN_MAX = 4, _SC_STREAM_MAX = 5, _SC_TZNAME_MAX = 6, _SC_JOB_CONTROL = 7, _SC_SAVED_IDS = 8, _SC_REALTIME_SIGNALS = 9, _SC_PRIORITY_SCHEDULING = 10, _SC_TIMERS = 11, _SC_ASYNCHRONOUS_IO = 12, _SC_PRIORITIZED_IO = 13, _SC_SYNCHRONIZED_IO = 14, _SC_FSYNC = 15, _SC_MAPPED_FILES = 16, _SC_MEMLOCK = 17, _SC_MEMLOCK_RANGE = 18, _SC_MEMORY_PROTECTION = 19, _SC_MESSAGE_PASSING = 20, _SC_SEMAPHORES = 21, _SC_SHARED_MEMORY_OBJECTS = 22, _SC_AIO_LISTIO_MAX = 23, _SC_AIO_MAX = 24, _SC_AIO_PRIO_DELTA_MAX = 25, _SC_DELAYTIMER_MAX = 26, _SC_MQ_OPEN_MAX = 27, _SC_MQ_PRIO_MAX = 28, _SC_VERSION = 29, _SC_PAGESIZE = 30, _SC_RTSIG_MAX = 31, _SC_SEM_NSEMS_MAX = 32, _SC_SEM_VALUE_MAX = 33, _SC_SIGQUEUE_MAX = 34, _SC_TIMER_MAX = 35, _SC_BC_BASE_MAX = 36, _SC_BC_DIM_MAX = 37, _SC_BC_SCALE_MAX = 38, _SC_BC_STRING_MAX = 39, _SC_COLL_WEIGHTS_MAX = 40, _SC_EQUIV_CLASS_MAX = 41, _SC_EXPR_NEST_MAX = 42, _SC_LINE_MAX = 43, _SC_RE_DUP_MAX = 44, _SC_CHARCLASS_NAME_MAX = 45, _SC_2_VERSION = 46, _SC_2_C_BIND = 47, _SC_2_C_DEV = 48, _SC_2_FORT_DEV = 49, _SC_2_FORT_RUN = 50, _SC_2_SW_DEV = 51, _SC_2_LOCALEDEF = 52, _SC_PII = 53, _SC_PII_XTI = 54, _SC_PII_SOCKET = 55, _SC_PII_INTERNET = 56, _SC_PII_OSI = 57, _SC_POLL = 58, _SC_SELECT = 59, _SC_UIO_MAXIOV = 60, _SC_IOV_MAX = 60, _SC_PII_INTERNET_STREAM = 61, _SC_PII_INTERNET_DGRAM = 62, _SC_PII_OSI_COTS = 63, _SC_PII_OSI_CLTS = 64, _SC_PII_OSI_M = 65, _SC_T_IOV_MAX = 66, _SC_THREADS = 67, _SC_THREAD_SAFE_FUNCTIONS = 68, _SC_GETGR_R_SIZE_MAX = 69, _SC_GETPW_R_SIZE_MAX = 70, _SC_LOGIN_NAME_MAX = 71, _SC_TTY_NAME_MAX = 72, _SC_THREAD_DESTRUCTOR_ITERATIONS = 73, _SC_THREAD_KEYS_MAX = 74, _SC_THREAD_STACK_MIN = 75, _SC_THREAD_THREADS_MAX = 76, _SC_THREAD_ATTR_STACKADDR = 77, _SC_THREAD_ATTR_STACKSIZE = 78, _SC_THREAD_PRIORITY_SCHEDULING = 79, _SC_THREAD_PRIO_INHERIT = 80, _SC_THREAD_PRIO_PROTECT = 81, _SC_THREAD_PROCESS_SHARED = 82, _SC_NPROCESSORS_CONF = 83, _SC_NPROCESSORS_ONLN = 84, _SC_PHYS_PAGES = 85, _SC_AVPHYS_PAGES = 86, _SC_ATEXIT_MAX = 87, _SC_PASS_MAX = 88, _SC_XOPEN_VERSION = 89, _SC_XOPEN_XCU_VERSION = 90, _SC_XOPEN_UNIX = 91, _SC_XOPEN_CRYPT = 92, _SC_XOPEN_ENH_I18N = 93, _SC_XOPEN_SHM = 94, _SC_2_CHAR_TERM = 95, _SC_2_C_VERSION = 96, _SC_2_UPE = 97, _SC_XOPEN_XPG2 = 98, _SC_XOPEN_XPG3 = 99, _SC_XOPEN_XPG4 = 100, _SC_CHAR_BIT = 101, _SC_CHAR_MAX = 102, _SC_CHAR_MIN = 103, _SC_INT_MAX = 104, _SC_INT_MIN = 105, _SC_LONG_BIT = 106, _SC_WORD_BIT = 107, _SC_MB_LEN_MAX = 108, _SC_NZERO = 109, _SC_SSIZE_MAX = 110, _SC_SCHAR_MAX = 111, _SC_SCHAR_MIN = 112, _SC_SHRT_MAX = 113, _SC_SHRT_MIN = 114, _SC_UCHAR_MAX = 115, _SC_UINT_MAX = 116, _SC_ULONG_MAX = 117, _SC_USHRT_MAX = 118, _SC_NL_ARGMAX = 119, _SC_NL_LANGMAX = 120, _SC_NL_MSGMAX = 121, _SC_NL_NMAX = 122, _SC_NL_SETMAX = 123, _SC_NL_TEXTMAX = 124, _SC_XBS5_ILP32_OFF32 = 125, _SC_XBS5_ILP32_OFFBIG = 126, _SC_XBS5_LP64_OFF64 = 127, _SC_XBS5_LPBIG_OFFBIG = 128, _SC_XOPEN_LEGACY = 129, _SC_XOPEN_REALTIME = 130, _SC_XOPEN_REALTIME_THREADS = 131, _SC_ADVISORY_INFO = 132, _SC_BARRIERS = 133, _SC_BASE = 134, _SC_C_LANG_SUPPORT = 135, _SC_C_LANG_SUPPORT_R = 136, _SC_CLOCK_SELECTION = 137, _SC_CPUTIME = 138, _SC_THREAD_CPUTIME = 139, _SC_DEVICE_IO = 140, _SC_DEVICE_SPECIFIC = 141, _SC_DEVICE_SPECIFIC_R = 142, _SC_FD_MGMT = 143, _SC_FIFO = 144, _SC_PIPE = 145, _SC_FILE_ATTRIBUTES = 146, _SC_FILE_LOCKING = 147, _SC_FILE_SYSTEM = 148, _SC_MONOTONIC_CLOCK = 149, _SC_MULTI_PROCESS = 150, _SC_SINGLE_PROCESS = 151, _SC_NETWORKING = 152, _SC_READER_WRITER_LOCKS = 153, _SC_SPIN_LOCKS = 154, _SC_REGEXP = 155, _SC_REGEX_VERSION = 156, _SC_SHELL = 157, _SC_SIGNALS = 158, _SC_SPAWN = 159, _SC_SPORADIC_SERVER = 160, _SC_THREAD_SPORADIC_SERVER = 161, _SC_SYSTEM_DATABASE = 162, _SC_SYSTEM_DATABASE_R = 163, _SC_TIMEOUTS = 164, _SC_TYPED_MEMORY_OBJECTS = 165, _SC_USER_GROUPS = 166, _SC_USER_GROUPS_R = 167, _SC_2_PBS = 168, _SC_2_PBS_ACCOUNTING = 169, _SC_2_PBS_LOCATE = 170, _SC_2_PBS_MESSAGE = 171, _SC_2_PBS_TRACK = 172, _SC_SYMLOOP_MAX = 173, _SC_STREAMS = 174, _SC_2_PBS_CHECKPOINT = 175, _SC_V6_ILP32_OFF32 = 176, _SC_V6_ILP32_OFFBIG = 177, _SC_V6_LP64_OFF64 = 178, _SC_V6_LPBIG_OFFBIG = 179, _SC_HOST_NAME_MAX = 180, _SC_TRACE = 181, _SC_TRACE_EVENT_FILTER = 182, _SC_TRACE_INHERIT = 183, _SC_TRACE_LOG = 184, _SC_LEVEL1_ICACHE_SIZE = 185, _SC_LEVEL1_ICACHE_ASSOC = 186, _SC_LEVEL1_ICACHE_LINESIZE = 187, _SC_LEVEL1_DCACHE_SIZE = 188, _SC_LEVEL1_DCACHE_ASSOC = 189, _SC_LEVEL1_DCACHE_LINESIZE = 190, _SC_LEVEL2_CACHE_SIZE = 191, _SC_LEVEL2_CACHE_ASSOC = 192, _SC_LEVEL2_CACHE_LINESIZE = 193, _SC_LEVEL3_CACHE_SIZE = 194, _SC_LEVEL3_CACHE_ASSOC = 195, _SC_LEVEL3_CACHE_LINESIZE = 196, _SC_LEVEL4_CACHE_SIZE = 197, _SC_LEVEL4_CACHE_ASSOC = 198, _SC_LEVEL4_CACHE_LINESIZE = 199, _SC_IPV6 = 235, _SC_RAW_SOCKETS = 236, _SC_V7_ILP32_OFF32 = 237, _SC_V7_ILP32_OFFBIG = 238, _SC_V7_LP64_OFF64 = 239, _SC_V7_LPBIG_OFFBIG = 240, _SC_SS_REPL_MAX = 241, _SC_TRACE_EVENT_NAME_MAX = 242, _SC_TRACE_NAME_MAX = 243, _SC_TRACE_SYS_MAX = 244, _SC_TRACE_USER_EVENT_MAX = 245, _SC_XOPEN_STREAMS = 246, _SC_THREAD_ROBUST_PRIO_INHERIT = 247, _SC_THREAD_ROBUST_PRIO_PROTECT = 248 }; enum __anon_type_26 { _CS_PATH = 0, _CS_V6_WIDTH_RESTRICTED_ENVS = 1, _CS_GNU_LIBC_VERSION = 2, _CS_GNU_LIBPTHREAD_VERSION = 3, _CS_V5_WIDTH_RESTRICTED_ENVS = 4, _CS_V7_WIDTH_RESTRICTED_ENVS = 5, _CS_LFS_CFLAGS = 1000, _CS_LFS_LDFLAGS = 1001, _CS_LFS_LIBS = 1002, _CS_LFS_LINTFLAGS = 1003, _CS_LFS64_CFLAGS = 1004, _CS_LFS64_LDFLAGS = 1005, _CS_LFS64_LIBS = 1006, _CS_LFS64_LINTFLAGS = 1007, _CS_XBS5_ILP32_OFF32_CFLAGS = 1100, _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101, _CS_XBS5_ILP32_OFF32_LIBS = 1102, _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103, _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104, _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105, _CS_XBS5_ILP32_OFFBIG_LIBS = 1106, _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107, _CS_XBS5_LP64_OFF64_CFLAGS = 1108, _CS_XBS5_LP64_OFF64_LDFLAGS = 1109, _CS_XBS5_LP64_OFF64_LIBS = 1110, _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111, _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112, _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113, _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114, _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115, _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116, _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117, _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118, _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119, _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120, _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121, _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122, _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123, _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124, _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125, _CS_POSIX_V6_LP64_OFF64_LIBS = 1126, _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127, _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128, _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129, _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130, _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131, _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132, _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133, _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134, _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135, _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136, _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137, _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138, _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139, _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140, _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141, _CS_POSIX_V7_LP64_OFF64_LIBS = 1142, _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143, _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144, _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145, _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146, _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 }; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t confstr(int __name, char *__buf, size_t __len); __pid_t getpid(); __pid_t getppid(); __pid_t getpgrp(); __pid_t __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t setsid(); __uid_t getuid(); __uid_t geteuid(); __gid_t getgid(); __gid_t getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t fork(); __pid_t vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int fdatasync(int __fildes); typedef int wchar_t; struct __anon_type_27 { int quot; int rem; }; typedef struct __anon_type_27 div_t; struct __anon_type_28 { long int quot; long int rem; }; typedef struct __anon_type_28 ldiv_t; struct __anon_type_29 { long long int quot; long long int rem; }; typedef struct __anon_type_29 lldiv_t; size_t __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data { int32_t *fptr; int32_t *rptr; int32_t *state; int rand_type; int rand_deg; int rand_sep; int32_t *end_ptr; }; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data { unsigned short int __x[3]; unsigned short int __old_x[3]; unsigned short int __c; unsigned short int __init; unsigned long long int __a; }; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t div(int __numer, int __denom); ldiv_t ldiv(long int __numer, long int __denom); lldiv_t lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct option { const char *name; int has_arg; int *flag; int val; }; int getopt_long(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); int getopt_long_only(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 0; struct ihex_binrec { struct ihex_binrec *next; uint32_t addr; uint16_t len; uint8_t data[]; }; uint8_t nybble(const uint8_t n); uint8_t hex(const uint8_t *data, uint8_t *crc); int process_ihex(uint8_t *data, ssize_t size); void file_record(struct ihex_binrec *record); int output_records(int outfd); int sort_records = 0; int wide_records = 0; int include_jump = 0; int usage(); int main(int argc, char **argv); struct ihex_binrec *records = 0; Function start dummy edge int infd; int outfd; struct stat st; uint8_t *data; int opt; while","target":45},"185->186":{"file":"tf\/ihex2fw.c","line":4507,"source":185,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_5 = hex(data + i, &crc);","target":186},"242->243":{"file":"tf\/ihex2fw.c","line":4555,"source":242,"type":"AssumeEdge","stmt":"[type == 5]","target":243},"242->244":{"file":"tf\/ihex2fw.c","line":4555,"source":242,"type":"AssumeEdge","stmt":"[!(type == 5)]","target":244},"109->110":{"file":"tf\/ihex2fw.c","line":4448,"source":109,"type":"StatementEdge","stmt":"__CPAchecker_TMP_8 = __errno_location();","target":110},"110->111":{"file":"tf\/ihex2fw.c","line":4448,"source":110,"type":"DeclarationEdge","stmt":"char *__CPAchecker_TMP_9;","target":111},"126->127":{"file":"<none>","line":0,"source":126,"type":"BlankEdge","stmt":"Function start dummy edge","target":127},"221->219":{"file":"tf\/ihex2fw.c","line":4533,"source":221,"type":"AssumeEdge","stmt":"[(record->len) == 0]","target":219},"29->30":{"file":"<none>","line":0,"source":29,"type":"BlankEdge","stmt":"Function start dummy edge","target":30},"50->45":{"file":"<none>","line":0,"source":50,"type":"BlankEdge","stmt":"","target":45},"206->210":{"file":"tf\/ihex2fw.c","line":4523,"source":206,"type":"AssumeEdge","stmt":"[!(type == 0)]","target":210},"225->227":{"file":"tf\/ihex2fw.c","line":4541,"source":225,"type":"BlankEdge","stmt":"fall through","target":227},"166->167":{"file":"tf\/ihex2fw.c","line":4489,"source":166,"type":"StatementEdge","stmt":"Num = Num - 1;","target":167},"263->265":{"file":"tf\/ihex2fw.c","line":4584,"source":263,"type":"MultiEdge","stmt":"struct ihex_binrec **p = &records; while","target":265},"155->125":{"file":"tf\/ihex2fw.c","line":4479,"source":155,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"237->238":{"file":"tf\/ihex2fw.c","line":4551,"source":237,"type":"StatementEdge","stmt":"__CPAchecker_TMP_7 = 16;","target":238},"202->206":{"file":"tf\/ihex2fw.c","line":4522,"source":202,"type":"BlankEdge","stmt":"switch (type)","target":206},"38->296":{"file":"<none>","line":0,"source":38,"type":"BlankEdge","stmt":"INIT GLOBAL VARS","target":296},"57->60":{"file":"tf\/ihex2fw.c","line":4414,"source":57,"type":"AssumeEdge","stmt":"[opt == 'j']","target":60},"11->9":{"file":"tf\/ihex2fw.c","line":4368,"source":11,"type":"AssumeEdge","stmt":"[n <= 'F']","target":9},"57->61":{"file":"tf\/ihex2fw.c","line":4414,"source":57,"type":"AssumeEdge","stmt":"[!(opt == 'j')]","target":61},"162->163":{"file":"tf\/ihex2fw.c","line":4485,"source":162,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_2 = hex(data + i, &crc);","target":163},"227->230":{"file":"tf\/ihex2fw.c","line":4542,"source":227,"type":"AssumeEdge","stmt":"[!((record->addr) == 0)]","target":230},"5->10":{"file":"tf\/ihex2fw.c","line":4368,"source":5,"type":"AssumeEdge","stmt":"[!(n >= 'A')]","target":10},"5->11":{"file":"tf\/ihex2fw.c","line":4368,"source":5,"type":"AssumeEdge","stmt":"[n >= 'A']","target":11},"178->179":{"file":"tf\/ihex2fw.c","line":4501,"source":178,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Not enough data to read complete record at line %d\\n\\\", line);","target":179},"230->232":{"file":"tf\/ihex2fw.c","line":4543,"source":230,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Bad HEX86\/HEX386 record (type %02X) at line %d\\n\\\", type, line);","target":232},"45->48":{"file":"tf\/ihex2fw.c","line":4406,"source":45,"type":"StatementEdge","stmt":"opt = getopt(argc, argv, \\\"wsj\\\");","target":48},"246->248":{"file":"tf\/ihex2fw.c","line":4557,"source":246,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Bad Start Address record (type %02X) at line %d\\n\\\", type, line);","target":248},"227->231":{"file":"tf\/ihex2fw.c","line":4542,"source":227,"type":"AssumeEdge","stmt":"[(record->addr) == 0]","target":231},"114->115":{"file":"tf\/ihex2fw.c","line":4450,"source":114,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_10 = usage();","target":115},"34->35":{"file":"tf\/ihex2fw.c","line":4395,"source":34,"type":"StatementEdge","stmt":"fprintf(stderr, \\\" -j: include records for CS:IP\/EIP address\\n\\\");","target":35},"206->209":{"file":"tf\/ihex2fw.c","line":4523,"source":206,"type":"AssumeEdge","stmt":"[type == 0]","target":209},"200->201":{"file":"tf\/ihex2fw.c","line":4514,"source":200,"type":"StatementEdge","stmt":"i = i + 2;","target":201},"189->192":{"file":"tf\/ihex2fw.c","line":4508,"source":189,"type":"MultiEdge","stmt":"i = i + 2; for j = 0;","target":192},"171->175":{"file":"tf\/ihex2fw.c","line":4496,"source":171,"type":"StatementEdge","stmt":"memset(record, 0, ((14 + len) + 3) & (~3));","target":175},"96->103":{"file":"tf\/ihex2fw.c","line":4443,"source":96,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_7;","target":103},"218->225":{"file":"tf\/ihex2fw.c","line":4540,"source":218,"type":"AssumeEdge","stmt":"[type == 2]","target":225},"181->182":{"file":"tf\/ihex2fw.c","line":4506,"source":181,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_4 = hex(data + i, &crc);","target":182},"218->226":{"file":"tf\/ihex2fw.c","line":4540,"source":218,"type":"AssumeEdge","stmt":"[!(type == 2)]","target":226},"141->144":{"file":"tf\/ihex2fw.c","line":4472,"source":141,"type":"AssumeEdge","stmt":"[(data[i]) == '\\xa']","target":144},"74->78":{"file":"tf\/ihex2fw.c","line":4427,"source":74,"type":"StatementEdge","stmt":"infd = open(argv[optind], 0);","target":78},"119->120":{"file":"tf\/ihex2fw.c","line":4452,"source":119,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_11 = process_ihex(data, st.st_size);","target":120},"85->86":{"file":"tf\/ihex2fw.c","line":4431,"source":85,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_5;","target":86},"10->15":{"file":"tf\/ihex2fw.c","line":4369,"source":10,"type":"AssumeEdge","stmt":"[n >= 'a']","target":15},"141->143":{"file":"tf\/ihex2fw.c","line":4472,"source":141,"type":"AssumeEdge","stmt":"[!((data[i]) == '\\xa')]","target":143},"10->13":{"file":"tf\/ihex2fw.c","line":4369,"source":10,"type":"AssumeEdge","stmt":"[!(n >= 'a')]","target":13},"258->125":{"file":"tf\/ihex2fw.c","line":4574,"source":258,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"107->119":{"file":"tf\/ihex2fw.c","line":4452,"source":107,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_11;","target":119},"120->117":{"file":"tf\/ihex2fw.c","line":4452,"source":120,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_11 == 0]","target":117},"120->118":{"file":"tf\/ihex2fw.c","line":4452,"source":120,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_11 == 0)]","target":118},"221->220":{"file":"tf\/ihex2fw.c","line":4533,"source":221,"type":"AssumeEdge","stmt":"[!((record->len) == 0)]","target":220},"21->22":{"file":"tf\/ihex2fw.c","line":4375,"source":21,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_0 = nybble(data[0]);","target":22},"30->31":{"file":"tf\/ihex2fw.c","line":4390,"source":30,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"ihex2fw: Convert ihex files into binary representation for use by Linux kernel\\n\\\");","target":31},"282->283":{"file":"tf\/ihex2fw.c","line":4602,"source":282,"type":"StatementEdge","stmt":"p->len = htons(p->len);","target":283},"159->166":{"file":"tf\/ihex2fw.c","line":4487,"source":159,"type":"StatementEdge","stmt":"record = malloc(((14 + len) + 3) & (~3));","target":166},"267->261":{"file":"tf\/ihex2fw.c","line":4589,"source":267,"type":"MultiEdge","stmt":"record->next = *p; *p = record; default return","target":261},"168->170":{"file":"tf\/ihex2fw.c","line":4490,"source":168,"type":"StatementEdge","stmt":"(void)0;","target":170},"175->176":{"file":"tf\/ihex2fw.c","line":4497,"source":175,"type":"StatementEdge","stmt":"record->len = len;","target":176},"248->125":{"file":"tf\/ihex2fw.c","line":4559,"source":248,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"214->215":{"file":"tf\/ihex2fw.c","line":4529,"source":214,"type":"CallToReturnEdge","stmt":"file_record(record);","target":215},"100->107":{"file":"tf\/ihex2fw.c","line":4447,"source":100,"type":"AssumeEdge","stmt":"[!(outfd == -1)]","target":107},"100->108":{"file":"tf\/ihex2fw.c","line":4447,"source":100,"type":"AssumeEdge","stmt":"[outfd == -1]","target":108},"231->229":{"file":"tf\/ihex2fw.c","line":4542,"source":231,"type":"AssumeEdge","stmt":"[!((record->len) != 2)]","target":229},"204->125":{"file":"tf\/ihex2fw.c","line":4518,"source":204,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"101->100":{"file":"tf\/ihex2fw.c","line":4444,"source":101,"type":"MultiEdge","stmt":"outfd = 1; ","target":100},"179->125":{"file":"tf\/ihex2fw.c","line":4503,"source":179,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"24->18":{"file":"tf\/ihex2fw.c","line":4375,"source":24,"type":"MultiEdge","stmt":"unsigned char val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;","target":18},"194->196":{"file":"tf\/ihex2fw.c","line":4511,"source":194,"type":"CallToReturnEdge","stmt":"(record->data)[j] = hex(data + i, &crc);","target":196},"231->230":{"file":"tf\/ihex2fw.c","line":4542,"source":231,"type":"AssumeEdge","stmt":"[(record->len) != 2]","target":230},"157->158":{"file":"tf\/ihex2fw.c","line":4482,"source":157,"type":"StatementEdge","stmt":"i = i + 2;","target":158},"266->265":{"file":"tf\/ihex2fw.c","line":4587,"source":266,"type":"MultiEdge","stmt":"p = &((*p)->next); ","target":265},"68->69":{"file":"tf\/ihex2fw.c","line":4422,"source":68,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_1;","target":69},"209->212":{"file":"tf\/ihex2fw.c","line":4525,"source":209,"type":"AssumeEdge","stmt":"[(record->len) == 0]","target":212},"229->235":{"file":"tf\/ihex2fw.c","line":4550,"source":229,"type":"MultiEdge","stmt":"offset = (((record->data)[0]) << 8) | ((record->data)[1]); int __CPAchecker_TMP_7;","target":235},"209->211":{"file":"tf\/ihex2fw.c","line":4525,"source":209,"type":"AssumeEdge","stmt":"[!((record->len) == 0)]","target":211},"251->252":{"file":"tf\/ihex2fw.c","line":4564,"source":251,"type":"StatementEdge","stmt":"memcpy(&((record->data)[0]), &data32, 4);","target":252},"158->160":{"file":"tf\/ihex2fw.c","line":4483,"source":158,"type":"AssumeEdge","stmt":"[!(wide_records == 0)]","target":160},"238->139":{"file":"tf\/ihex2fw.c","line":4551,"source":238,"type":"MultiEdge","stmt":"offset = offset << __CPAchecker_TMP_7; Goto: next_record","target":139},"285->273":{"file":"tf\/ihex2fw.c","line":4604,"source":285,"type":"ReturnStatementEdge","stmt":"return 1;","target":273},"46->49":{"file":"tf\/ihex2fw.c","line":4407,"source":46,"type":"BlankEdge","stmt":"switch (opt)","target":49},"81->82":{"file":"tf\/ihex2fw.c","line":4429,"source":81,"type":"StatementEdge","stmt":"__CPAchecker_TMP_3 = __errno_location();","target":82},"232->125":{"file":"tf\/ihex2fw.c","line":4545,"source":232,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"6->4":{"file":"tf\/ihex2fw.c","line":4367,"source":6,"type":"AssumeEdge","stmt":"[n <= '9']","target":4},"6->5":{"file":"tf\/ihex2fw.c","line":4367,"source":6,"type":"AssumeEdge","stmt":"[!(n <= '9')]","target":5},"292->293":{"file":"tf\/ihex2fw.c","line":4609,"source":292,"type":"StatementEdge","stmt":"__CPAchecker_TMP_1 = write(outfd, zeroes, 6);","target":293},"143->151":{"file":"tf\/ihex2fw.c","line":4473,"source":143,"type":"MultiEdge","stmt":"int __CPAchecker_TMP_1 = i; i = i + 1;","target":151},"160->162":{"file":"tf\/ihex2fw.c","line":4484,"source":160,"type":"MultiEdge","stmt":"len = len << 8; uint8_t __CPAchecker_TMP_2;","target":162},"70->37":{"file":"tf\/ihex2fw.c","line":4422,"source":70,"type":"ReturnStatementEdge","stmt":"return __CPAchecker_TMP_1;","target":37},"265->268":{"file":"tf\/ihex2fw.c","line":4586,"source":265,"type":"AssumeEdge","stmt":"[!((*p) == 0)]","target":268},"265->267":{"file":"tf\/ihex2fw.c","line":4586,"source":265,"type":"AssumeEdge","stmt":"[(*p) == 0]","target":267},"148->140":{"file":"<none>","line":0,"source":148,"type":"BlankEdge","stmt":"","target":140},"1->2":{"file":"<none>","line":0,"source":1,"type":"BlankEdge","stmt":"Function start dummy edge","target":2},"275->278":{"file":"tf\/ihex2fw.c","line":4595,"source":275,"type":"MultiEdge","stmt":"unsigned char zeroes[6] = { 0, 0, 0, 0, 0, 0 }; struct ihex_binrec *p = records; while","target":278},"97->98":{"file":"tf\/ihex2fw.c","line":4439,"source":97,"type":"StatementEdge","stmt":"perror(\\\"mmap\\\");","target":98},"149->142":{"file":"tf\/ihex2fw.c","line":4473,"source":149,"type":"BlankEdge","stmt":"break","target":142},"69->70":{"file":"tf\/ihex2fw.c","line":4422,"source":69,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_1 = usage();","target":70},"274->275":{"file":"<none>","line":0,"source":274,"type":"BlankEdge","stmt":"Function start dummy edge","target":275},"158->159":{"file":"tf\/ihex2fw.c","line":4483,"source":158,"type":"AssumeEdge","stmt":"[wide_records == 0]","target":159},"31->32":{"file":"tf\/ihex2fw.c","line":4392,"source":31,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"usage: ihex2fw [<options>] <src.HEX> <dst.fw>\\n\\\");","target":32},"20->21":{"file":"tf\/ihex2fw.c","line":4375,"source":20,"type":"DeclarationEdge","stmt":"uint8_t __CPAchecker_TMP_0;","target":21},"241->243":{"file":"tf\/ihex2fw.c","line":4555,"source":241,"type":"BlankEdge","stmt":"fall through","target":243},"53->56":{"file":"tf\/ihex2fw.c","line":4411,"source":53,"type":"AssumeEdge","stmt":"[opt == 's']","target":56},"53->57":{"file":"tf\/ihex2fw.c","line":4411,"source":53,"type":"AssumeEdge","stmt":"[!(opt == 's')]","target":57},"142->153":{"file":"tf\/ihex2fw.c","line":4477,"source":142,"type":"AssumeEdge","stmt":"[!((i + 10) > size)]","target":153},"167->169":{"file":"tf\/ihex2fw.c","line":4490,"source":167,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":169},"222->125":{"file":"tf\/ihex2fw.c","line":4536,"source":222,"type":"ReturnStatementEdge","stmt":"return -22;","target":125},"167->168":{"file":"tf\/ihex2fw.c","line":4490,"source":167,"type":"AssumeEdge","stmt":"[Num >= 0]","target":168},"47->67":{"file":"tf\/ihex2fw.c","line":4421,"source":47,"type":"AssumeEdge","stmt":"[!((optind + 2) != argc)]","target":67},"47->68":{"file":"tf\/ihex2fw.c","line":4421,"source":47,"type":"AssumeEdge","stmt":"[(optind + 2) != argc]","target":68},"293->290":{"file":"tf\/ihex2fw.c","line":4609,"source":293,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_1 != 6)]","target":290},"293->291":{"file":"tf\/ihex2fw.c","line":4609,"source":293,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_1 != 6]","target":291},"86->87":{"file":"tf\/ihex2fw.c","line":4431,"source":86,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_5 = usage();","target":87},"75->76":{"file":"tf\/ihex2fw.c","line":4424,"source":75,"type":"StatementEdge","stmt":"__CPAchecker_TMP_2 = strcmp(argv[optind], \\\"-\\\");","target":76},"250->251":{"file":"tf\/ihex2fw.c","line":4563,"source":250,"type":"StatementEdge","stmt":"data32 = htonl(data32);","target":251},"142->154":{"file":"tf\/ihex2fw.c","line":4477,"source":142,"type":"AssumeEdge","stmt":"[(i + 10) > size]","target":154},"139->140":{"file":"tf\/ihex2fw.c","line":4471,"source":139,"type":"BlankEdge","stmt":"while","target":140},"176->178":{"file":"tf\/ihex2fw.c","line":4500,"source":176,"type":"AssumeEdge","stmt":"[((i + 8) + ((record->len) * 2)) > size]","target":178},"176->177":{"file":"tf\/ihex2fw.c","line":4500,"source":176,"type":"AssumeEdge","stmt":"[!(((i + 8) + ((record->len) * 2)) > size)]","target":177},"247->245":{"file":"tf\/ihex2fw.c","line":4556,"source":247,"type":"AssumeEdge","stmt":"[!((record->len) != 4)]","target":245},"284->278":{"file":"tf\/ihex2fw.c","line":4605,"source":284,"type":"MultiEdge","stmt":"p = p->next; ","target":278},"170->172":{"file":"tf\/ihex2fw.c","line":4492,"source":170,"type":"AssumeEdge","stmt":"[record == 0]","target":172},"228->241":{"file":"tf\/ihex2fw.c","line":4554,"source":228,"type":"AssumeEdge","stmt":"[type == 3]","target":241},"247->246":{"file":"tf\/ihex2fw.c","line":4556,"source":247,"type":"AssumeEdge","stmt":"[(record->len) != 4]","target":246},"170->171":{"file":"tf\/ihex2fw.c","line":4492,"source":170,"type":"AssumeEdge","stmt":"[!(record == 0)]","target":171},"228->242":{"file":"tf\/ihex2fw.c","line":4554,"source":228,"type":"AssumeEdge","stmt":"[!(type == 3)]","target":242},"19->20":{"file":"<none>","line":0,"source":19,"type":"BlankEdge","stmt":"Function start dummy edge","target":20},"262->263":{"file":"<none>","line":0,"source":262,"type":"BlankEdge","stmt":"Function start dummy edge","target":263},"278->279":{"file":"tf\/ihex2fw.c","line":4598,"source":278,"type":"AssumeEdge","stmt":"[!(p == 0)]","target":279},"106->100":{"file":"<none>","line":0,"source":106,"type":"BlankEdge","stmt":"","target":100},"243->247":{"file":"tf\/ihex2fw.c","line":4556,"source":243,"type":"AssumeEdge","stmt":"[(record->addr) == 0]","target":247},"111->112":{"file":"tf\/ihex2fw.c","line":4448,"source":111,"type":"StatementEdge","stmt":"__CPAchecker_TMP_9 = strerror(*__CPAchecker_TMP_8);","target":112},"243->246":{"file":"tf\/ihex2fw.c","line":4556,"source":243,"type":"AssumeEdge","stmt":"[!((record->addr) == 0)]","target":246},"195->200":{"file":"tf\/ihex2fw.c","line":4514,"source":195,"type":"CallToReturnEdge","stmt":"crcbyte = hex(data + i, &crc);","target":200},"92->89":{"file":"tf\/ihex2fw.c","line":4433,"source":92,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_6 == 0]","target":89},"127->139":{"file":"tf\/ihex2fw.c","line":4460,"source":127,"type":"MultiEdge","stmt":"struct ihex_binrec *record; unsigned int offset = 0; unsigned int data32; unsigned char type; unsigned char crc = 0; unsigned char crcbyte = 0; int i; int j; int line = 1; int len; i = 0; Label: next_record","target":139},"203->204":{"file":"tf\/ihex2fw.c","line":4516,"source":203,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"CRC failure at line %d: got 0x%X, expected 0x%X\\n\\\", line, crcbyte, (unsigned char)(crcbyte - crc));","target":204},"173->125":{"file":"tf\/ihex2fw.c","line":4494,"source":173,"type":"ReturnStatementEdge","stmt":"return -12;","target":125},"60->50":{"file":"tf\/ihex2fw.c","line":4415,"source":60,"type":"MultiEdge","stmt":"include_jump = 1; break","target":50},"98->37":{"file":"tf\/ihex2fw.c","line":4440,"source":98,"type":"ReturnStatementEdge","stmt":"return 1;","target":37},"281->282":{"file":"tf\/ihex2fw.c","line":4601,"source":281,"type":"StatementEdge","stmt":"p->addr = htonl(p->addr);","target":282},"72->79":{"file":"tf\/ihex2fw.c","line":4428,"source":72,"type":"AssumeEdge","stmt":"[!(infd == -1)]","target":79},"163->159":{"file":"tf\/ihex2fw.c","line":4485,"source":163,"type":"MultiEdge","stmt":"len = len + __CPAchecker_TMP_2; i = i + 2; ","target":159},"35->28":{"file":"tf\/ihex2fw.c","line":4396,"source":35,"type":"ReturnStatementEdge","stmt":"return 1;","target":28},"186->188":{"file":"tf\/ihex2fw.c","line":4507,"source":186,"type":"MultiEdge","stmt":"record->addr = (record->addr) | __CPAchecker_TMP_5; i = i + 2;","target":188},"2->6":{"file":"tf\/ihex2fw.c","line":4367,"source":2,"type":"AssumeEdge","stmt":"[n >= '0']","target":6},"2->5":{"file":"tf\/ihex2fw.c","line":4367,"source":2,"type":"AssumeEdge","stmt":"[!(n >= '0')]","target":5},"15->14":{"file":"tf\/ihex2fw.c","line":4369,"source":15,"type":"AssumeEdge","stmt":"[n <= 'f']","target":14},"257->258":{"file":"tf\/ihex2fw.c","line":4573,"source":257,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Unknown record (type %02X)\\n\\\", type);","target":258},"283->286":{"file":"tf\/ihex2fw.c","line":4603,"source":283,"type":"DeclarationEdge","stmt":"ssize_t __CPAchecker_TMP_0;","target":286},"219->207":{"file":"tf\/ihex2fw.c","line":4538,"source":219,"type":"BlankEdge","stmt":"break","target":207},"15->13":{"file":"tf\/ihex2fw.c","line":4369,"source":15,"type":"AssumeEdge","stmt":"[!(n <= 'f')]","target":13},"80->81":{"file":"tf\/ihex2fw.c","line":4429,"source":80,"type":"DeclarationEdge","stmt":"int *__CPAchecker_TMP_3;","target":81},"278->280":{"file":"tf\/ihex2fw.c","line":4598,"source":278,"type":"AssumeEdge","stmt":"[p == 0]","target":280},"118->37":{"file":"tf\/ihex2fw.c","line":4453,"source":118,"type":"ReturnStatementEdge","stmt":"return 1;","target":37},"92->90":{"file":"tf\/ihex2fw.c","line":4433,"source":92,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_6 == 0)]","target":90},"108->109":{"file":"tf\/ihex2fw.c","line":4448,"source":108,"type":"DeclarationEdge","stmt":"int *__CPAchecker_TMP_8;","target":109},"123->37":{"file":"tf\/ihex2fw.c","line":4455,"source":123,"type":"ReturnStatementEdge","stmt":"return __CPAchecker_TMP_12;","target":37},"151->149":{"file":"tf\/ihex2fw.c","line":4473,"source":151,"type":"AssumeEdge","stmt":"[(data[__CPAchecker_TMP_1]) == ':']","target":149},"255->253":{"file":"<none>","line":0,"source":255,"type":"BlankEdge","stmt":"","target":253},"23->24":{"file":"tf\/ihex2fw.c","line":4375,"source":23,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_1 = nybble(data[1]);","target":24},"76->73":{"file":"tf\/ihex2fw.c","line":4424,"source":76,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_2 == 0]","target":73},"236->238":{"file":"tf\/ihex2fw.c","line":4551,"source":236,"type":"StatementEdge","stmt":"__CPAchecker_TMP_7 = 4;","target":238},"76->74":{"file":"tf\/ihex2fw.c","line":4424,"source":76,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_2 == 0)]","target":74},"172->173":{"file":"tf\/ihex2fw.c","line":4493,"source":172,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"out of memory for records\\n\\\");","target":173},"151->148":{"file":"tf\/ihex2fw.c","line":4473,"source":151,"type":"AssumeEdge","stmt":"[!((data[__CPAchecker_TMP_1]) == ':')]","target":148},"56->50":{"file":"tf\/ihex2fw.c","line":4412,"source":56,"type":"MultiEdge","stmt":"sort_records = 1; break","target":50},"14->0":{"file":"tf\/ihex2fw.c","line":4369,"source":14,"type":"ReturnStatementEdge","stmt":"return n - 87;","target":0},"113->114":{"file":"tf\/ihex2fw.c","line":4450,"source":113,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_10;","target":114},"104->102":{"file":"tf\/ihex2fw.c","line":4443,"source":104,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_7 == 0)]","target":102},"104->101":{"file":"tf\/ihex2fw.c","line":4443,"source":104,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_7 == 0]","target":101},"207->125":{"file":"tf\/ihex2fw.c","line":4577,"source":207,"type":"ReturnStatementEdge","stmt":"return 0;","target":125},"177->181":{"file":"tf\/ihex2fw.c","line":4506,"source":177,"type":"DeclarationEdge","stmt":"uint8_t __CPAchecker_TMP_4;","target":181},"32->33":{"file":"tf\/ihex2fw.c","line":4393,"source":32,"type":"StatementEdge","stmt":"fprintf(stderr, \\\" -w: wide records (16-bit length)\\n\\\");","target":33},"52->50":{"file":"tf\/ihex2fw.c","line":4409,"source":52,"type":"MultiEdge","stmt":"wide_records = 1; break","target":50},"245->250":{"file":"tf\/ihex2fw.c","line":4562,"source":245,"type":"StatementEdge","stmt":"memcpy(&data32, &((record->data)[0]), 4);","target":250},"153->157":{"file":"tf\/ihex2fw.c","line":4482,"source":153,"type":"CallToReturnEdge","stmt":"len = hex(data + i, &crc);","target":157},"196->192":{"file":"tf\/ihex2fw.c","line":4510,"source":196,"type":"MultiEdge","stmt":" int __CPAchecker_TMP_6 = j; j = j + 1; __CPAchecker_TMP_6; i = i + 2;","target":192},"72->80":{"file":"tf\/ihex2fw.c","line":4428,"source":72,"type":"AssumeEdge","stmt":"[infd == -1]","target":80},"79->91":{"file":"tf\/ihex2fw.c","line":4433,"source":79,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_6;","target":91},"144->143":{"file":"tf\/ihex2fw.c","line":4472,"source":144,"type":"MultiEdge","stmt":"int __CPAchecker_TMP_0 = line; line = line + 1; __CPAchecker_TMP_0; ","target":143},"212->207":{"file":"tf\/ihex2fw.c","line":4526,"source":212,"type":"BlankEdge","stmt":"break","target":207},"268->269":{"file":"tf\/ihex2fw.c","line":4586,"source":268,"type":"AssumeEdge","stmt":"[!(sort_records == 0)]","target":269},"287->285":{"file":"tf\/ihex2fw.c","line":4603,"source":287,"type":"AssumeEdge","stmt":"[__CPAchecker_TMP_0 != writelen]","target":285},"287->284":{"file":"tf\/ihex2fw.c","line":4603,"source":287,"type":"AssumeEdge","stmt":"[!(__CPAchecker_TMP_0 != writelen)]","target":284},"140->142":{"file":"tf\/ihex2fw.c","line":4471,"source":140,"type":"AssumeEdge","stmt":"[!(i < size)]","target":142},"140->141":{"file":"tf\/ihex2fw.c","line":4471,"source":140,"type":"AssumeEdge","stmt":"[i < size]","target":141},"48->46":{"file":"tf\/ihex2fw.c","line":4406,"source":48,"type":"AssumeEdge","stmt":"[opt != -1]","target":46},"73->72":{"file":"tf\/ihex2fw.c","line":4425,"source":73,"type":"MultiEdge","stmt":"infd = 0; ","target":72},"83->84":{"file":"tf\/ihex2fw.c","line":4429,"source":83,"type":"StatementEdge","stmt":"__CPAchecker_TMP_4 = strerror(*__CPAchecker_TMP_3);","target":84},"268->266":{"file":"tf\/ihex2fw.c","line":4586,"source":268,"type":"AssumeEdge","stmt":"[sort_records == 0]","target":266},"48->47":{"file":"tf\/ihex2fw.c","line":4406,"source":48,"type":"AssumeEdge","stmt":"[!(opt != -1)]","target":47},"252->253":{"file":"tf\/ihex2fw.c","line":4568,"source":252,"type":"AssumeEdge","stmt":"[include_jump == 0]","target":253},"252->254":{"file":"tf\/ihex2fw.c","line":4568,"source":252,"type":"AssumeEdge","stmt":"[!(include_jump == 0)]","target":254},"286->287":{"file":"tf\/ihex2fw.c","line":4603,"source":286,"type":"StatementEdge","stmt":"__CPAchecker_TMP_0 = write(outfd, &(p->addr), writelen);","target":287},"154->155":{"file":"tf\/ihex2fw.c","line":4478,"source":154,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Can't find valid record at line %d\\n\\\", line);","target":155},"78->72":{"file":"<none>","line":0,"source":78,"type":"BlankEdge","stmt":"","target":72},"254->255":{"file":"tf\/ihex2fw.c","line":4569,"source":254,"type":"CallToReturnEdge","stmt":"file_record(record);","target":255},"290->273":{"file":"tf\/ihex2fw.c","line":4611,"source":290,"type":"ReturnStatementEdge","stmt":"return 0;","target":273},"269->266":{"file":"tf\/ihex2fw.c","line":4586,"source":269,"type":"AssumeEdge","stmt":"[((*p)->addr) < (record->addr)]","target":266},"122->123":{"file":"tf\/ihex2fw.c","line":4455,"source":122,"type":"CallToReturnEdge","stmt":"__CPAchecker_TMP_12 = output_records(outfd);","target":123},"61->50":{"file":"<none>","line":0,"source":61,"type":"BlankEdge","stmt":"","target":50},"269->267":{"file":"tf\/ihex2fw.c","line":4586,"source":269,"type":"AssumeEdge","stmt":"[!(((*p)->addr) < (record->addr))]","target":267},"91->92":{"file":"tf\/ihex2fw.c","line":4433,"source":91,"type":"StatementEdge","stmt":"__CPAchecker_TMP_6 = fstat(infd, &st);","target":92},"211->214":{"file":"tf\/ihex2fw.c","line":4528,"source":211,"type":"StatementEdge","stmt":"record->addr = (record->addr) + offset;","target":214},"192->195":{"file":"tf\/ihex2fw.c","line":4510,"source":192,"type":"AssumeEdge","stmt":"[!(j < (record->len))]","target":195},"117->122":{"file":"tf\/ihex2fw.c","line":4455,"source":117,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_12;","target":122},"217->221":{"file":"tf\/ihex2fw.c","line":4533,"source":217,"type":"AssumeEdge","stmt":"[(record->addr) == 0]","target":221},"192->194":{"file":"tf\/ihex2fw.c","line":4510,"source":192,"type":"AssumeEdge","stmt":"[j < (record->len)]","target":194},"217->220":{"file":"tf\/ihex2fw.c","line":4533,"source":217,"type":"AssumeEdge","stmt":"[!((record->addr) == 0)]","target":220},"102->106":{"file":"tf\/ihex2fw.c","line":4446,"source":102,"type":"StatementEdge","stmt":"outfd = open(argv[optind + 1], 577, 420);","target":106},"169->170":{"file":"tf\/ihex2fw.c","line":4490,"source":169,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >= 0\\\", \\\"tf\/ihex2fw.c\\\", 164, \\\"__PRETTY_FUNCTION__\\\");","target":170},"291->273":{"file":"tf\/ihex2fw.c","line":4610,"source":291,"type":"ReturnStatementEdge","stmt":"return 1;","target":273},"220->222":{"file":"tf\/ihex2fw.c","line":4534,"source":220,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Bad EOF record (type 01) format at line %d\\\", line);","target":222},"115->37":{"file":"tf\/ihex2fw.c","line":4450,"source":115,"type":"ReturnStatementEdge","stmt":"return __CPAchecker_TMP_10;","target":37},"89->95":{"file":"tf\/ihex2fw.c","line":4437,"source":89,"type":"StatementEdge","stmt":"data = mmap((void *)0, st.st_size, 1, 1, infd, 0);","target":95},"93->37":{"file":"tf\/ihex2fw.c","line":4435,"source":93,"type":"ReturnStatementEdge","stmt":"return 1;","target":37},"280->292":{"file":"tf\/ihex2fw.c","line":4609,"source":280,"type":"DeclarationEdge","stmt":"ssize_t __CPAchecker_TMP_1;","target":292},"201->202":{"file":"tf\/ihex2fw.c","line":4515,"source":201,"type":"AssumeEdge","stmt":"[!(crc != 0)]","target":202},"201->203":{"file":"tf\/ihex2fw.c","line":4515,"source":201,"type":"AssumeEdge","stmt":"[crc != 0]","target":203},"188->189":{"file":"tf\/ihex2fw.c","line":4508,"source":188,"type":"CallToReturnEdge","stmt":"type = hex(data + i, &crc);","target":189},"182->185":{"file":"tf\/ihex2fw.c","line":4506,"source":182,"type":"MultiEdge","stmt":"record->addr = __CPAchecker_TMP_4 << 8; i = i + 2; uint8_t __CPAchecker_TMP_5;","target":185},"235->236":{"file":"tf\/ihex2fw.c","line":4551,"source":235,"type":"AssumeEdge","stmt":"[type == 2]","target":236},"235->237":{"file":"tf\/ihex2fw.c","line":4551,"source":235,"type":"AssumeEdge","stmt":"[!(type == 2)]","target":237},"67->75":{"file":"tf\/ihex2fw.c","line":4424,"source":67,"type":"DeclarationEdge","stmt":"int __CPAchecker_TMP_2;","target":75},"103->104":{"file":"tf\/ihex2fw.c","line":4443,"source":103,"type":"StatementEdge","stmt":"__CPAchecker_TMP_7 = strcmp(argv[optind + 1], \\\"-\\\");","target":104},"11->10":{"file":"tf\/ihex2fw.c","line":4368,"source":11,"type":"AssumeEdge","stmt":"[!(n <= 'F')]","target":10},"33->34":{"file":"tf\/ihex2fw.c","line":4394,"source":33,"type":"StatementEdge","stmt":"fprintf(stderr, \\\" -s: sort records by address\\n\\\");","target":34},"22->23":{"file":"tf\/ihex2fw.c","line":4375,"source":22,"type":"DeclarationEdge","stmt":"uint8_t __CPAchecker_TMP_1;","target":23},"90->93":{"file":"tf\/ihex2fw.c","line":4434,"source":90,"type":"StatementEdge","stmt":"perror(\\\"stat\\\");","target":93},"9->0":{"file":"tf\/ihex2fw.c","line":4368,"source":9,"type":"ReturnStatementEdge","stmt":"return n - 55;","target":0},"210->218":{"file":"tf\/ihex2fw.c","line":4532,"source":210,"type":"AssumeEdge","stmt":"[!(type == 1)]","target":218},"210->217":{"file":"tf\/ihex2fw.c","line":4532,"source":210,"type":"AssumeEdge","stmt":"[type == 1]","target":217},"226->228":{"file":"tf\/ihex2fw.c","line":4541,"source":226,"type":"AssumeEdge","stmt":"[!(type == 4)]","target":228},"226->227":{"file":"tf\/ihex2fw.c","line":4541,"source":226,"type":"AssumeEdge","stmt":"[type == 4]","target":227},"49->53":{"file":"tf\/ihex2fw.c","line":4408,"source":49,"type":"AssumeEdge","stmt":"[!(opt == 'w')]","target":53},"112->113":{"file":"tf\/ihex2fw.c","line":4448,"source":112,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Failed to open destination file: %s\\\", __CPAchecker_TMP_9);","target":113},"215->139":{"file":"tf\/ihex2fw.c","line":4530,"source":215,"type":"BlankEdge","stmt":"Goto: next_record","target":139},"49->52":{"file":"tf\/ihex2fw.c","line":4408,"source":49,"type":"AssumeEdge","stmt":"[opt == 'w']","target":52},"84->85":{"file":"tf\/ihex2fw.c","line":4429,"source":84,"type":"StatementEdge","stmt":"fprintf(stderr, \\\"Failed to open source file: %s\\\", __CPAchecker_TMP_4);","target":85},"95->96":{"file":"tf\/ihex2fw.c","line":4438,"source":95,"type":"AssumeEdge","stmt":"[!(data == ((void *)-1))]","target":96},"95->97":{"file":"tf\/ihex2fw.c","line":4438,"source":95,"type":"AssumeEdge","stmt":"[data == ((void *)-1)]","target":97},"4->0":{"file":"tf\/ihex2fw.c","line":4367,"source":4,"type":"ReturnStatementEdge","stmt":"return n - '0';","target":0},"253->139":{"file":"tf\/ihex2fw.c","line":4570,"source":253,"type":"BlankEdge","stmt":"Goto: next_record","target":139},"13->0":{"file":"tf\/ihex2fw.c","line":4370,"source":13,"type":"MultiEdge","stmt":" return 0;","target":0},"87->37":{"file":"tf\/ihex2fw.c","line":4431,"source":87,"type":"ReturnStatementEdge","stmt":"return __CPAchecker_TMP_5;","target":37}}}