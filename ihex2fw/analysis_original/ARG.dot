digraph ARG {
node [style="filled" shape="box" color="white"]
1 [fillcolor="cornflowerblue" label="1 @ N38\nmain entry\nABS0: true" id="1"]
359 [fillcolor="cornflowerblue" label="359 @ N45\nmain\nABS11" id="359"]
360 [label="360 @ N48\nmain" id="360"]
362 [label="362 @ N47\nmain" id="362"]
364 [label="364 @ N64\nmain" id="364"]
365 [label="365 @ N72\nmain" id="365"]
366 [label="366 @ N73\nmain" id="366"]
368 [label="368 @ N71\nmain" id="368"]
369 [label="369 @ N75\nmain" id="369"]
372 [label="372 @ N69\nmain" id="372"]
374 [label="374 @ N76\nmain" id="374"]
375 [label="375 @ N88\nmain" id="375"]
376 [label="376 @ N89\nmain" id="376"]
378 [label="378 @ N87\nmain" id="378"]
379 [label="379 @ N90\nmain" id="379"]
1040 [label="1040 @ N37\nmain exit" id="1040"]
377 [label="377 @ N86\nmain" id="377"]
381 [label="381 @ N92\nmain" id="381"]
383 [label="383 @ N93\nmain" id="383"]
384 [label="384 @ N100\nmain" id="384"]
385 [label="385 @ N101\nmain" id="385"]
387 [label="387 @ N99\nmain" id="387"]
388 [label="388 @ N103\nmain" id="388"]
391 [label="391 @ N97\nmain" id="391"]
393 [label="393 @ N104\nmain" id="393"]
394 [label="394 @ N116\nmain" id="394"]
395 [label="395 @ N123\nprocess_ihex entry" id="395"]
397 [fillcolor="cornflowerblue" label="397 @ N136\nprocess_ihex\nABS12" id="397"]
399 [fillcolor="cornflowerblue" label="399 @ N137\nprocess_ihex\nABS13" id="399"]
412 [label="412 @ N139\nprocess_ihex" id="412"]
414 [label="414 @ N150\nprocess_ihex" id="414"]
415 [label="415 @ N19\nhex entry" id="415"]
416 [label="416 @ N21\nhex" id="416"]
417 [label="417 @ N1\nnybble entry" id="417"]
418 [label="418 @ N2\nnybble" id="418"]
423 [label="423 @ N5\nnybble" id="423"]
428 [label="428 @ N10\nnybble" id="428"]
433 [label="433 @ N13\nnybble" id="433"]
440 [label="440 @ N0\nnybble exit" id="440"]
441 [label="441 @ N22\nhex" id="441"]
442 [label="442 @ N23\nhex" id="442"]
443 [label="443 @ N1\nnybble entry" id="443"]
444 [label="444 @ N2\nnybble" id="444"]
449 [label="449 @ N5\nnybble" id="449"]
454 [label="454 @ N10\nnybble" id="454"]
459 [label="459 @ N13\nnybble" id="459"]
466 [label="466 @ N0\nnybble exit" id="466"]
467 [label="467 @ N24\nhex" id="467"]
468 [label="468 @ N18\nhex exit" id="468"]
469 [label="469 @ N154\nprocess_ihex" id="469"]
470 [label="470 @ N155\nprocess_ihex" id="470"]
530 [label="530 @ N156\nprocess_ihex" id="530"]
531 [label="531 @ N163\nprocess_ihex" id="531"]
532 [label="532 @ N164\nprocess_ihex" id="532"]
534 [label="534 @ N166\nprocess_ihex" id="534"]
533 [label="533 @ N165\nprocess_ihex" id="533"]
535 [label="535 @ N167\nprocess_ihex" id="535"]
537 [label="537 @ N168\nprocess_ihex" id="537"]
538 [label="538 @ N174\nprocess_ihex" id="538"]
539 [label="539 @ N175\nprocess_ihex" id="539"]
541 [label="541 @ N176\nprocess_ihex" id="541"]
542 [label="542 @ N182\nprocess_ihex" id="542"]
543 [label="543 @ N19\nhex entry" id="543"]
544 [label="544 @ N21\nhex" id="544"]
545 [label="545 @ N1\nnybble entry" id="545"]
546 [label="546 @ N2\nnybble" id="546"]
551 [label="551 @ N5\nnybble" id="551"]
556 [label="556 @ N10\nnybble" id="556"]
561 [label="561 @ N13\nnybble" id="561"]
568 [label="568 @ N0\nnybble exit" id="568"]
569 [label="569 @ N22\nhex" id="569"]
570 [label="570 @ N23\nhex" id="570"]
571 [label="571 @ N1\nnybble entry" id="571"]
572 [label="572 @ N2\nnybble" id="572"]
577 [label="577 @ N5\nnybble" id="577"]
582 [label="582 @ N10\nnybble" id="582"]
587 [label="587 @ N13\nnybble" id="587"]
594 [label="594 @ N0\nnybble exit" id="594"]
595 [label="595 @ N24\nhex" id="595"]
596 [label="596 @ N18\nhex exit" id="596"]
597 [label="597 @ N183\nprocess_ihex" id="597"]
598 [label="598 @ N186\nprocess_ihex" id="598"]
599 [label="599 @ N19\nhex entry" id="599"]
600 [label="600 @ N21\nhex" id="600"]
601 [label="601 @ N1\nnybble entry" id="601"]
602 [label="602 @ N2\nnybble" id="602"]
607 [label="607 @ N5\nnybble" id="607"]
612 [label="612 @ N10\nnybble" id="612"]
617 [label="617 @ N13\nnybble" id="617"]
624 [label="624 @ N0\nnybble exit" id="624"]
625 [label="625 @ N22\nhex" id="625"]
626 [label="626 @ N23\nhex" id="626"]
627 [label="627 @ N1\nnybble entry" id="627"]
628 [label="628 @ N2\nnybble" id="628"]
633 [label="633 @ N5\nnybble" id="633"]
638 [label="638 @ N10\nnybble" id="638"]
643 [label="643 @ N13\nnybble" id="643"]
650 [label="650 @ N0\nnybble exit" id="650"]
651 [label="651 @ N24\nhex" id="651"]
652 [label="652 @ N18\nhex exit" id="652"]
653 [label="653 @ N187\nprocess_ihex" id="653"]
654 [label="654 @ N189\nprocess_ihex" id="654"]
655 [label="655 @ N19\nhex entry" id="655"]
656 [label="656 @ N21\nhex" id="656"]
657 [label="657 @ N1\nnybble entry" id="657"]
658 [label="658 @ N2\nnybble" id="658"]
663 [label="663 @ N5\nnybble" id="663"]
668 [label="668 @ N10\nnybble" id="668"]
673 [label="673 @ N13\nnybble" id="673"]
680 [label="680 @ N0\nnybble exit" id="680"]
681 [label="681 @ N22\nhex" id="681"]
682 [label="682 @ N23\nhex" id="682"]
683 [label="683 @ N1\nnybble entry" id="683"]
684 [label="684 @ N2\nnybble" id="684"]
689 [label="689 @ N5\nnybble" id="689"]
694 [label="694 @ N10\nnybble" id="694"]
699 [label="699 @ N13\nnybble" id="699"]
706 [label="706 @ N0\nnybble exit" id="706"]
707 [label="707 @ N24\nhex" id="707"]
708 [label="708 @ N18\nhex exit" id="708"]
709 [label="709 @ N190\nprocess_ihex" id="709"]
711 [fillcolor="cornflowerblue" label="711 @ N193\nprocess_ihex\nABS15" id="711"]
713 [label="713 @ N196\nprocess_ihex" id="713"]
714 [label="714 @ N19\nhex entry" id="714"]
715 [label="715 @ N21\nhex" id="715"]
716 [label="716 @ N1\nnybble entry" id="716"]
717 [label="717 @ N2\nnybble" id="717"]
722 [label="722 @ N5\nnybble" id="722"]
727 [label="727 @ N10\nnybble" id="727"]
732 [label="732 @ N13\nnybble" id="732"]
739 [label="739 @ N0\nnybble exit" id="739"]
740 [label="740 @ N22\nhex" id="740"]
741 [label="741 @ N23\nhex" id="741"]
742 [label="742 @ N1\nnybble entry" id="742"]
743 [label="743 @ N2\nnybble" id="743"]
748 [label="748 @ N5\nnybble" id="748"]
753 [label="753 @ N10\nnybble" id="753"]
758 [label="758 @ N13\nnybble" id="758"]
765 [label="765 @ N0\nnybble exit" id="765"]
766 [label="766 @ N24\nhex" id="766"]
767 [label="767 @ N18\nhex exit" id="767"]
768 [label="768 @ N201\nprocess_ihex" id="768"]
769 [label="769 @ N202\nprocess_ihex" id="769"]
771 [label="771 @ N203\nprocess_ihex" id="771"]
772 [label="772 @ N209\nprocess_ihex" id="772"]
774 [label="774 @ N213\nprocess_ihex" id="774"]
776 [label="776 @ N223\nprocess_ihex" id="776"]
778 [label="778 @ N233\nprocess_ihex" id="778"]
828 [label="828 @ N234\nprocess_ihex" id="828"]
833 [label="833 @ N237\nprocess_ihex" id="833"]
844 [label="844 @ N239\nprocess_ihex" id="844"]
845 [label="845 @ N240\nprocess_ihex" id="845"]
886 [label="886 @ N122\nprocess_ihex exit" id="886"]
954 [label="954 @ N117\nmain" id="954"]
957 [label="957 @ N115\nmain" id="957"]
960 [label="960 @ N37\nmain exit" id="960"]
956 [label="956 @ N114\nmain" id="956"]
962 [label="962 @ N119\nmain" id="962"]
964 [label="964 @ N291\noutput_records entry" id="964"]
966 [fillcolor="cornflowerblue" label="966 @ N295\noutput_records\nABS25" id="966"]
968 [label="968 @ N296\noutput_records" id="968"]
969 [label="969 @ N298\noutput_records" id="969"]
970 [label="970 @ N299\noutput_records" id="970"]
971 [label="971 @ N300\noutput_records" id="971"]
972 [label="972 @ N303\noutput_records" id="972"]
973 [label="973 @ N304\noutput_records" id="973"]
975 [label="975 @ N301\noutput_records" id="975"]
977 [fillcolor="green" label="977 @ N295\noutput_records\nABS26" id="977"]
974 [label="974 @ N302\noutput_records" id="974"]
986 [label="986 @ N290\noutput_records exit" id="986"]
987 [label="987 @ N120\nmain" id="987"]
991 [label="991 @ N37\nmain exit" id="991"]
967 [label="967 @ N297\noutput_records" id="967"]
979 [label="979 @ N309\noutput_records" id="979"]
980 [label="980 @ N310\noutput_records" id="980"]
982 [label="982 @ N307\noutput_records" id="982"]
981 [label="981 @ N308\noutput_records" id="981"]
829 [label="829 @ N238\nprocess_ihex" id="829"]
832 [label="832 @ N236\nprocess_ihex" id="832"]
834 [label="834 @ N244\nprocess_ihex" id="834"]
836 [label="836 @ N246\nprocess_ihex" id="836"]
839 [label="839 @ N247\nprocess_ihex" id="839"]
840 [label="840 @ N248\nprocess_ihex" id="840"]
841 [label="841 @ N249\nprocess_ihex" id="841"]
843 [fillcolor="green" label="843 @ N136\nprocess_ihex\nABS20" id="843"]
835 [label="835 @ N245\nprocess_ihex" id="835"]
780 [label="780 @ N235\nprocess_ihex" id="780"]
782 [label="782 @ N253\nprocess_ihex" id="782"]
790 [label="790 @ N254\nprocess_ihex" id="790"]
795 [label="795 @ N257\nprocess_ihex" id="795"]
823 [label="823 @ N259\nprocess_ihex" id="823"]
824 [label="824 @ N260\nprocess_ihex" id="824"]
791 [label="791 @ N258\nprocess_ihex" id="791"]
794 [label="794 @ N256\nprocess_ihex" id="794"]
796 [label="796 @ N263\nprocess_ihex" id="796"]
797 [label="797 @ N264\nprocess_ihex" id="797"]
798 [label="798 @ N265\nprocess_ihex" id="798"]
800 [label="800 @ N267\nprocess_ihex" id="800"]
801 [label="801 @ N279\nfile_record entry" id="801"]
803 [fillcolor="cornflowerblue" label="803 @ N282\nfile_record\nABS16" id="803"]
811 [label="811 @ N284\nfile_record" id="811"]
814 [label="814 @ N278\nfile_record exit" id="814"]
815 [label="815 @ N268\nprocess_ihex" id="815"]
816 [label="816 @ N266\nprocess_ihex" id="816"]
818 [label="818 @ N269\nprocess_ihex" id="818"]
822 [fillcolor="green" label="822 @ N136\nprocess_ihex\nABS19" id="822"]
805 [label="805 @ N285\nfile_record" id="805"]
810 [label="810 @ N283\nfile_record" id="810"]
813 [fillcolor="green" label="813 @ N282\nfile_record\nABS17" id="813"]
807 [label="807 @ N286\nfile_record" id="807"]
799 [label="799 @ N266\nprocess_ihex" id="799"]
817 [label="817 @ N269\nprocess_ihex" id="817"]
820 [fillcolor="green" label="820 @ N136\nprocess_ihex\nABS18" id="820"]
784 [label="784 @ N255\nprocess_ihex" id="784"]
785 [label="785 @ N272\nprocess_ihex" id="785"]
786 [label="786 @ N273\nprocess_ihex" id="786"]
787 [label="787 @ N274\nprocess_ihex" id="787"]
781 [label="781 @ N252\nprocess_ihex" id="781"]
777 [label="777 @ N232\nprocess_ihex" id="777"]
775 [label="775 @ N222\nprocess_ihex" id="775"]
852 [label="852 @ N225\nprocess_ihex" id="852"]
853 [label="853 @ N227\nprocess_ihex" id="853"]
854 [label="854 @ N228\nprocess_ihex" id="854"]
848 [label="848 @ N226\nprocess_ihex" id="848"]
850 [label="850 @ N224\nprocess_ihex" id="850"]
880 [label="880 @ N210\nprocess_ihex" id="880"]
773 [label="773 @ N212\nprocess_ihex" id="773"]
859 [label="859 @ N214\nprocess_ihex" id="859"]
860 [label="860 @ N217\nprocess_ihex" id="860"]
861 [label="861 @ N279\nfile_record entry" id="861"]
863 [fillcolor="cornflowerblue" label="863 @ N282\nfile_record\nABS21" id="863"]
871 [label="871 @ N284\nfile_record" id="871"]
874 [label="874 @ N278\nfile_record exit" id="874"]
875 [label="875 @ N218\nprocess_ihex" id="875"]
876 [label="876 @ N219\nprocess_ihex" id="876"]
878 [fillcolor="green" label="878 @ N136\nprocess_ihex\nABS23" id="878"]
865 [label="865 @ N285\nfile_record" id="865"]
870 [label="870 @ N283\nfile_record" id="870"]
873 [fillcolor="green" label="873 @ N282\nfile_record\nABS22" id="873"]
867 [label="867 @ N286\nfile_record" id="867"]
858 [label="858 @ N215\nprocess_ihex" id="858"]
770 [label="770 @ N204\nprocess_ihex" id="770"]
883 [label="883 @ N205\nprocess_ihex" id="883"]
884 [label="884 @ N206\nprocess_ihex" id="884"]
754 [label="754 @ N15\nnybble" id="754"]
756 [label="756 @ N14\nnybble" id="756"]
749 [label="749 @ N11\nnybble" id="749"]
751 [label="751 @ N9\nnybble" id="751"]
744 [label="744 @ N6\nnybble" id="744"]
746 [label="746 @ N4\nnybble" id="746"]
728 [label="728 @ N15\nnybble" id="728"]
730 [label="730 @ N14\nnybble" id="730"]
723 [label="723 @ N11\nnybble" id="723"]
725 [label="725 @ N9\nnybble" id="725"]
718 [label="718 @ N6\nnybble" id="718"]
720 [label="720 @ N4\nnybble" id="720"]
712 [label="712 @ N195\nprocess_ihex" id="712"]
887 [label="887 @ N19\nhex entry" id="887"]
888 [label="888 @ N21\nhex" id="888"]
889 [label="889 @ N1\nnybble entry" id="889"]
890 [label="890 @ N2\nnybble" id="890"]
895 [label="895 @ N5\nnybble" id="895"]
900 [label="900 @ N10\nnybble" id="900"]
905 [label="905 @ N13\nnybble" id="905"]
912 [label="912 @ N0\nnybble exit" id="912"]
913 [label="913 @ N22\nhex" id="913"]
914 [label="914 @ N23\nhex" id="914"]
915 [label="915 @ N1\nnybble entry" id="915"]
916 [label="916 @ N2\nnybble" id="916"]
921 [label="921 @ N5\nnybble" id="921"]
926 [label="926 @ N10\nnybble" id="926"]
931 [label="931 @ N13\nnybble" id="931"]
938 [label="938 @ N0\nnybble exit" id="938"]
939 [label="939 @ N24\nhex" id="939"]
940 [label="940 @ N18\nhex exit" id="940"]
941 [label="941 @ N197\nprocess_ihex" id="941"]
943 [fillcolor="green" label="943 @ N193\nprocess_ihex\nABS24" id="943"]
927 [label="927 @ N15\nnybble" id="927"]
929 [label="929 @ N14\nnybble" id="929"]
922 [label="922 @ N11\nnybble" id="922"]
924 [label="924 @ N9\nnybble" id="924"]
917 [label="917 @ N6\nnybble" id="917"]
919 [label="919 @ N4\nnybble" id="919"]
901 [label="901 @ N15\nnybble" id="901"]
903 [label="903 @ N14\nnybble" id="903"]
896 [label="896 @ N11\nnybble" id="896"]
898 [label="898 @ N9\nnybble" id="898"]
891 [label="891 @ N6\nnybble" id="891"]
893 [label="893 @ N4\nnybble" id="893"]
695 [label="695 @ N15\nnybble" id="695"]
697 [label="697 @ N14\nnybble" id="697"]
690 [label="690 @ N11\nnybble" id="690"]
692 [label="692 @ N9\nnybble" id="692"]
685 [label="685 @ N6\nnybble" id="685"]
687 [label="687 @ N4\nnybble" id="687"]
669 [label="669 @ N15\nnybble" id="669"]
671 [label="671 @ N14\nnybble" id="671"]
664 [label="664 @ N11\nnybble" id="664"]
666 [label="666 @ N9\nnybble" id="666"]
659 [label="659 @ N6\nnybble" id="659"]
661 [label="661 @ N4\nnybble" id="661"]
639 [label="639 @ N15\nnybble" id="639"]
641 [label="641 @ N14\nnybble" id="641"]
634 [label="634 @ N11\nnybble" id="634"]
636 [label="636 @ N9\nnybble" id="636"]
629 [label="629 @ N6\nnybble" id="629"]
631 [label="631 @ N4\nnybble" id="631"]
613 [label="613 @ N15\nnybble" id="613"]
615 [label="615 @ N14\nnybble" id="615"]
608 [label="608 @ N11\nnybble" id="608"]
610 [label="610 @ N9\nnybble" id="610"]
603 [label="603 @ N6\nnybble" id="603"]
605 [label="605 @ N4\nnybble" id="605"]
583 [label="583 @ N15\nnybble" id="583"]
585 [label="585 @ N14\nnybble" id="585"]
578 [label="578 @ N11\nnybble" id="578"]
580 [label="580 @ N9\nnybble" id="580"]
573 [label="573 @ N6\nnybble" id="573"]
575 [label="575 @ N4\nnybble" id="575"]
557 [label="557 @ N15\nnybble" id="557"]
559 [label="559 @ N14\nnybble" id="559"]
552 [label="552 @ N11\nnybble" id="552"]
554 [label="554 @ N9\nnybble" id="554"]
547 [label="547 @ N6\nnybble" id="547"]
549 [label="549 @ N4\nnybble" id="549"]
540 [label="540 @ N177\nprocess_ihex" id="540"]
944 [label="944 @ N178\nprocess_ihex" id="944"]
945 [label="945 @ N179\nprocess_ihex" id="945"]
953 [label="953 @ N122\nprocess_ihex exit" id="953"]
955 [label="955 @ N117\nmain" id="955"]
959 [label="959 @ N115\nmain" id="959"]
961 [label="961 @ N37\nmain exit" id="961"]
958 [label="958 @ N114\nmain" id="958"]
963 [label="963 @ N119\nmain" id="963"]
988 [label="988 @ N291\noutput_records entry" id="988"]
990 [fillcolor="cornflowerblue" label="990 @ N295\noutput_records\nABS27: false" id="990"]
536 [label="536 @ N169\nprocess_ihex" id="536"]
947 [label="947 @ N170\nprocess_ihex" id="947"]
948 [label="948 @ N171\nprocess_ihex" id="948"]
472 [label="472 @ N157\nprocess_ihex" id="472"]
473 [label="473 @ N159\nprocess_ihex" id="473"]
474 [label="474 @ N19\nhex entry" id="474"]
475 [label="475 @ N21\nhex" id="475"]
476 [label="476 @ N1\nnybble entry" id="476"]
477 [label="477 @ N2\nnybble" id="477"]
482 [label="482 @ N5\nnybble" id="482"]
487 [label="487 @ N10\nnybble" id="487"]
492 [label="492 @ N13\nnybble" id="492"]
499 [label="499 @ N0\nnybble exit" id="499"]
500 [label="500 @ N22\nhex" id="500"]
501 [label="501 @ N23\nhex" id="501"]
502 [label="502 @ N1\nnybble entry" id="502"]
503 [label="503 @ N2\nnybble" id="503"]
508 [label="508 @ N5\nnybble" id="508"]
513 [label="513 @ N10\nnybble" id="513"]
518 [label="518 @ N13\nnybble" id="518"]
525 [label="525 @ N0\nnybble exit" id="525"]
526 [label="526 @ N24\nhex" id="526"]
527 [label="527 @ N18\nhex exit" id="527"]
528 [label="528 @ N160\nprocess_ihex" id="528"]
514 [label="514 @ N15\nnybble" id="514"]
516 [label="516 @ N14\nnybble" id="516"]
509 [label="509 @ N11\nnybble" id="509"]
511 [label="511 @ N9\nnybble" id="511"]
504 [label="504 @ N6\nnybble" id="504"]
506 [label="506 @ N4\nnybble" id="506"]
488 [label="488 @ N15\nnybble" id="488"]
490 [label="490 @ N14\nnybble" id="490"]
483 [label="483 @ N11\nnybble" id="483"]
485 [label="485 @ N9\nnybble" id="485"]
478 [label="478 @ N6\nnybble" id="478"]
480 [label="480 @ N4\nnybble" id="480"]
455 [label="455 @ N15\nnybble" id="455"]
457 [label="457 @ N14\nnybble" id="457"]
450 [label="450 @ N11\nnybble" id="450"]
452 [label="452 @ N9\nnybble" id="452"]
445 [label="445 @ N6\nnybble" id="445"]
447 [label="447 @ N4\nnybble" id="447"]
429 [label="429 @ N15\nnybble" id="429"]
431 [label="431 @ N14\nnybble" id="431"]
424 [label="424 @ N11\nnybble" id="424"]
426 [label="426 @ N9\nnybble" id="426"]
419 [label="419 @ N6\nnybble" id="419"]
421 [label="421 @ N4\nnybble" id="421"]
413 [label="413 @ N151\nprocess_ihex" id="413"]
951 [label="951 @ N152\nprocess_ihex" id="951"]
400 [label="400 @ N138\nprocess_ihex" id="400"]
405 [label="405 @ N140\nprocess_ihex" id="405"]
406 [label="406 @ N148\nprocess_ihex" id="406"]
408 [label="408 @ N145\nprocess_ihex" id="408"]
410 [fillcolor="green" label="410 @ N137\nprocess_ihex\nABS14" id="410"]
407 [label="407 @ N146\nprocess_ihex" id="407"]
402 [label="402 @ N141\nprocess_ihex" id="402"]
392 [label="392 @ N105\nmain" id="392"]
992 [label="992 @ N106\nmain" id="992"]
993 [label="993 @ N107\nmain" id="993"]
994 [label="994 @ N108\nmain" id="994"]
995 [label="995 @ N109\nmain" id="995"]
996 [label="996 @ N110\nmain" id="996"]
997 [label="997 @ N111\nmain" id="997"]
998 [label="998 @ N29\nusage entry" id="998"]
999 [label="999 @ N30\nusage" id="999"]
1000 [label="1000 @ N31\nusage" id="1000"]
1001 [label="1001 @ N32\nusage" id="1001"]
1002 [label="1002 @ N33\nusage" id="1002"]
1003 [label="1003 @ N34\nusage" id="1003"]
1004 [label="1004 @ N35\nusage" id="1004"]
1005 [label="1005 @ N28\nusage exit" id="1005"]
1006 [label="1006 @ N112\nmain" id="1006"]
386 [label="386 @ N98\nmain" id="386"]
382 [label="382 @ N94\nmain" id="382"]
1009 [label="1009 @ N95\nmain" id="1009"]
373 [label="373 @ N77\nmain" id="373"]
1012 [label="1012 @ N78\nmain" id="1012"]
1013 [label="1013 @ N79\nmain" id="1013"]
1014 [label="1014 @ N80\nmain" id="1014"]
1015 [label="1015 @ N81\nmain" id="1015"]
1016 [label="1016 @ N82\nmain" id="1016"]
1017 [label="1017 @ N83\nmain" id="1017"]
1018 [label="1018 @ N29\nusage entry" id="1018"]
1019 [label="1019 @ N30\nusage" id="1019"]
1020 [label="1020 @ N31\nusage" id="1020"]
1021 [label="1021 @ N32\nusage" id="1021"]
1022 [label="1022 @ N33\nusage" id="1022"]
1023 [label="1023 @ N34\nusage" id="1023"]
1024 [label="1024 @ N35\nusage" id="1024"]
1025 [label="1025 @ N28\nusage exit" id="1025"]
1026 [label="1026 @ N84\nmain" id="1026"]
367 [label="367 @ N70\nmain" id="367"]
363 [label="363 @ N65\nmain" id="363"]
1029 [label="1029 @ N66\nmain" id="1029"]
1030 [label="1030 @ N29\nusage entry" id="1030"]
1031 [label="1031 @ N30\nusage" id="1031"]
1032 [label="1032 @ N31\nusage" id="1032"]
1033 [label="1033 @ N32\nusage" id="1033"]
1034 [label="1034 @ N33\nusage" id="1034"]
1035 [label="1035 @ N34\nusage" id="1035"]
1036 [label="1036 @ N35\nusage" id="1036"]
1037 [label="1037 @ N28\nusage exit" id="1037"]
1038 [label="1038 @ N67\nmain" id="1038"]
361 [label="361 @ N46\nmain" id="361"]
1041 [label="1041 @ N49\nmain" id="1041"]
1043 [label="1043 @ N53\nmain" id="1043"]
1045 [label="1045 @ N57\nmain" id="1045"]
1047 [label="1047 @ N61\nmain" id="1047"]
1054 [label="1054 @ N50\nmain" id="1054"]
1056 [fillcolor="green" label="1056 @ N45\nmain\nABS28" id="1056"]
1046 [label="1046 @ N60\nmain" id="1046"]
1044 [label="1044 @ N56\nmain" id="1044"]
1042 [label="1042 @ N52\nmain" id="1042"]
1 -> 359 [label="Line 0: INIT GLOBAL VARS typedef signed char int8_t; typedef short int int16_t; typedef int int32_t; typedef long int int64_t; typedef unsigned char uint8_t; typedef unsigned short int uint16_t; typedef unsigned int uint32_t; typedef unsigned long int uint64_t; typedef signed char int_least8_t; typedef short int int_least16_t; typedef int int_least32_t; typedef long int int_least64_t; typedef unsigned char uint_least8_t; typedef unsigned short int uint_least16_t; typedef unsigned int uint_least32_t; typedef unsigned long int uint_least64_t; typedef signed char int_fast8_t; typedef long int int_fast16_t; typedef long int int_fast32_t; typedef long int int_fast64_t; typedef unsigned char uint_fast8_t; typedef unsigned long int uint_fast16_t; typedef unsigned long int uint_fast32_t; typedef unsigned long int uint_fast64_t; typedef long int intptr_t; typedef unsigned long int uintptr_t; typedef long int intmax_t; typedef unsigned long int uintmax_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int size_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_1 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_1 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_2 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_2 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_3 {   char __size[56];   long int __align; } ; typedef union __anon_type_3 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_4 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_4 pthread_mutex_t; union __anon_type_5 {   char __size[4];   int __align; } ; typedef union __anon_type_5 pthread_mutexattr_t; struct __anon_type_6 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_7 {   struct __anon_type_6 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_7 pthread_cond_t; union __anon_type_8 {   char __size[4];   int __align; } ; typedef union __anon_type_8 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_9 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_10 {   struct __anon_type_9 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_rwlock_t; union __anon_type_11 {   char __size[8];   long int __align; } ; typedef union __anon_type_11 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_12 {   char __size[32];   long int __align; } ; typedef union __anon_type_12 pthread_barrier_t; union __anon_type_13 {   char __size[4];   int __align; } ; typedef union __anon_type_13 pthread_barrierattr_t; struct iovec {   void *iov_base;   size_t iov_len; } ; ssize_t  readv(int __fd, const struct iovec *__iovec, int __count); ssize_t  writev(int __fd, const struct iovec *__iovec, int __count); ssize_t  preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); ssize_t  pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); typedef __socklen_t socklen_t; enum __socket_type {   SOCK_STREAM = 1,   SOCK_DGRAM = 2,   SOCK_RAW = 3,   SOCK_RDM = 4,   SOCK_SEQPACKET = 5,   SOCK_DCCP = 6,   SOCK_PACKET = 10,   SOCK_CLOEXEC = 524288,   SOCK_NONBLOCK = 2048 } ; typedef unsigned short int sa_family_t; struct sockaddr {   sa_family_t sa_family;   char sa_data[14]; } ; struct sockaddr_storage {   sa_family_t ss_family;   unsigned long int __ss_align;   char __ss_padding[120UL]; } ; enum  {   MSG_OOB = 1,   MSG_PEEK = 2,   MSG_DONTROUTE = 4,   MSG_CTRUNC = 8,   MSG_PROXY = 16,   MSG_TRUNC = 32,   MSG_DONTWAIT = 64,   MSG_EOR = 128,   MSG_WAITALL = 256,   MSG_FIN = 512,   MSG_SYN = 1024,   MSG_CONFIRM = 2048,   MSG_RST = 4096,   MSG_ERRQUEUE = 8192,   MSG_NOSIGNAL = 16384,   MSG_MORE = 32768,   MSG_CMSG_CLOEXEC = 1073741824 } ; struct msghdr {   void *msg_name;   socklen_t msg_namelen;   struct iovec *msg_iov;   size_t msg_iovlen;   void *msg_control;   size_t msg_controllen;   int msg_flags; } ; struct cmsghdr {   size_t cmsg_len;   int cmsg_level;   int cmsg_type;   unsigned char __cmsg_data[]; } ; struct cmsghdr * __cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg); enum  {   SCM_RIGHTS = 1 } ; struct linger {   int l_onoff;   int l_linger; } ; struct osockaddr {   unsigned short int sa_family;   unsigned char sa_data[14]; } ; enum  {   SHUT_RD = 0,   SHUT_WR = 1,   SHUT_RDWR = 2 } ; int socket(int __domain, int __type, int __protocol); int socketpair(int __domain, int __type, int __protocol, int __fds[2]); int bind(int __fd, const struct sockaddr *__addr, socklen_t __len); int getsockname(int __fd, struct sockaddr *__addr, socklen_t *__len); int connect(int __fd, const struct sockaddr *__addr, socklen_t __len); int getpeername(int __fd, struct sockaddr *__addr, socklen_t *__len); ssize_t  send(int __fd, const void *__buf, size_t __n, int __flags); ssize_t  recv(int __fd, void *__buf, size_t __n, int __flags); ssize_t  sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len); ssize_t  recvfrom(int __fd, void *__buf, size_t __n, int __flags, struct sockaddr *__addr, socklen_t *__addr_len); ssize_t  sendmsg(int __fd, const struct msghdr *__message, int __flags); ssize_t  recvmsg(int __fd, struct msghdr *__message, int __flags); int getsockopt(int __fd, int __level, int __optname, void *__optval, socklen_t *__optlen); int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen); int listen(int __fd, int __n); int accept(int __fd, struct sockaddr *__addr, socklen_t *__addr_len); int shutdown(int __fd, int __how); int sockatmark(int __fd); int isfdtype(int __fd, int __fdtype); enum  {   IPPROTO_IP = 0,   IPPROTO_HOPOPTS = 0,   IPPROTO_ICMP = 1,   IPPROTO_IGMP = 2,   IPPROTO_IPIP = 4,   IPPROTO_TCP = 6,   IPPROTO_EGP = 8,   IPPROTO_PUP = 12,   IPPROTO_UDP = 17,   IPPROTO_IDP = 22,   IPPROTO_TP = 29,   IPPROTO_DCCP = 33,   IPPROTO_IPV6 = 41,   IPPROTO_ROUTING = 43,   IPPROTO_FRAGMENT = 44,   IPPROTO_RSVP = 46,   IPPROTO_GRE = 47,   IPPROTO_ESP = 50,   IPPROTO_AH = 51,   IPPROTO_ICMPV6 = 58,   IPPROTO_NONE = 59,   IPPROTO_DSTOPTS = 60,   IPPROTO_MTP = 92,   IPPROTO_ENCAP = 98,   IPPROTO_PIM = 103,   IPPROTO_COMP = 108,   IPPROTO_SCTP = 132,   IPPROTO_UDPLITE = 136,   IPPROTO_RAW = 255,   IPPROTO_MAX = 256 } ; typedef uint16_t in_port_t; enum  {   IPPORT_ECHO = 7,   IPPORT_DISCARD = 9,   IPPORT_SYSTAT = 11,   IPPORT_DAYTIME = 13,   IPPORT_NETSTAT = 15,   IPPORT_FTP = 21,   IPPORT_TELNET = 23,   IPPORT_SMTP = 25,   IPPORT_TIMESERVER = 37,   IPPORT_NAMESERVER = 42,   IPPORT_WHOIS = 43,   IPPORT_MTP = 57,   IPPORT_TFTP = 69,   IPPORT_RJE = 77,   IPPORT_FINGER = 79,   IPPORT_TTYLINK = 87,   IPPORT_SUPDUP = 95,   IPPORT_EXECSERVER = 512,   IPPORT_LOGINSERVER = 513,   IPPORT_CMDSERVER = 514,   IPPORT_EFSSERVER = 520,   IPPORT_BIFFUDP = 512,   IPPORT_WHOSERVER = 513,   IPPORT_ROUTESERVER = 520,   IPPORT_RESERVED = 1024,   IPPORT_USERRESERVED = 5000 } ; typedef uint32_t in_addr_t; struct in_addr {   in_addr_t s_addr; } ; union __anon_type_14 {   uint8_t __u6_addr8[16];   uint16_t __u6_addr16[8];   uint32_t __u6_addr32[4]; } ; struct in6_addr {   union __anon_type_14 __in6_u; } ; extern const struct in6_addr in6addr_any; extern const struct in6_addr in6addr_loopback; struct sockaddr_in {   sa_family_t sin_family;   in_port_t sin_port;   struct in_addr sin_addr;   unsigned char sin_zero[8UL]; } ; struct sockaddr_in6 {   sa_family_t sin6_family;   in_port_t sin6_port;   uint32_t sin6_flowinfo;   struct in6_addr sin6_addr;   uint32_t sin6_scope_id; } ; struct ip_mreq {   struct in_addr imr_multiaddr;   struct in_addr imr_interface; } ; struct ip_mreq_source {   struct in_addr imr_multiaddr;   struct in_addr imr_interface;   struct in_addr imr_sourceaddr; } ; struct ipv6_mreq {   struct in6_addr ipv6mr_multiaddr;   unsigned int ipv6mr_interface; } ; struct group_req {   uint32_t gr_interface;   struct sockaddr_storage gr_group; } ; struct group_source_req {   uint32_t gsr_interface;   struct sockaddr_storage gsr_group;   struct sockaddr_storage gsr_source; } ; struct ip_msfilter {   struct in_addr imsf_multiaddr;   struct in_addr imsf_interface;   uint32_t imsf_fmode;   uint32_t imsf_numsrc;   struct in_addr imsf_slist[1]; } ; struct group_filter {   uint32_t gf_interface;   struct sockaddr_storage gf_group;   uint32_t gf_fmode;   uint32_t gf_numsrc;   struct sockaddr_storage gf_slist[1]; } ; struct ip_opts {   struct in_addr ip_dst;   char ip_opts[40]; } ; struct ip_mreqn {   struct in_addr imr_multiaddr;   struct in_addr imr_address;   int imr_ifindex; } ; struct in_pktinfo {   int ipi_ifindex;   struct in_addr ipi_spec_dst;   struct in_addr ipi_addr; } ; uint32_t  ntohl(uint32_t __netlong); uint16_t  ntohs(uint16_t __netshort); uint32_t  htonl(uint32_t __hostlong); uint16_t  htons(uint16_t __hostshort); int bindresvport(int __sockfd, struct sockaddr_in *__sock_in); int bindresvport6(int __sockfd, struct sockaddr_in6 *__sock_in); in_addr_t  inet_addr(const char *__cp); in_addr_t  inet_lnaof(struct in_addr __in); struct in_addr  inet_makeaddr(in_addr_t __net, in_addr_t __host); in_addr_t  inet_netof(struct in_addr __in); in_addr_t  inet_network(const char *__cp); char * inet_ntoa(struct in_addr __in); int inet_pton(int __af, const char *__cp, void *__buf); const char * inet_ntop(int __af, const void *__cp, char *__buf, socklen_t __len); int inet_aton(const char *__cp, struct in_addr *__inp); char * inet_neta(in_addr_t __net, char *__buf, size_t __len); char * inet_net_ntop(int __af, const void *__cp, int __bits, char *__buf, size_t __len); int inet_net_pton(int __af, const char *__cp, void *__buf, size_t __len); unsigned int inet_nsap_addr(const char *__cp, unsigned char *__buf, int __len); char * inet_nsap_ntoa(int __len, const unsigned char *__cp, char *__buf); struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_15 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_16 {   int __count;   union __anon_type_15 __value; } ; typedef struct __anon_type_16 __mbstate_t; struct __anon_type_17 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_17 _G_fpos_t; struct __anon_type_18 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_18 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); int * __errno_location(); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * mmap(void *__addr, size_t __len, int __prot, int __flags, int __fd, __off_t __offset); int munmap(void *__addr, size_t __len); int mprotect(void *__addr, size_t __len, int __prot); int msync(void *__addr, size_t __len, int __flags); int madvise(void *__addr, size_t __len, int __advice); int posix_madvise(void *__addr, size_t __len, int __advice); int mlock(const void *__addr, size_t __len); int munlock(const void *__addr, size_t __len); int mlockall(int __flags); int munlockall(); int mincore(void *__start, size_t __len, unsigned char *__vec); int shm_open(const char *__name, int __oflag, mode_t __mode); int shm_unlink(const char *__name); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int lockf(int __fd, int __cmd, __off_t __len); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int fdatasync(int __fildes); typedef int wchar_t; struct __anon_type_19 {   int quot;   int rem; } ; typedef struct __anon_type_19 div_t; struct __anon_type_20 {   long int quot;   long int rem; } ; typedef struct __anon_type_20 ldiv_t; struct __anon_type_21 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_21 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct option {   const char *name;   int has_arg;   int *flag;   int val; } ; int getopt_long(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); int getopt_long_only(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 1; struct ihex_binrec {   struct ihex_binrec *next;   uint32_t addr;   uint16_t len;   uint8_t data[]; } ; uint8_t  nybble(const uint8_t n); uint8_t  hex(const uint8_t *data, uint8_t *crc); int process_ihex(uint8_t *data, ssize_t size); void file_record(struct ihex_binrec *record); int output_records(int outfd); int sort_records = 0; int wide_records = 0; int include_jump = 0; int usage(); int main(int argc, char **argv); struct ihex_binrec *records = 0; Function start dummy edge int infd; int outfd; struct stat st; uint8_t *data; int opt; while" id="1 -> 359"]
1056 -> 359 [style="dashed" weight="0" label="covered by"]
359 -> 360 [label="Line 4406: opt = getopt(argc, argv, 'wsj');" id="359 -> 360"]
360 -> 361 [label="Line 4406: [opt != -1]" id="360 -> 361"]
360 -> 362 [label="Line 4406: [!(opt != -1)]" id="360 -> 362"]
362 -> 363 [label="Line 4421: [(optind + 2) != argc]" id="362 -> 363"]
362 -> 364 [label="Line 4421: [!((optind + 2) != argc)]" id="362 -> 364"]
364 -> 365 [label="Line 4424: int __CPAchecker_TMP_1;" id="364 -> 365"]
365 -> 366 [label="Line 4424: __CPAchecker_TMP_1 = strcmp(argv[optind], '-');" id="365 -> 366"]
366 -> 367 [label="Line 4424: [__CPAchecker_TMP_1 == 0]" id="366 -> 367"]
366 -> 368 [label="Line 4424: [!(__CPAchecker_TMP_1 == 0)]" id="366 -> 368"]
368 -> 369 [label="Line 4427: infd = open(argv[optind], 0);" id="368 -> 369"]
369 -> 372 [label="Line 0: " id="369 -> 372"]
372 -> 373 [label="Line 4428: [infd == -1]" id="372 -> 373"]
372 -> 374 [label="Line 4428: [!(infd == -1)]" id="372 -> 374"]
374 -> 375 [label="Line 4433: int __CPAchecker_TMP_5;" id="374 -> 375"]
375 -> 376 [label="Line 4433: __CPAchecker_TMP_5 = fstat(infd, &st);" id="375 -> 376"]
376 -> 377 [label="Line 4433: [__CPAchecker_TMP_5 == 0]" id="376 -> 377"]
376 -> 378 [label="Line 4433: [!(__CPAchecker_TMP_5 == 0)]" id="376 -> 378"]
378 -> 379 [label="Line 4434: perror('stat');" id="378 -> 379"]
379 -> 1040 [label="Line 4435: return 1;" id="379 -> 1040"]
377 -> 381 [label="Line 4437: data = mmap((void *)0, st.st_size, 1, 1, infd, 0);" id="377 -> 381"]
381 -> 382 [label="Line 4438: [data == ((void *)-1)]" id="381 -> 382"]
381 -> 383 [label="Line 4438: [!(data == ((void *)-1))]" id="381 -> 383"]
383 -> 384 [label="Line 4443: int __CPAchecker_TMP_6;" id="383 -> 384"]
384 -> 385 [label="Line 4443: __CPAchecker_TMP_6 = strcmp(argv[optind + 1], '-');" id="384 -> 385"]
385 -> 386 [label="Line 4443: [__CPAchecker_TMP_6 == 0]" id="385 -> 386"]
385 -> 387 [label="Line 4443: [!(__CPAchecker_TMP_6 == 0)]" id="385 -> 387"]
387 -> 388 [label="Line 4446: outfd = open(argv[optind + 1], 577, 420);" id="387 -> 388"]
388 -> 391 [label="Line 0: " id="388 -> 391"]
391 -> 392 [label="Line 4447: [outfd == -1]" id="391 -> 392"]
391 -> 393 [label="Line 4447: [!(outfd == -1)]" id="391 -> 393"]
393 -> 394 [label="Line 4452: int __CPAchecker_TMP_10;" id="393 -> 394"]
394 -> 395 [label="Line 4452: process_ihex(data, st.st_size)" id="394 -> 395"]
395 -> 397 [label="Line 4460: Function start dummy edge struct ihex_binrec *record; uint32_t offset = 0; uint32_t data32; uint8_t type; uint8_t crc = 0; uint8_t crcbyte = 0; int i; int j; int line = 1; int len; i = 0; Label: next_record" id="395 -> 397"]
820 -> 397 [style="dashed" weight="0" label="covered by"]
822 -> 397 [style="dashed" weight="0" label="covered by"]
843 -> 397 [style="dashed" weight="0" label="covered by"]
878 -> 397 [style="dashed" weight="0" label="covered by"]
397 -> 399 [label="Line 4471: while" id="397 -> 399"]
410 -> 399 [style="dashed" weight="0" label="covered by"]
399 -> 400 [label="Line 4471: [i < size]" id="399 -> 400"]
399 -> 412 [label="Line 4471: [!(i < size)]" id="399 -> 412"]
412 -> 413 [label="Line 4477: [(i + 10) > size]" id="412 -> 413"]
412 -> 414 [label="Line 4477: [!((i + 10) > size)]" id="412 -> 414"]
414 -> 415 [label="Line 4482: hex(data + i, &crc)" id="414 -> 415"]
415 -> 416 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="415 -> 416"]
416 -> 417 [label="Line 4375: nybble(data[0])" id="416 -> 417"]
417 -> 418 [label="Line 0: Function start dummy edge" id="417 -> 418"]
418 -> 419 [label="Line 4367: [n >= '0']" id="418 -> 419"]
418 -> 423 [label="Line 4367: [!(n >= '0')]" id="418 -> 423"]
423 -> 424 [label="Line 4368: [n >= 'A']" id="423 -> 424"]
423 -> 428 [label="Line 4368: [!(n >= 'A')]" id="423 -> 428"]
428 -> 429 [label="Line 4369: [n >= 'a']" id="428 -> 429"]
428 -> 433 [label="Line 4369: [!(n >= 'a')]" id="428 -> 433"]
433 -> 440 [label="Line 4370:  return 0;" id="433 -> 440"]
440 -> 441 [label="Line 4375: Return edge from nybble to hex" id="440 -> 441"]
441 -> 442 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="441 -> 442"]
442 -> 443 [label="Line 4375: nybble(data[1])" id="442 -> 443"]
443 -> 444 [label="Line 0: Function start dummy edge" id="443 -> 444"]
444 -> 445 [label="Line 4367: [n >= '0']" id="444 -> 445"]
444 -> 449 [label="Line 4367: [!(n >= '0')]" id="444 -> 449"]
449 -> 450 [label="Line 4368: [n >= 'A']" id="449 -> 450"]
449 -> 454 [label="Line 4368: [!(n >= 'A')]" id="449 -> 454"]
454 -> 455 [label="Line 4369: [n >= 'a']" id="454 -> 455"]
454 -> 459 [label="Line 4369: [!(n >= 'a')]" id="454 -> 459"]
459 -> 466 [label="Line 4370:  return 0;" id="459 -> 466"]
466 -> 467 [label="Line 4375: Return edge from nybble to hex" id="466 -> 467"]
467 -> 468 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="467 -> 468"]
468 -> 469 [label="Line 4482: Return edge from hex to process_ihex" id="468 -> 469"]
469 -> 470 [label="Line 4482: i = i + 2;" id="469 -> 470"]
470 -> 472 [label="Line 4483: [!(wide_records == 0)]" id="470 -> 472"]
470 -> 530 [label="Line 4483: [wide_records == 0]" id="470 -> 530"]
530 -> 531 [label="Line 4487: record = malloc(((14 + len) + 3) & (~3));" id="530 -> 531"]
531 -> 532 [label="Line 4489: Num = Num - 1;" id="531 -> 532"]
532 -> 533 [label="Line 4490: [Num >= 0]" id="532 -> 533"]
532 -> 534 [label="Line 4490: [!(Num >= 0)]" id="532 -> 534"]
533 -> 535 [label="Line 4490: 0;" id="533 -> 535"]
535 -> 536 [label="Line 4492: [record == 0]" id="535 -> 536"]
535 -> 537 [label="Line 4492: [!(record == 0)]" id="535 -> 537"]
537 -> 538 [label="Line 4498: memset(record, 0, ((14 + len) + 3) & (~3));" id="537 -> 538"]
538 -> 539 [label="Line 4499: record->len = len;" id="538 -> 539"]
539 -> 540 [label="Line 4502: [((i + 8) + ((record->len) * 2)) > size]" id="539 -> 540"]
539 -> 541 [label="Line 4502: [!(((i + 8) + ((record->len) * 2)) > size)]" id="539 -> 541"]
541 -> 542 [label="Line 4510: uint8_t __CPAchecker_TMP_4;" id="541 -> 542"]
542 -> 543 [label="Line 4510: hex(data + i, &crc)" id="542 -> 543"]
543 -> 544 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="543 -> 544"]
544 -> 545 [label="Line 4375: nybble(data[0])" id="544 -> 545"]
545 -> 546 [label="Line 0: Function start dummy edge" id="545 -> 546"]
546 -> 547 [label="Line 4367: [n >= '0']" id="546 -> 547"]
546 -> 551 [label="Line 4367: [!(n >= '0')]" id="546 -> 551"]
551 -> 552 [label="Line 4368: [n >= 'A']" id="551 -> 552"]
551 -> 556 [label="Line 4368: [!(n >= 'A')]" id="551 -> 556"]
556 -> 557 [label="Line 4369: [n >= 'a']" id="556 -> 557"]
556 -> 561 [label="Line 4369: [!(n >= 'a')]" id="556 -> 561"]
561 -> 568 [label="Line 4370:  return 0;" id="561 -> 568"]
568 -> 569 [label="Line 4375: Return edge from nybble to hex" id="568 -> 569"]
569 -> 570 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="569 -> 570"]
570 -> 571 [label="Line 4375: nybble(data[1])" id="570 -> 571"]
571 -> 572 [label="Line 0: Function start dummy edge" id="571 -> 572"]
572 -> 573 [label="Line 4367: [n >= '0']" id="572 -> 573"]
572 -> 577 [label="Line 4367: [!(n >= '0')]" id="572 -> 577"]
577 -> 578 [label="Line 4368: [n >= 'A']" id="577 -> 578"]
577 -> 582 [label="Line 4368: [!(n >= 'A')]" id="577 -> 582"]
582 -> 583 [label="Line 4369: [n >= 'a']" id="582 -> 583"]
582 -> 587 [label="Line 4369: [!(n >= 'a')]" id="582 -> 587"]
587 -> 594 [label="Line 4370:  return 0;" id="587 -> 594"]
594 -> 595 [label="Line 4375: Return edge from nybble to hex" id="594 -> 595"]
595 -> 596 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="595 -> 596"]
596 -> 597 [label="Line 4510: Return edge from hex to process_ihex" id="596 -> 597"]
597 -> 598 [label="Line 4510: record->addr = __CPAchecker_TMP_4 << 8; i = i + 2; uint8_t __CPAchecker_TMP_5;" id="597 -> 598"]
598 -> 599 [label="Line 4511: hex(data + i, &crc)" id="598 -> 599"]
599 -> 600 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="599 -> 600"]
600 -> 601 [label="Line 4375: nybble(data[0])" id="600 -> 601"]
601 -> 602 [label="Line 0: Function start dummy edge" id="601 -> 602"]
602 -> 603 [label="Line 4367: [n >= '0']" id="602 -> 603"]
602 -> 607 [label="Line 4367: [!(n >= '0')]" id="602 -> 607"]
607 -> 608 [label="Line 4368: [n >= 'A']" id="607 -> 608"]
607 -> 612 [label="Line 4368: [!(n >= 'A')]" id="607 -> 612"]
612 -> 613 [label="Line 4369: [n >= 'a']" id="612 -> 613"]
612 -> 617 [label="Line 4369: [!(n >= 'a')]" id="612 -> 617"]
617 -> 624 [label="Line 4370:  return 0;" id="617 -> 624"]
624 -> 625 [label="Line 4375: Return edge from nybble to hex" id="624 -> 625"]
625 -> 626 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="625 -> 626"]
626 -> 627 [label="Line 4375: nybble(data[1])" id="626 -> 627"]
627 -> 628 [label="Line 0: Function start dummy edge" id="627 -> 628"]
628 -> 629 [label="Line 4367: [n >= '0']" id="628 -> 629"]
628 -> 633 [label="Line 4367: [!(n >= '0')]" id="628 -> 633"]
633 -> 634 [label="Line 4368: [n >= 'A']" id="633 -> 634"]
633 -> 638 [label="Line 4368: [!(n >= 'A')]" id="633 -> 638"]
638 -> 639 [label="Line 4369: [n >= 'a']" id="638 -> 639"]
638 -> 643 [label="Line 4369: [!(n >= 'a')]" id="638 -> 643"]
643 -> 650 [label="Line 4370:  return 0;" id="643 -> 650"]
650 -> 651 [label="Line 4375: Return edge from nybble to hex" id="650 -> 651"]
651 -> 652 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="651 -> 652"]
652 -> 653 [label="Line 4511: Return edge from hex to process_ihex" id="652 -> 653"]
653 -> 654 [label="Line 4511: record->addr = (record->addr) | __CPAchecker_TMP_5; i = i + 2;" id="653 -> 654"]
654 -> 655 [label="Line 4512: hex(data + i, &crc)" id="654 -> 655"]
655 -> 656 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="655 -> 656"]
656 -> 657 [label="Line 4375: nybble(data[0])" id="656 -> 657"]
657 -> 658 [label="Line 0: Function start dummy edge" id="657 -> 658"]
658 -> 659 [label="Line 4367: [n >= '0']" id="658 -> 659"]
658 -> 663 [label="Line 4367: [!(n >= '0')]" id="658 -> 663"]
663 -> 664 [label="Line 4368: [n >= 'A']" id="663 -> 664"]
663 -> 668 [label="Line 4368: [!(n >= 'A')]" id="663 -> 668"]
668 -> 669 [label="Line 4369: [n >= 'a']" id="668 -> 669"]
668 -> 673 [label="Line 4369: [!(n >= 'a')]" id="668 -> 673"]
673 -> 680 [label="Line 4370:  return 0;" id="673 -> 680"]
680 -> 681 [label="Line 4375: Return edge from nybble to hex" id="680 -> 681"]
681 -> 682 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="681 -> 682"]
682 -> 683 [label="Line 4375: nybble(data[1])" id="682 -> 683"]
683 -> 684 [label="Line 0: Function start dummy edge" id="683 -> 684"]
684 -> 685 [label="Line 4367: [n >= '0']" id="684 -> 685"]
684 -> 689 [label="Line 4367: [!(n >= '0')]" id="684 -> 689"]
689 -> 690 [label="Line 4368: [n >= 'A']" id="689 -> 690"]
689 -> 694 [label="Line 4368: [!(n >= 'A')]" id="689 -> 694"]
694 -> 695 [label="Line 4369: [n >= 'a']" id="694 -> 695"]
694 -> 699 [label="Line 4369: [!(n >= 'a')]" id="694 -> 699"]
699 -> 706 [label="Line 4370:  return 0;" id="699 -> 706"]
706 -> 707 [label="Line 4375: Return edge from nybble to hex" id="706 -> 707"]
707 -> 708 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="707 -> 708"]
708 -> 709 [label="Line 4512: Return edge from hex to process_ihex" id="708 -> 709"]
709 -> 711 [label="Line 4512: i = i + 2; for j = 0;" id="709 -> 711"]
943 -> 711 [style="dashed" weight="0" label="covered by"]
711 -> 712 [label="Line 4514: [j < (record->len)]" id="711 -> 712"]
711 -> 713 [label="Line 4514: [!(j < (record->len))]" id="711 -> 713"]
713 -> 714 [label="Line 4518: hex(data + i, &crc)" id="713 -> 714"]
714 -> 715 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="714 -> 715"]
715 -> 716 [label="Line 4375: nybble(data[0])" id="715 -> 716"]
716 -> 717 [label="Line 0: Function start dummy edge" id="716 -> 717"]
717 -> 718 [label="Line 4367: [n >= '0']" id="717 -> 718"]
717 -> 722 [label="Line 4367: [!(n >= '0')]" id="717 -> 722"]
722 -> 723 [label="Line 4368: [n >= 'A']" id="722 -> 723"]
722 -> 727 [label="Line 4368: [!(n >= 'A')]" id="722 -> 727"]
727 -> 728 [label="Line 4369: [n >= 'a']" id="727 -> 728"]
727 -> 732 [label="Line 4369: [!(n >= 'a')]" id="727 -> 732"]
732 -> 739 [label="Line 4370:  return 0;" id="732 -> 739"]
739 -> 740 [label="Line 4375: Return edge from nybble to hex" id="739 -> 740"]
740 -> 741 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="740 -> 741"]
741 -> 742 [label="Line 4375: nybble(data[1])" id="741 -> 742"]
742 -> 743 [label="Line 0: Function start dummy edge" id="742 -> 743"]
743 -> 744 [label="Line 4367: [n >= '0']" id="743 -> 744"]
743 -> 748 [label="Line 4367: [!(n >= '0')]" id="743 -> 748"]
748 -> 749 [label="Line 4368: [n >= 'A']" id="748 -> 749"]
748 -> 753 [label="Line 4368: [!(n >= 'A')]" id="748 -> 753"]
753 -> 754 [label="Line 4369: [n >= 'a']" id="753 -> 754"]
753 -> 758 [label="Line 4369: [!(n >= 'a')]" id="753 -> 758"]
758 -> 765 [label="Line 4370:  return 0;" id="758 -> 765"]
765 -> 766 [label="Line 4375: Return edge from nybble to hex" id="765 -> 766"]
766 -> 767 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="766 -> 767"]
767 -> 768 [label="Line 4518: Return edge from hex to process_ihex" id="767 -> 768"]
768 -> 769 [label="Line 4518: i = i + 2;" id="768 -> 769"]
769 -> 770 [label="Line 4519: [crc != 0]" id="769 -> 770"]
769 -> 771 [label="Line 4519: [!(crc != 0)]" id="769 -> 771"]
771 -> 772 [label="Line 4528: switch (type)" id="771 -> 772"]
772 -> 773 [label="Line 4529: [type == 0]" id="772 -> 773"]
772 -> 774 [label="Line 4529: [!(type == 0)]" id="772 -> 774"]
774 -> 775 [label="Line 4540: [type == 1]" id="774 -> 775"]
774 -> 776 [label="Line 4540: [!(type == 1)]" id="774 -> 776"]
776 -> 777 [label="Line 4550: [type == 2]" id="776 -> 777"]
776 -> 778 [label="Line 4550: [!(type == 2)]" id="776 -> 778"]
778 -> 780 [label="Line 4551: [!(type == 4)]" id="778 -> 780"]
778 -> 828 [label="Line 4551: [type == 4]" id="778 -> 828"]
828 -> 829 [label="Line 4552: [(record->addr) == 0]" id="828 -> 829"]
828 -> 833 [label="Line 4552: [!((record->addr) == 0)]" id="828 -> 833"]
833 -> 844 [label="Line 4553: fprintf(stderr, 'Bad HEX86/HEX386 record (type %02X) at line %d\n', type, line);" id="833 -> 844"]
844 -> 845 [label="Line 4555: free(record);" id="844 -> 845"]
845 -> 886 [label="Line 4556: Num = Num + 1; return -22;" id="845 -> 886"]
886 -> 954 [label="Line 4452: Return edge from process_ihex to main" id="886 -> 954"]
954 -> 956 [label="Line 4452: [__CPAchecker_TMP_10 == 0]" id="954 -> 956"]
954 -> 957 [label="Line 4452: [!(__CPAchecker_TMP_10 == 0)]" id="954 -> 957"]
957 -> 960 [label="Line 4453: return 1;" id="957 -> 960"]
956 -> 962 [label="Line 4455: int __CPAchecker_TMP_11;" id="956 -> 962"]
962 -> 964 [label="Line 4455: output_records(outfd)" id="962 -> 964"]
964 -> 966 [label="Line 4614: Function start dummy edge unsigned char zeroes[6] = { 0, 0, 0, 0, 0, 0 }; struct ihex_binrec *p = records; while" id="964 -> 966"]
977 -> 966 [style="dashed" weight="0" label="covered by"]
966 -> 967 [label="Line 4617: [p == 0]" id="966 -> 967"]
966 -> 968 [label="Line 4617: [!(p == 0)]" id="966 -> 968"]
968 -> 969 [label="Line 4618: uint16_t writelen = ((p->len) + 9) & (~3);" id="968 -> 969"]
969 -> 970 [label="Line 4620: p->addr = htonl(p->addr);" id="969 -> 970"]
970 -> 971 [label="Line 4621: p->len = htons(p->len);" id="970 -> 971"]
971 -> 972 [label="Line 4622: ssize_t __CPAchecker_TMP_0;" id="971 -> 972"]
972 -> 973 [label="Line 4622: __CPAchecker_TMP_0 = write(outfd, &(p->addr), writelen);" id="972 -> 973"]
973 -> 974 [label="Line 4622: [__CPAchecker_TMP_0 != writelen]" id="973 -> 974"]
973 -> 975 [label="Line 4622: [!(__CPAchecker_TMP_0 != writelen)]" id="973 -> 975"]
975 -> 977 [label="Line 4624: p = p->next; " id="975 -> 977"]
974 -> 986 [label="Line 4623: return 1;" id="974 -> 986"]
986 -> 987 [label="Line 4455: Return edge from output_records to main" id="986 -> 987"]
987 -> 991 [label="Line 4455: return __CPAchecker_TMP_11;" id="987 -> 991"]
967 -> 979 [label="Line 4628: ssize_t __CPAchecker_TMP_1;" id="967 -> 979"]
979 -> 980 [label="Line 4628: __CPAchecker_TMP_1 = write(outfd, zeroes, 6);" id="979 -> 980"]
980 -> 981 [label="Line 4628: [__CPAchecker_TMP_1 != 6]" id="980 -> 981"]
980 -> 982 [label="Line 4628: [!(__CPAchecker_TMP_1 != 6)]" id="980 -> 982"]
982 -> 986 [label="Line 4630: return 0;" id="982 -> 986"]
981 -> 986 [label="Line 4629: return 1;" id="981 -> 986"]
829 -> 832 [label="Line 4552: [!((record->len) != 2)]" id="829 -> 832"]
829 -> 833 [label="Line 4552: [(record->len) != 2]" id="829 -> 833"]
832 -> 834 [label="Line 4562: offset = (((record->data)[0]) << 8) | ((record->data)[1]); int __CPAchecker_TMP_7;" id="832 -> 834"]
834 -> 835 [label="Line 4563: [type == 2]" id="834 -> 835"]
834 -> 836 [label="Line 4563: [!(type == 2)]" id="834 -> 836"]
836 -> 839 [label="Line 4563: __CPAchecker_TMP_7 = 16;" id="836 -> 839"]
839 -> 840 [label="Line 4563: offset = offset << __CPAchecker_TMP_7;" id="839 -> 840"]
840 -> 841 [label="Line 4564: free(record);" id="840 -> 841"]
841 -> 843 [label="Line 4565: Num = Num + 1; Goto: next_record" id="841 -> 843"]
835 -> 839 [label="Line 4563: __CPAchecker_TMP_7 = 4;" id="835 -> 839"]
780 -> 781 [label="Line 4568: [type == 3]" id="780 -> 781"]
780 -> 782 [label="Line 4568: [!(type == 3)]" id="780 -> 782"]
782 -> 784 [label="Line 4569: [!(type == 5)]" id="782 -> 784"]
782 -> 790 [label="Line 4569: [type == 5]" id="782 -> 790"]
790 -> 791 [label="Line 4570: [(record->addr) == 0]" id="790 -> 791"]
790 -> 795 [label="Line 4570: [!((record->addr) == 0)]" id="790 -> 795"]
795 -> 823 [label="Line 4571: fprintf(stderr, 'Bad Start Address record (type %02X) at line %d\n', type, line);" id="795 -> 823"]
823 -> 824 [label="Line 4573: free(record);" id="823 -> 824"]
824 -> 886 [label="Line 4574: Num = Num + 1; return -22;" id="824 -> 886"]
791 -> 794 [label="Line 4570: [!((record->len) != 4)]" id="791 -> 794"]
791 -> 795 [label="Line 4570: [(record->len) != 4]" id="791 -> 795"]
794 -> 796 [label="Line 4578: memcpy(&data32, &((record->data)[0]), 4);" id="794 -> 796"]
796 -> 797 [label="Line 4579: data32 = htonl(data32);" id="796 -> 797"]
797 -> 798 [label="Line 4580: memcpy(&((record->data)[0]), &data32, 4);" id="797 -> 798"]
798 -> 799 [label="Line 4584: [include_jump == 0]" id="798 -> 799"]
798 -> 800 [label="Line 4584: [!(include_jump == 0)]" id="798 -> 800"]
800 -> 801 [label="Line 4585: file_record(record)" id="800 -> 801"]
801 -> 803 [label="Line 4603: Function start dummy edge struct ihex_binrec **p = &records; while" id="801 -> 803"]
813 -> 803 [style="dashed" weight="0" label="covered by"]
803 -> 805 [label="Line 4605: [!((*p) == 0)]" id="803 -> 805"]
803 -> 811 [label="Line 4605: [(*p) == 0]" id="803 -> 811"]
811 -> 814 [label="Line 4608: record->next = *p; *p = record; default return" id="811 -> 814"]
814 -> 815 [label="Line 4585: Return edge from file_record to process_ihex" id="814 -> 815"]
815 -> 816 [label="Line 0: " id="815 -> 816"]
816 -> 818 [label="Line 4586: free(record);" id="816 -> 818"]
818 -> 822 [label="Line 4587: Num = Num + 1; Goto: next_record" id="818 -> 822"]
805 -> 807 [label="Line 4605: [!(sort_records == 0)]" id="805 -> 807"]
805 -> 810 [label="Line 4605: [sort_records == 0]" id="805 -> 810"]
810 -> 813 [label="Line 4606: p = &((*p)->next); " id="810 -> 813"]
807 -> 810 [label="Line 4605: [((*p)->addr) < (record->addr)]" id="807 -> 810"]
807 -> 811 [label="Line 4605: [!(((*p)->addr) < (record->addr))]" id="807 -> 811"]
799 -> 817 [label="Line 4586: free(record);" id="799 -> 817"]
817 -> 820 [label="Line 4587: Num = Num + 1; Goto: next_record" id="817 -> 820"]
784 -> 785 [label="Line 0: default" id="784 -> 785"]
785 -> 786 [label="Line 4591: fprintf(stderr, 'Unknown record (type %02X)\n', type);" id="785 -> 786"]
786 -> 787 [label="Line 4592: free(record);" id="786 -> 787"]
787 -> 886 [label="Line 4593: Num = Num + 1; return -22;" id="787 -> 886"]
781 -> 790 [label="Line 4569: fall through" id="781 -> 790"]
777 -> 828 [label="Line 4551: fall through" id="777 -> 828"]
775 -> 848 [label="Line 4541: [(record->addr) == 0]" id="775 -> 848"]
775 -> 852 [label="Line 4541: [!((record->addr) == 0)]" id="775 -> 852"]
852 -> 853 [label="Line 4542: fprintf(stderr, 'Bad EOF record (type 01) format at line %d', line);" id="852 -> 853"]
853 -> 854 [label="Line 4544: free(record);" id="853 -> 854"]
854 -> 886 [label="Line 4545: Num = Num + 1; return -22;" id="854 -> 886"]
848 -> 850 [label="Line 4541: [(record->len) == 0]" id="848 -> 850"]
848 -> 852 [label="Line 4541: [!((record->len) == 0)]" id="848 -> 852"]
850 -> 880 [label="Line 4548: break" id="850 -> 880"]
880 -> 886 [label="Line 4597: return 0;" id="880 -> 886"]
773 -> 858 [label="Line 4531: [(record->len) == 0]" id="773 -> 858"]
773 -> 859 [label="Line 4531: [!((record->len) == 0)]" id="773 -> 859"]
859 -> 860 [label="Line 4534: record->addr = (record->addr) + offset;" id="859 -> 860"]
860 -> 861 [label="Line 4535: file_record(record)" id="860 -> 861"]
861 -> 863 [label="Line 4603: Function start dummy edge struct ihex_binrec **p = &records; while" id="861 -> 863"]
873 -> 863 [style="dashed" weight="0" label="covered by"]
863 -> 865 [label="Line 4605: [!((*p) == 0)]" id="863 -> 865"]
863 -> 871 [label="Line 4605: [(*p) == 0]" id="863 -> 871"]
871 -> 874 [label="Line 4608: record->next = *p; *p = record; default return" id="871 -> 874"]
874 -> 875 [label="Line 4535: Return edge from file_record to process_ihex" id="874 -> 875"]
875 -> 876 [label="Line 4536: free(record);" id="875 -> 876"]
876 -> 878 [label="Line 4537: Num = Num + 1; Goto: next_record" id="876 -> 878"]
865 -> 867 [label="Line 4605: [!(sort_records == 0)]" id="865 -> 867"]
865 -> 870 [label="Line 4605: [sort_records == 0]" id="865 -> 870"]
870 -> 873 [label="Line 4606: p = &((*p)->next); " id="870 -> 873"]
867 -> 870 [label="Line 4605: [((*p)->addr) < (record->addr)]" id="867 -> 870"]
867 -> 871 [label="Line 4605: [!(((*p)->addr) < (record->addr))]" id="867 -> 871"]
858 -> 880 [label="Line 4532: break" id="858 -> 880"]
770 -> 883 [label="Line 4520: fprintf(stderr, 'CRC failure at line %d: got 0x%X, expected 0x%X\n', line, crcbyte, (unsigned char)(crcbyte - crc));" id="770 -> 883"]
883 -> 884 [label="Line 4522: free(record);" id="883 -> 884"]
884 -> 886 [label="Line 4523: Num = Num + 1; return -22;" id="884 -> 886"]
754 -> 756 [label="Line 4369: [n <= 'f']" id="754 -> 756"]
754 -> 758 [label="Line 4369: [!(n <= 'f')]" id="754 -> 758"]
756 -> 765 [label="Line 4369: return n - ('a' - 10);" id="756 -> 765"]
749 -> 751 [label="Line 4368: [n <= 'F']" id="749 -> 751"]
749 -> 753 [label="Line 4368: [!(n <= 'F')]" id="749 -> 753"]
751 -> 765 [label="Line 4368: return n - ('A' - 10);" id="751 -> 765"]
744 -> 746 [label="Line 4367: [n <= '9']" id="744 -> 746"]
744 -> 748 [label="Line 4367: [!(n <= '9')]" id="744 -> 748"]
746 -> 765 [label="Line 4367: return n - '0';" id="746 -> 765"]
728 -> 730 [label="Line 4369: [n <= 'f']" id="728 -> 730"]
728 -> 732 [label="Line 4369: [!(n <= 'f')]" id="728 -> 732"]
730 -> 739 [label="Line 4369: return n - ('a' - 10);" id="730 -> 739"]
723 -> 725 [label="Line 4368: [n <= 'F']" id="723 -> 725"]
723 -> 727 [label="Line 4368: [!(n <= 'F')]" id="723 -> 727"]
725 -> 739 [label="Line 4368: return n - ('A' - 10);" id="725 -> 739"]
718 -> 720 [label="Line 4367: [n <= '9']" id="718 -> 720"]
718 -> 722 [label="Line 4367: [!(n <= '9')]" id="718 -> 722"]
720 -> 739 [label="Line 4367: return n - '0';" id="720 -> 739"]
712 -> 887 [label="Line 4515: hex(data + i, &crc)" id="712 -> 887"]
887 -> 888 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="887 -> 888"]
888 -> 889 [label="Line 4375: nybble(data[0])" id="888 -> 889"]
889 -> 890 [label="Line 0: Function start dummy edge" id="889 -> 890"]
890 -> 891 [label="Line 4367: [n >= '0']" id="890 -> 891"]
890 -> 895 [label="Line 4367: [!(n >= '0')]" id="890 -> 895"]
895 -> 896 [label="Line 4368: [n >= 'A']" id="895 -> 896"]
895 -> 900 [label="Line 4368: [!(n >= 'A')]" id="895 -> 900"]
900 -> 901 [label="Line 4369: [n >= 'a']" id="900 -> 901"]
900 -> 905 [label="Line 4369: [!(n >= 'a')]" id="900 -> 905"]
905 -> 912 [label="Line 4370:  return 0;" id="905 -> 912"]
912 -> 913 [label="Line 4375: Return edge from nybble to hex" id="912 -> 913"]
913 -> 914 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="913 -> 914"]
914 -> 915 [label="Line 4375: nybble(data[1])" id="914 -> 915"]
915 -> 916 [label="Line 0: Function start dummy edge" id="915 -> 916"]
916 -> 917 [label="Line 4367: [n >= '0']" id="916 -> 917"]
916 -> 921 [label="Line 4367: [!(n >= '0')]" id="916 -> 921"]
921 -> 922 [label="Line 4368: [n >= 'A']" id="921 -> 922"]
921 -> 926 [label="Line 4368: [!(n >= 'A')]" id="921 -> 926"]
926 -> 927 [label="Line 4369: [n >= 'a']" id="926 -> 927"]
926 -> 931 [label="Line 4369: [!(n >= 'a')]" id="926 -> 931"]
931 -> 938 [label="Line 4370:  return 0;" id="931 -> 938"]
938 -> 939 [label="Line 4375: Return edge from nybble to hex" id="938 -> 939"]
939 -> 940 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="939 -> 940"]
940 -> 941 [label="Line 4515: Return edge from hex to process_ihex" id="940 -> 941"]
941 -> 943 [label="Line 4514:  int __CPAchecker_TMP_6 = j; j = j + 1; __CPAchecker_TMP_6; i = i + 2;" id="941 -> 943"]
927 -> 929 [label="Line 4369: [n <= 'f']" id="927 -> 929"]
927 -> 931 [label="Line 4369: [!(n <= 'f')]" id="927 -> 931"]
929 -> 938 [label="Line 4369: return n - ('a' - 10);" id="929 -> 938"]
922 -> 924 [label="Line 4368: [n <= 'F']" id="922 -> 924"]
922 -> 926 [label="Line 4368: [!(n <= 'F')]" id="922 -> 926"]
924 -> 938 [label="Line 4368: return n - ('A' - 10);" id="924 -> 938"]
917 -> 919 [label="Line 4367: [n <= '9']" id="917 -> 919"]
917 -> 921 [label="Line 4367: [!(n <= '9')]" id="917 -> 921"]
919 -> 938 [label="Line 4367: return n - '0';" id="919 -> 938"]
901 -> 903 [label="Line 4369: [n <= 'f']" id="901 -> 903"]
901 -> 905 [label="Line 4369: [!(n <= 'f')]" id="901 -> 905"]
903 -> 912 [label="Line 4369: return n - ('a' - 10);" id="903 -> 912"]
896 -> 898 [label="Line 4368: [n <= 'F']" id="896 -> 898"]
896 -> 900 [label="Line 4368: [!(n <= 'F')]" id="896 -> 900"]
898 -> 912 [label="Line 4368: return n - ('A' - 10);" id="898 -> 912"]
891 -> 893 [label="Line 4367: [n <= '9']" id="891 -> 893"]
891 -> 895 [label="Line 4367: [!(n <= '9')]" id="891 -> 895"]
893 -> 912 [label="Line 4367: return n - '0';" id="893 -> 912"]
695 -> 697 [label="Line 4369: [n <= 'f']" id="695 -> 697"]
695 -> 699 [label="Line 4369: [!(n <= 'f')]" id="695 -> 699"]
697 -> 706 [label="Line 4369: return n - ('a' - 10);" id="697 -> 706"]
690 -> 692 [label="Line 4368: [n <= 'F']" id="690 -> 692"]
690 -> 694 [label="Line 4368: [!(n <= 'F')]" id="690 -> 694"]
692 -> 706 [label="Line 4368: return n - ('A' - 10);" id="692 -> 706"]
685 -> 687 [label="Line 4367: [n <= '9']" id="685 -> 687"]
685 -> 689 [label="Line 4367: [!(n <= '9')]" id="685 -> 689"]
687 -> 706 [label="Line 4367: return n - '0';" id="687 -> 706"]
669 -> 671 [label="Line 4369: [n <= 'f']" id="669 -> 671"]
669 -> 673 [label="Line 4369: [!(n <= 'f')]" id="669 -> 673"]
671 -> 680 [label="Line 4369: return n - ('a' - 10);" id="671 -> 680"]
664 -> 666 [label="Line 4368: [n <= 'F']" id="664 -> 666"]
664 -> 668 [label="Line 4368: [!(n <= 'F')]" id="664 -> 668"]
666 -> 680 [label="Line 4368: return n - ('A' - 10);" id="666 -> 680"]
659 -> 661 [label="Line 4367: [n <= '9']" id="659 -> 661"]
659 -> 663 [label="Line 4367: [!(n <= '9')]" id="659 -> 663"]
661 -> 680 [label="Line 4367: return n - '0';" id="661 -> 680"]
639 -> 641 [label="Line 4369: [n <= 'f']" id="639 -> 641"]
639 -> 643 [label="Line 4369: [!(n <= 'f')]" id="639 -> 643"]
641 -> 650 [label="Line 4369: return n - ('a' - 10);" id="641 -> 650"]
634 -> 636 [label="Line 4368: [n <= 'F']" id="634 -> 636"]
634 -> 638 [label="Line 4368: [!(n <= 'F')]" id="634 -> 638"]
636 -> 650 [label="Line 4368: return n - ('A' - 10);" id="636 -> 650"]
629 -> 631 [label="Line 4367: [n <= '9']" id="629 -> 631"]
629 -> 633 [label="Line 4367: [!(n <= '9')]" id="629 -> 633"]
631 -> 650 [label="Line 4367: return n - '0';" id="631 -> 650"]
613 -> 615 [label="Line 4369: [n <= 'f']" id="613 -> 615"]
613 -> 617 [label="Line 4369: [!(n <= 'f')]" id="613 -> 617"]
615 -> 624 [label="Line 4369: return n - ('a' - 10);" id="615 -> 624"]
608 -> 610 [label="Line 4368: [n <= 'F']" id="608 -> 610"]
608 -> 612 [label="Line 4368: [!(n <= 'F')]" id="608 -> 612"]
610 -> 624 [label="Line 4368: return n - ('A' - 10);" id="610 -> 624"]
603 -> 605 [label="Line 4367: [n <= '9']" id="603 -> 605"]
603 -> 607 [label="Line 4367: [!(n <= '9')]" id="603 -> 607"]
605 -> 624 [label="Line 4367: return n - '0';" id="605 -> 624"]
583 -> 585 [label="Line 4369: [n <= 'f']" id="583 -> 585"]
583 -> 587 [label="Line 4369: [!(n <= 'f')]" id="583 -> 587"]
585 -> 594 [label="Line 4369: return n - ('a' - 10);" id="585 -> 594"]
578 -> 580 [label="Line 4368: [n <= 'F']" id="578 -> 580"]
578 -> 582 [label="Line 4368: [!(n <= 'F')]" id="578 -> 582"]
580 -> 594 [label="Line 4368: return n - ('A' - 10);" id="580 -> 594"]
573 -> 575 [label="Line 4367: [n <= '9']" id="573 -> 575"]
573 -> 577 [label="Line 4367: [!(n <= '9')]" id="573 -> 577"]
575 -> 594 [label="Line 4367: return n - '0';" id="575 -> 594"]
557 -> 559 [label="Line 4369: [n <= 'f']" id="557 -> 559"]
557 -> 561 [label="Line 4369: [!(n <= 'f')]" id="557 -> 561"]
559 -> 568 [label="Line 4369: return n - ('a' - 10);" id="559 -> 568"]
552 -> 554 [label="Line 4368: [n <= 'F']" id="552 -> 554"]
552 -> 556 [label="Line 4368: [!(n <= 'F')]" id="552 -> 556"]
554 -> 568 [label="Line 4368: return n - ('A' - 10);" id="554 -> 568"]
547 -> 549 [label="Line 4367: [n <= '9']" id="547 -> 549"]
547 -> 551 [label="Line 4367: [!(n <= '9')]" id="547 -> 551"]
549 -> 568 [label="Line 4367: return n - '0';" id="549 -> 568"]
540 -> 944 [label="Line 4503: fprintf(stderr, 'Not enough data to read complete record at line %d\n', line);" id="540 -> 944"]
944 -> 945 [label="Line 4505: free(record);" id="944 -> 945"]
945 -> 953 [label="Line 4506: Num = Num + 1; return -22;" id="945 -> 953"]
953 -> 955 [label="Line 4452: Return edge from process_ihex to main" id="953 -> 955"]
955 -> 958 [label="Line 4452: [__CPAchecker_TMP_10 == 0]" id="955 -> 958"]
955 -> 959 [label="Line 4452: [!(__CPAchecker_TMP_10 == 0)]" id="955 -> 959"]
959 -> 961 [label="Line 4453: return 1;" id="959 -> 961"]
958 -> 963 [label="Line 4455: int __CPAchecker_TMP_11;" id="958 -> 963"]
963 -> 988 [label="Line 4455: output_records(outfd)" id="963 -> 988"]
988 -> 990 [label="Line 4614: Function start dummy edge unsigned char zeroes[6] = { 0, 0, 0, 0, 0, 0 }; struct ihex_binrec *p = records; while" id="988 -> 990"]
536 -> 947 [label="Line 4493: fprintf(stderr, 'out of memory for records\n');" id="536 -> 947"]
947 -> 948 [label="Line 4494: free(record);" id="947 -> 948"]
948 -> 953 [label="Line 4495: Num = Num + 1; return -12;" id="948 -> 953"]
472 -> 473 [label="Line 4484: len = len << 8; uint8_t __CPAchecker_TMP_2;" id="472 -> 473"]
473 -> 474 [label="Line 4485: hex(data + i, &crc)" id="473 -> 474"]
474 -> 475 [label="Line 4375: Function start dummy edge uint8_t __CPAchecker_TMP_0;" id="474 -> 475"]
475 -> 476 [label="Line 4375: nybble(data[0])" id="475 -> 476"]
476 -> 477 [label="Line 0: Function start dummy edge" id="476 -> 477"]
477 -> 478 [label="Line 4367: [n >= '0']" id="477 -> 478"]
477 -> 482 [label="Line 4367: [!(n >= '0')]" id="477 -> 482"]
482 -> 483 [label="Line 4368: [n >= 'A']" id="482 -> 483"]
482 -> 487 [label="Line 4368: [!(n >= 'A')]" id="482 -> 487"]
487 -> 488 [label="Line 4369: [n >= 'a']" id="487 -> 488"]
487 -> 492 [label="Line 4369: [!(n >= 'a')]" id="487 -> 492"]
492 -> 499 [label="Line 4370:  return 0;" id="492 -> 499"]
499 -> 500 [label="Line 4375: Return edge from nybble to hex" id="499 -> 500"]
500 -> 501 [label="Line 4375: uint8_t __CPAchecker_TMP_1;" id="500 -> 501"]
501 -> 502 [label="Line 4375: nybble(data[1])" id="501 -> 502"]
502 -> 503 [label="Line 0: Function start dummy edge" id="502 -> 503"]
503 -> 504 [label="Line 4367: [n >= '0']" id="503 -> 504"]
503 -> 508 [label="Line 4367: [!(n >= '0')]" id="503 -> 508"]
508 -> 509 [label="Line 4368: [n >= 'A']" id="508 -> 509"]
508 -> 513 [label="Line 4368: [!(n >= 'A')]" id="508 -> 513"]
513 -> 514 [label="Line 4369: [n >= 'a']" id="513 -> 514"]
513 -> 518 [label="Line 4369: [!(n >= 'a')]" id="513 -> 518"]
518 -> 525 [label="Line 4370:  return 0;" id="518 -> 525"]
525 -> 526 [label="Line 4375: Return edge from nybble to hex" id="525 -> 526"]
526 -> 527 [label="Line 4375: uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;" id="526 -> 527"]
527 -> 528 [label="Line 4485: Return edge from hex to process_ihex" id="527 -> 528"]
528 -> 530 [label="Line 4485: len = len + __CPAchecker_TMP_2; i = i + 2; " id="528 -> 530"]
514 -> 516 [label="Line 4369: [n <= 'f']" id="514 -> 516"]
514 -> 518 [label="Line 4369: [!(n <= 'f')]" id="514 -> 518"]
516 -> 525 [label="Line 4369: return n - ('a' - 10);" id="516 -> 525"]
509 -> 511 [label="Line 4368: [n <= 'F']" id="509 -> 511"]
509 -> 513 [label="Line 4368: [!(n <= 'F')]" id="509 -> 513"]
511 -> 525 [label="Line 4368: return n - ('A' - 10);" id="511 -> 525"]
504 -> 506 [label="Line 4367: [n <= '9']" id="504 -> 506"]
504 -> 508 [label="Line 4367: [!(n <= '9')]" id="504 -> 508"]
506 -> 525 [label="Line 4367: return n - '0';" id="506 -> 525"]
488 -> 490 [label="Line 4369: [n <= 'f']" id="488 -> 490"]
488 -> 492 [label="Line 4369: [!(n <= 'f')]" id="488 -> 492"]
490 -> 499 [label="Line 4369: return n - ('a' - 10);" id="490 -> 499"]
483 -> 485 [label="Line 4368: [n <= 'F']" id="483 -> 485"]
483 -> 487 [label="Line 4368: [!(n <= 'F')]" id="483 -> 487"]
485 -> 499 [label="Line 4368: return n - ('A' - 10);" id="485 -> 499"]
478 -> 480 [label="Line 4367: [n <= '9']" id="478 -> 480"]
478 -> 482 [label="Line 4367: [!(n <= '9')]" id="478 -> 482"]
480 -> 499 [label="Line 4367: return n - '0';" id="480 -> 499"]
455 -> 457 [label="Line 4369: [n <= 'f']" id="455 -> 457"]
455 -> 459 [label="Line 4369: [!(n <= 'f')]" id="455 -> 459"]
457 -> 466 [label="Line 4369: return n - ('a' - 10);" id="457 -> 466"]
450 -> 452 [label="Line 4368: [n <= 'F']" id="450 -> 452"]
450 -> 454 [label="Line 4368: [!(n <= 'F')]" id="450 -> 454"]
452 -> 466 [label="Line 4368: return n - ('A' - 10);" id="452 -> 466"]
445 -> 447 [label="Line 4367: [n <= '9']" id="445 -> 447"]
445 -> 449 [label="Line 4367: [!(n <= '9')]" id="445 -> 449"]
447 -> 466 [label="Line 4367: return n - '0';" id="447 -> 466"]
429 -> 431 [label="Line 4369: [n <= 'f']" id="429 -> 431"]
429 -> 433 [label="Line 4369: [!(n <= 'f')]" id="429 -> 433"]
431 -> 440 [label="Line 4369: return n - ('a' - 10);" id="431 -> 440"]
424 -> 426 [label="Line 4368: [n <= 'F']" id="424 -> 426"]
424 -> 428 [label="Line 4368: [!(n <= 'F')]" id="424 -> 428"]
426 -> 440 [label="Line 4368: return n - ('A' - 10);" id="426 -> 440"]
419 -> 421 [label="Line 4367: [n <= '9']" id="419 -> 421"]
419 -> 423 [label="Line 4367: [!(n <= '9')]" id="419 -> 423"]
421 -> 440 [label="Line 4367: return n - '0';" id="421 -> 440"]
413 -> 951 [label="Line 4478: fprintf(stderr, 'Can't find valid record at line %d\n', line);" id="413 -> 951"]
951 -> 953 [label="Line 4479: return -22;" id="951 -> 953"]
400 -> 402 [label="Line 4472: [(data[i]) == '\xa']" id="400 -> 402"]
400 -> 405 [label="Line 4472: [!((data[i]) == '\xa')]" id="400 -> 405"]
405 -> 406 [label="Line 4473: int __CPAchecker_TMP_1 = i; i = i + 1;" id="405 -> 406"]
406 -> 407 [label="Line 4473: [(data[__CPAchecker_TMP_1]) == ':']" id="406 -> 407"]
406 -> 408 [label="Line 4473: [!((data[__CPAchecker_TMP_1]) == ':')]" id="406 -> 408"]
408 -> 410 [label="Line 0: " id="408 -> 410"]
407 -> 412 [label="Line 4473: break" id="407 -> 412"]
402 -> 405 [label="Line 4472: int __CPAchecker_TMP_0 = line; line = line + 1; __CPAchecker_TMP_0; " id="402 -> 405"]
392 -> 992 [label="Line 4448: int *__CPAchecker_TMP_7;" id="392 -> 992"]
992 -> 993 [label="Line 4448: __CPAchecker_TMP_7 = __errno_location();" id="992 -> 993"]
993 -> 994 [label="Line 4448: char *__CPAchecker_TMP_8;" id="993 -> 994"]
994 -> 995 [label="Line 4448: __CPAchecker_TMP_8 = strerror(*__CPAchecker_TMP_7);" id="994 -> 995"]
995 -> 996 [label="Line 4448: fprintf(stderr, 'Failed to open destination file: %s', __CPAchecker_TMP_8);" id="995 -> 996"]
996 -> 997 [label="Line 4450: int __CPAchecker_TMP_9;" id="996 -> 997"]
997 -> 998 [label="Line 4450: usage()" id="997 -> 998"]
998 -> 999 [label="Line 0: Function start dummy edge" id="998 -> 999"]
999 -> 1000 [label="Line 4390: fprintf(stderr, 'ihex2fw: Convert ihex files into binary representation for use by Linux kernel\n');" id="999 -> 1000"]
1000 -> 1001 [label="Line 4392: fprintf(stderr, 'usage: ihex2fw [<options>] <src.HEX> <dst.fw>\n');" id="1000 -> 1001"]
1001 -> 1002 [label="Line 4393: fprintf(stderr, '       -w: wide records (16-bit length)\n');" id="1001 -> 1002"]
1002 -> 1003 [label="Line 4394: fprintf(stderr, '       -s: sort records by address\n');" id="1002 -> 1003"]
1003 -> 1004 [label="Line 4395: fprintf(stderr, '       -j: include records for CS:IP/EIP address\n');" id="1003 -> 1004"]
1004 -> 1005 [label="Line 4396: return 1;" id="1004 -> 1005"]
1005 -> 1006 [label="Line 4450: Return edge from usage to main" id="1005 -> 1006"]
1006 -> 1040 [label="Line 4450: return __CPAchecker_TMP_9;" id="1006 -> 1040"]
386 -> 391 [label="Line 4444: outfd = 1; " id="386 -> 391"]
382 -> 1009 [label="Line 4439: perror('mmap');" id="382 -> 1009"]
1009 -> 1040 [label="Line 4440: return 1;" id="1009 -> 1040"]
373 -> 1012 [label="Line 4429: int *__CPAchecker_TMP_2;" id="373 -> 1012"]
1012 -> 1013 [label="Line 4429: __CPAchecker_TMP_2 = __errno_location();" id="1012 -> 1013"]
1013 -> 1014 [label="Line 4429: char *__CPAchecker_TMP_3;" id="1013 -> 1014"]
1014 -> 1015 [label="Line 4429: __CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);" id="1014 -> 1015"]
1015 -> 1016 [label="Line 4429: fprintf(stderr, 'Failed to open source file: %s', __CPAchecker_TMP_3);" id="1015 -> 1016"]
1016 -> 1017 [label="Line 4431: int __CPAchecker_TMP_4;" id="1016 -> 1017"]
1017 -> 1018 [label="Line 4431: usage()" id="1017 -> 1018"]
1018 -> 1019 [label="Line 0: Function start dummy edge" id="1018 -> 1019"]
1019 -> 1020 [label="Line 4390: fprintf(stderr, 'ihex2fw: Convert ihex files into binary representation for use by Linux kernel\n');" id="1019 -> 1020"]
1020 -> 1021 [label="Line 4392: fprintf(stderr, 'usage: ihex2fw [<options>] <src.HEX> <dst.fw>\n');" id="1020 -> 1021"]
1021 -> 1022 [label="Line 4393: fprintf(stderr, '       -w: wide records (16-bit length)\n');" id="1021 -> 1022"]
1022 -> 1023 [label="Line 4394: fprintf(stderr, '       -s: sort records by address\n');" id="1022 -> 1023"]
1023 -> 1024 [label="Line 4395: fprintf(stderr, '       -j: include records for CS:IP/EIP address\n');" id="1023 -> 1024"]
1024 -> 1025 [label="Line 4396: return 1;" id="1024 -> 1025"]
1025 -> 1026 [label="Line 4431: Return edge from usage to main" id="1025 -> 1026"]
1026 -> 1040 [label="Line 4431: return __CPAchecker_TMP_4;" id="1026 -> 1040"]
367 -> 372 [label="Line 4425: infd = 0; " id="367 -> 372"]
363 -> 1029 [label="Line 4422: int __CPAchecker_TMP_0;" id="363 -> 1029"]
1029 -> 1030 [label="Line 4422: usage()" id="1029 -> 1030"]
1030 -> 1031 [label="Line 0: Function start dummy edge" id="1030 -> 1031"]
1031 -> 1032 [label="Line 4390: fprintf(stderr, 'ihex2fw: Convert ihex files into binary representation for use by Linux kernel\n');" id="1031 -> 1032"]
1032 -> 1033 [label="Line 4392: fprintf(stderr, 'usage: ihex2fw [<options>] <src.HEX> <dst.fw>\n');" id="1032 -> 1033"]
1033 -> 1034 [label="Line 4393: fprintf(stderr, '       -w: wide records (16-bit length)\n');" id="1033 -> 1034"]
1034 -> 1035 [label="Line 4394: fprintf(stderr, '       -s: sort records by address\n');" id="1034 -> 1035"]
1035 -> 1036 [label="Line 4395: fprintf(stderr, '       -j: include records for CS:IP/EIP address\n');" id="1035 -> 1036"]
1036 -> 1037 [label="Line 4396: return 1;" id="1036 -> 1037"]
1037 -> 1038 [label="Line 4422: Return edge from usage to main" id="1037 -> 1038"]
1038 -> 1040 [label="Line 4422: return __CPAchecker_TMP_0;" id="1038 -> 1040"]
361 -> 1041 [label="Line 4407: switch (opt)" id="361 -> 1041"]
1041 -> 1042 [label="Line 4408: [opt == 'w']" id="1041 -> 1042"]
1041 -> 1043 [label="Line 4408: [!(opt == 'w')]" id="1041 -> 1043"]
1043 -> 1044 [label="Line 4411: [opt == 's']" id="1043 -> 1044"]
1043 -> 1045 [label="Line 4411: [!(opt == 's')]" id="1043 -> 1045"]
1045 -> 1046 [label="Line 4414: [opt == 'j']" id="1045 -> 1046"]
1045 -> 1047 [label="Line 4414: [!(opt == 'j')]" id="1045 -> 1047"]
1047 -> 1054 [label="Line 0: " id="1047 -> 1054"]
1054 -> 1056 [label="Line 0: " id="1054 -> 1056"]
1046 -> 1054 [label="Line 4415: include_jump = 1; break" id="1046 -> 1054"]
1044 -> 1054 [label="Line 4412: sort_records = 1; break" id="1044 -> 1054"]
1042 -> 1054 [label="Line 4409: wide_records = 1; break" id="1042 -> 1054"]
}
