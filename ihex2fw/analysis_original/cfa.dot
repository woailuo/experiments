digraph CFA {
38 [shape="circle" label="38\n62"]
45 [shape="doublecircle" label="45\n61"]
48 [shape="diamond" label="48\n60"]
47 [shape="diamond" label="47\n59"]
64 [shape="circle" label="64\n58"]
72 [shape="circle" label="72\n57"]
73 [shape="diamond" label="73\n56"]
71 [shape="circle" label="71\n55"]
75 [shape="circle" label="75\n54"]
69 [shape="diamond" label="69\n52"]
76 [shape="circle" label="76\n51"]
88 [shape="circle" label="88\n50"]
89 [shape="diamond" label="89\n49"]
87 [shape="circle" label="87\n48"]
90 [shape="circle" label="90\n47"]
37 [shape="circle" label="37\n9"]
86 [shape="circle" label="86\n46"]
92 [shape="diamond" label="92\n45"]
93 [shape="circle" label="93\n44"]
100 [shape="circle" label="100\n43"]
101 [shape="diamond" label="101\n42"]
99 [shape="circle" label="99\n41"]
103 [shape="circle" label="103\n40"]
97 [shape="diamond" label="97\n38"]
104 [shape="circle" label="104\n37"]
116 [shape="circle" label="116\n36"]
123 [shape="circle" label="123\n100"]
136 [shape="doublecircle" label="136\n99"]
137 [shape="doublecircle" label="137\n98"]
139 [shape="diamond" label="139\n91"]
150 [shape="circle" label="150\n90"]
19 [shape="circle" label="19\n5"]
21 [shape="circle" label="21\n4"]
1 [shape="circle" label="1\n11"]
2 [shape="diamond" label="2\n10"]
5 [shape="diamond" label="5\n8"]
10 [shape="diamond" label="10\n6"]
13 [shape="circle" label="13\n4"]
0 [shape="circle" label="0\n0"]
24 [shape="circle" label="24\n1"]
18 [shape="circle" label="18\n0"]
197 [shape="circle" label="197\n9"]
193 [shape="doublecircle" label="193\n68"]
196 [shape="circle" label="196\n67"]
201 [shape="circle" label="201\n66"]
202 [shape="diamond" label="202\n65"]
203 [shape="circle" label="203\n64"]
209 [shape="diamond" label="209\n63"]
213 [shape="diamond" label="213\n62"]
223 [shape="diamond" label="223\n61"]
233 [shape="diamond" label="233\n60"]
235 [shape="diamond" label="235\n59"]
253 [shape="diamond" label="253\n58"]
255 [shape="circle" label="255\n57"]
272 [shape="circle" label="272\n56"]
273 [shape="circle" label="273\n55"]
274 [shape="circle" label="274\n54"]
122 [shape="circle" label="122\n0"]
117 [shape="diamond" label="117\n35"]
115 [shape="circle" label="115\n34"]
114 [shape="circle" label="114\n33"]
119 [shape="circle" label="119\n32"]
291 [shape="circle" label="291\n15"]
295 [shape="doublecircle" label="295\n14"]
296 [shape="circle" label="296\n13"]
298 [shape="circle" label="298\n12"]
299 [shape="circle" label="299\n11"]
300 [shape="circle" label="300\n10"]
303 [shape="circle" label="303\n9"]
304 [shape="diamond" label="304\n8"]
301 [shape="circle" label="301\n7"]
302 [shape="circle" label="302\n6"]
290 [shape="circle" label="290\n0"]
120 [shape="circle" label="120\n31"]
297 [shape="circle" label="297\n5"]
309 [shape="circle" label="309\n4"]
310 [shape="diamond" label="310\n3"]
307 [shape="circle" label="307\n2"]
308 [shape="circle" label="308\n1"]
254 [shape="diamond" label="254\n52"]
257 [shape="circle" label="257\n42"]
259 [shape="circle" label="259\n41"]
260 [shape="circle" label="260\n40"]
258 [shape="diamond" label="258\n51"]
256 [shape="circle" label="256\n50"]
263 [shape="circle" label="263\n49"]
264 [shape="circle" label="264\n48"]
265 [shape="diamond" label="265\n47"]
267 [shape="circle" label="267\n46"]
279 [shape="circle" label="279\n6"]
282 [shape="doublecircle" label="282\n5"]
285 [shape="diamond" label="285\n4"]
286 [shape="diamond" label="286\n3"]
284 [shape="circle" label="284\n1"]
278 [shape="circle" label="278\n0"]
218 [shape="circle" label="218\n17"]
219 [shape="circle" label="219\n16"]
268 [shape="circle" label="268\n45"]
266 [shape="circle" label="266\n44"]
269 [shape="circle" label="269\n43"]
283 [shape="circle" label="283\n2"]
252 [shape="circle" label="252\n53"]
234 [shape="diamond" label="234\n38"]
237 [shape="circle" label="237\n29"]
239 [shape="circle" label="239\n28"]
240 [shape="circle" label="240\n27"]
238 [shape="diamond" label="238\n37"]
236 [shape="circle" label="236\n36"]
244 [shape="diamond" label="244\n35"]
246 [shape="circle" label="246\n34"]
247 [shape="circle" label="247\n32"]
248 [shape="circle" label="248\n31"]
249 [shape="circle" label="249\n30"]
245 [shape="circle" label="245\n33"]
232 [shape="circle" label="232\n39"]
222 [shape="diamond" label="222\n26"]
225 [shape="circle" label="225\n24"]
227 [shape="circle" label="227\n23"]
228 [shape="circle" label="228\n22"]
226 [shape="diamond" label="226\n25"]
224 [shape="circle" label="224\n21"]
210 [shape="circle" label="210\n14"]
212 [shape="diamond" label="212\n20"]
214 [shape="circle" label="214\n19"]
217 [shape="circle" label="217\n18"]
215 [shape="circle" label="215\n15"]
204 [shape="circle" label="204\n13"]
205 [shape="circle" label="205\n12"]
206 [shape="circle" label="206\n11"]
195 [shape="circle" label="195\n10"]
190 [shape="circle" label="190\n69"]
187 [shape="circle" label="187\n71"]
189 [shape="circle" label="189\n70"]
183 [shape="circle" label="183\n73"]
186 [shape="circle" label="186\n72"]
160 [shape="circle" label="160\n85"]
156 [shape="circle" label="156\n84"]
163 [shape="circle" label="163\n83"]
164 [shape="diamond" label="164\n82"]
166 [shape="circle" label="166\n81"]
167 [shape="diamond" label="167\n79"]
168 [shape="circle" label="168\n78"]
174 [shape="circle" label="174\n77"]
175 [shape="diamond" label="175\n76"]
176 [shape="circle" label="176\n75"]
182 [shape="circle" label="182\n74"]
177 [shape="circle" label="177\n8"]
178 [shape="circle" label="178\n7"]
179 [shape="circle" label="179\n6"]
169 [shape="circle" label="169\n5"]
170 [shape="circle" label="170\n4"]
171 [shape="circle" label="171\n3"]
165 [shape="circle" label="165\n80"]
154 [shape="circle" label="154\n89"]
155 [shape="diamond" label="155\n88"]
157 [shape="circle" label="157\n87"]
159 [shape="circle" label="159\n86"]
22 [shape="circle" label="22\n3"]
23 [shape="circle" label="23\n2"]
15 [shape="diamond" label="15\n5"]
14 [shape="circle" label="14\n3"]
11 [shape="diamond" label="11\n7"]
9 [shape="circle" label="9\n2"]
6 [shape="diamond" label="6\n9"]
4 [shape="circle" label="4\n1"]
151 [shape="circle" label="151\n2"]
152 [shape="circle" label="152\n1"]
138 [shape="diamond" label="138\n97"]
140 [shape="circle" label="140\n95"]
148 [shape="diamond" label="148\n94"]
145 [shape="circle" label="145\n93"]
146 [shape="circle" label="146\n92"]
141 [shape="circle" label="141\n96"]
105 [shape="circle" label="105\n30"]
106 [shape="circle" label="106\n29"]
107 [shape="circle" label="107\n28"]
108 [shape="circle" label="108\n27"]
109 [shape="circle" label="109\n26"]
110 [shape="circle" label="110\n25"]
111 [shape="circle" label="111\n24"]
29 [shape="circle" label="29\n7"]
30 [shape="circle" label="30\n6"]
31 [shape="circle" label="31\n5"]
32 [shape="circle" label="32\n4"]
33 [shape="circle" label="33\n3"]
34 [shape="circle" label="34\n2"]
35 [shape="circle" label="35\n1"]
28 [shape="circle" label="28\n0"]
67 [shape="circle" label="67\n10"]
84 [shape="circle" label="84\n13"]
112 [shape="circle" label="112\n23"]
98 [shape="circle" label="98\n39"]
94 [shape="circle" label="94\n22"]
95 [shape="circle" label="95\n21"]
77 [shape="circle" label="77\n20"]
78 [shape="circle" label="78\n19"]
79 [shape="circle" label="79\n18"]
80 [shape="circle" label="80\n17"]
81 [shape="circle" label="81\n16"]
82 [shape="circle" label="82\n15"]
83 [shape="circle" label="83\n14"]
70 [shape="circle" label="70\n53"]
65 [shape="circle" label="65\n12"]
66 [shape="circle" label="66\n11"]
46 [shape="circle" label="46\n8"]
49 [shape="diamond" label="49\n7"]
53 [shape="diamond" label="53\n6"]
57 [shape="diamond" label="57\n5"]
61 [shape="circle" label="61\n4"]
50 [shape="circle" label="50\n0"]
60 [shape="circle" label="60\n3"]
56 [shape="circle" label="56\n2"]
52 [shape="circle" label="52\n1"]
node [shape="circle"]
subgraph cluster_file_record {
label="file_record()"
279 -> 282 [label="Function start dummy edge struct ihex_binrec **p = &records; while"]
282 -> 284 [label="[(*p) == 0]"]
282 -> 285 [label="[!((*p) == 0)]"]
285 -> 283 [label="[sort_records == 0]"]
285 -> 286 [label="[!(sort_records == 0)]"]
286 -> 283 [label="[((*p)->addr) < (record->addr)]"]
286 -> 284 [label="[!(((*p)->addr) < (record->addr))]"]
284 -> 278 [label="record->next = *p; *p = record; default return"]
283 -> 282 [label="p = &((*p)->next); "]}
subgraph cluster_hex {
label="hex()"
19 -> 21 [label="Function start dummy edge uint8_t __CPAchecker_TMP_0;"]
21 -> 22 [label="__CPAchecker_TMP_0 = nybble(data[0]);" style="dotted" arrowhead="empty"]
24 -> 18 [label="uint8_t val = (__CPAchecker_TMP_0 << 4) | __CPAchecker_TMP_1; *crc = (*crc) + val; return val;"]
22 -> 23 [label="uint8_t __CPAchecker_TMP_1;"]
23 -> 24 [label="__CPAchecker_TMP_1 = nybble(data[1]);" style="dotted" arrowhead="empty"]}
subgraph cluster_main {
label="main()"
38 -> 45 [label="INIT GLOBAL VARS typedef signed char int8_t; typedef short int int16_t; typedef int int32_t; typedef long int int64_t; typedef unsigned char uint8_t; typedef unsigned short int uint16_t; typedef unsigned int uint32_t; typedef unsigned long int uint64_t; typedef signed char int_least8_t; typedef short int int_least16_t; typedef int int_least32_t; typedef long int int_least64_t; typedef unsigned char uint_least8_t; typedef unsigned short int uint_least16_t; typedef unsigned int uint_least32_t; typedef unsigned long int uint_least64_t; typedef signed char int_fast8_t; typedef long int int_fast16_t; typedef long int int_fast32_t; typedef long int int_fast64_t; typedef unsigned char uint_fast8_t; typedef unsigned long int uint_fast16_t; typedef unsigned long int uint_fast32_t; typedef unsigned long int uint_fast64_t; typedef long int intptr_t; typedef unsigned long int uintptr_t; typedef long int intmax_t; typedef unsigned long int uintmax_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int size_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_1 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_1 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_2 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_2 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_3 {   char __size[56];   long int __align; } ; typedef union __anon_type_3 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_4 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_4 pthread_mutex_t; union __anon_type_5 {   char __size[4];   int __align; } ; typedef union __anon_type_5 pthread_mutexattr_t; struct __anon_type_6 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_7 {   struct __anon_type_6 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_7 pthread_cond_t; union __anon_type_8 {   char __size[4];   int __align; } ; typedef union __anon_type_8 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_9 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_10 {   struct __anon_type_9 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_rwlock_t; union __anon_type_11 {   char __size[8];   long int __align; } ; typedef union __anon_type_11 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_12 {   char __size[32];   long int __align; } ; typedef union __anon_type_12 pthread_barrier_t; union __anon_type_13 {   char __size[4];   int __align; } ; typedef union __anon_type_13 pthread_barrierattr_t; struct iovec {   void *iov_base;   size_t iov_len; } ; ssize_t  readv(int __fd, const struct iovec *__iovec, int __count); ssize_t  writev(int __fd, const struct iovec *__iovec, int __count); ssize_t  preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); ssize_t  pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset); typedef __socklen_t socklen_t; enum __socket_type {   SOCK_STREAM = 1,   SOCK_DGRAM = 2,   SOCK_RAW = 3,   SOCK_RDM = 4,   SOCK_SEQPACKET = 5,   SOCK_DCCP = 6,   SOCK_PACKET = 10,   SOCK_CLOEXEC = 524288,   SOCK_NONBLOCK = 2048 } ; typedef unsigned short int sa_family_t; struct sockaddr {   sa_family_t sa_family;   char sa_data[14]; } ; struct sockaddr_storage {   sa_family_t ss_family;   unsigned long int __ss_align;   char __ss_padding[120UL]; } ; enum  {   MSG_OOB = 1,   MSG_PEEK = 2,   MSG_DONTROUTE = 4,   MSG_CTRUNC = 8,   MSG_PROXY = 16,   MSG_TRUNC = 32,   MSG_DONTWAIT = 64,   MSG_EOR = 128,   MSG_WAITALL = 256,   MSG_FIN = 512,   MSG_SYN = 1024,   MSG_CONFIRM = 2048,   MSG_RST = 4096,   MSG_ERRQUEUE = 8192,   MSG_NOSIGNAL = 16384,   MSG_MORE = 32768,   MSG_CMSG_CLOEXEC = 1073741824 } ; struct msghdr {   void *msg_name;   socklen_t msg_namelen;   struct iovec *msg_iov;   size_t msg_iovlen;   void *msg_control;   size_t msg_controllen;   int msg_flags; } ; struct cmsghdr {   size_t cmsg_len;   int cmsg_level;   int cmsg_type;   unsigned char __cmsg_data[]; } ; struct cmsghdr * __cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg); enum  {   SCM_RIGHTS = 1 } ; struct linger {   int l_onoff;   int l_linger; } ; struct osockaddr {   unsigned short int sa_family;   unsigned char sa_data[14]; } ; enum  {   SHUT_RD = 0,   SHUT_WR = 1,   SHUT_RDWR = 2 } ; int socket(int __domain, int __type, int __protocol); int socketpair(int __domain, int __type, int __protocol, int __fds[2]); int bind(int __fd, const struct sockaddr *__addr, socklen_t __len); int getsockname(int __fd, struct sockaddr *__addr, socklen_t *__len); int connect(int __fd, const struct sockaddr *__addr, socklen_t __len); int getpeername(int __fd, struct sockaddr *__addr, socklen_t *__len); ssize_t  send(int __fd, const void *__buf, size_t __n, int __flags); ssize_t  recv(int __fd, void *__buf, size_t __n, int __flags); ssize_t  sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len); ssize_t  recvfrom(int __fd, void *__buf, size_t __n, int __flags, struct sockaddr *__addr, socklen_t *__addr_len); ssize_t  sendmsg(int __fd, const struct msghdr *__message, int __flags); ssize_t  recvmsg(int __fd, struct msghdr *__message, int __flags); int getsockopt(int __fd, int __level, int __optname, void *__optval, socklen_t *__optlen); int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen); int listen(int __fd, int __n); int accept(int __fd, struct sockaddr *__addr, socklen_t *__addr_len); int shutdown(int __fd, int __how); int sockatmark(int __fd); int isfdtype(int __fd, int __fdtype); enum  {   IPPROTO_IP = 0,   IPPROTO_HOPOPTS = 0,   IPPROTO_ICMP = 1,   IPPROTO_IGMP = 2,   IPPROTO_IPIP = 4,   IPPROTO_TCP = 6,   IPPROTO_EGP = 8,   IPPROTO_PUP = 12,   IPPROTO_UDP = 17,   IPPROTO_IDP = 22,   IPPROTO_TP = 29,   IPPROTO_DCCP = 33,   IPPROTO_IPV6 = 41,   IPPROTO_ROUTING = 43,   IPPROTO_FRAGMENT = 44,   IPPROTO_RSVP = 46,   IPPROTO_GRE = 47,   IPPROTO_ESP = 50,   IPPROTO_AH = 51,   IPPROTO_ICMPV6 = 58,   IPPROTO_NONE = 59,   IPPROTO_DSTOPTS = 60,   IPPROTO_MTP = 92,   IPPROTO_ENCAP = 98,   IPPROTO_PIM = 103,   IPPROTO_COMP = 108,   IPPROTO_SCTP = 132,   IPPROTO_UDPLITE = 136,   IPPROTO_RAW = 255,   IPPROTO_MAX = 256 } ; typedef uint16_t in_port_t; enum  {   IPPORT_ECHO = 7,   IPPORT_DISCARD = 9,   IPPORT_SYSTAT = 11,   IPPORT_DAYTIME = 13,   IPPORT_NETSTAT = 15,   IPPORT_FTP = 21,   IPPORT_TELNET = 23,   IPPORT_SMTP = 25,   IPPORT_TIMESERVER = 37,   IPPORT_NAMESERVER = 42,   IPPORT_WHOIS = 43,   IPPORT_MTP = 57,   IPPORT_TFTP = 69,   IPPORT_RJE = 77,   IPPORT_FINGER = 79,   IPPORT_TTYLINK = 87,   IPPORT_SUPDUP = 95,   IPPORT_EXECSERVER = 512,   IPPORT_LOGINSERVER = 513,   IPPORT_CMDSERVER = 514,   IPPORT_EFSSERVER = 520,   IPPORT_BIFFUDP = 512,   IPPORT_WHOSERVER = 513,   IPPORT_ROUTESERVER = 520,   IPPORT_RESERVED = 1024,   IPPORT_USERRESERVED = 5000 } ; typedef uint32_t in_addr_t; struct in_addr {   in_addr_t s_addr; } ; union __anon_type_14 {   uint8_t __u6_addr8[16];   uint16_t __u6_addr16[8];   uint32_t __u6_addr32[4]; } ; struct in6_addr {   union __anon_type_14 __in6_u; } ; extern const struct in6_addr in6addr_any; extern const struct in6_addr in6addr_loopback; struct sockaddr_in {   sa_family_t sin_family;   in_port_t sin_port;   struct in_addr sin_addr;   unsigned char sin_zero[8UL]; } ; struct sockaddr_in6 {   sa_family_t sin6_family;   in_port_t sin6_port;   uint32_t sin6_flowinfo;   struct in6_addr sin6_addr;   uint32_t sin6_scope_id; } ; struct ip_mreq {   struct in_addr imr_multiaddr;   struct in_addr imr_interface; } ; struct ip_mreq_source {   struct in_addr imr_multiaddr;   struct in_addr imr_interface;   struct in_addr imr_sourceaddr; } ; struct ipv6_mreq {   struct in6_addr ipv6mr_multiaddr;   unsigned int ipv6mr_interface; } ; struct group_req {   uint32_t gr_interface;   struct sockaddr_storage gr_group; } ; struct group_source_req {   uint32_t gsr_interface;   struct sockaddr_storage gsr_group;   struct sockaddr_storage gsr_source; } ; struct ip_msfilter {   struct in_addr imsf_multiaddr;   struct in_addr imsf_interface;   uint32_t imsf_fmode;   uint32_t imsf_numsrc;   struct in_addr imsf_slist[1]; } ; struct group_filter {   uint32_t gf_interface;   struct sockaddr_storage gf_group;   uint32_t gf_fmode;   uint32_t gf_numsrc;   struct sockaddr_storage gf_slist[1]; } ; struct ip_opts {   struct in_addr ip_dst;   char ip_opts[40]; } ; struct ip_mreqn {   struct in_addr imr_multiaddr;   struct in_addr imr_address;   int imr_ifindex; } ; struct in_pktinfo {   int ipi_ifindex;   struct in_addr ipi_spec_dst;   struct in_addr ipi_addr; } ; uint32_t  ntohl(uint32_t __netlong); uint16_t  ntohs(uint16_t __netshort); uint32_t  htonl(uint32_t __hostlong); uint16_t  htons(uint16_t __hostshort); int bindresvport(int __sockfd, struct sockaddr_in *__sock_in); int bindresvport6(int __sockfd, struct sockaddr_in6 *__sock_in); in_addr_t  inet_addr(const char *__cp); in_addr_t  inet_lnaof(struct in_addr __in); struct in_addr  inet_makeaddr(in_addr_t __net, in_addr_t __host); in_addr_t  inet_netof(struct in_addr __in); in_addr_t  inet_network(const char *__cp); char * inet_ntoa(struct in_addr __in); int inet_pton(int __af, const char *__cp, void *__buf); const char * inet_ntop(int __af, const void *__cp, char *__buf, socklen_t __len); int inet_aton(const char *__cp, struct in_addr *__inp); char * inet_neta(in_addr_t __net, char *__buf, size_t __len); char * inet_net_ntop(int __af, const void *__cp, int __bits, char *__buf, size_t __len); int inet_net_pton(int __af, const char *__cp, void *__buf, size_t __len); unsigned int inet_nsap_addr(const char *__cp, unsigned char *__buf, int __len); char * inet_nsap_ntoa(int __len, const unsigned char *__cp, char *__buf); struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_15 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_16 {   int __count;   union __anon_type_15 __value; } ; typedef struct __anon_type_16 __mbstate_t; struct __anon_type_17 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_17 _G_fpos_t; struct __anon_type_18 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_18 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); int * __errno_location(); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * mmap(void *__addr, size_t __len, int __prot, int __flags, int __fd, __off_t __offset); int munmap(void *__addr, size_t __len); int mprotect(void *__addr, size_t __len, int __prot); int msync(void *__addr, size_t __len, int __flags); int madvise(void *__addr, size_t __len, int __advice); int posix_madvise(void *__addr, size_t __len, int __advice); int mlock(const void *__addr, size_t __len); int munlock(const void *__addr, size_t __len); int mlockall(int __flags); int munlockall(); int mincore(void *__start, size_t __len, unsigned char *__vec); int shm_open(const char *__name, int __oflag, mode_t __mode); int shm_unlink(const char *__name); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int lockf(int __fd, int __cmd, __off_t __len); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum  {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum  {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum  {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int fdatasync(int __fildes); typedef int wchar_t; struct __anon_type_19 {   int quot;   int rem; } ; typedef struct __anon_type_19 div_t; struct __anon_type_20 {   long int quot;   long int rem; } ; typedef struct __anon_type_20 ldiv_t; struct __anon_type_21 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_21 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct option {   const char *name;   int has_arg;   int *flag;   int val; } ; int getopt_long(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); int getopt_long_only(int ___argc, const char **___argv, const char *__shortopts, const struct option *__longopts, int *__longind); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 1; struct ihex_binrec {   struct ihex_binrec *next;   uint32_t addr;   uint16_t len;   uint8_t data[]; } ; uint8_t  nybble(const uint8_t n); uint8_t  hex(const uint8_t *data, uint8_t *crc); int process_ihex(uint8_t *data, ssize_t size); void file_record(struct ihex_binrec *record); int output_records(int outfd); int sort_records = 0; int wide_records = 0; int include_jump = 0; int usage(); int main(int argc, char **argv); struct ihex_binrec *records = 0; Function start dummy edge int infd; int outfd; struct stat st; uint8_t *data; int opt; while"]
45 -> 48 [label="opt = getopt(argc, argv, \"wsj\");"]
48 -> 46 [label="[opt != -1]"]
48 -> 47 [label="[!(opt != -1)]"]
47 -> 65 [label="[(optind + 2) != argc]"]
47 -> 64 [label="[!((optind + 2) != argc)]"]
64 -> 72 [label="int __CPAchecker_TMP_1;"]
72 -> 73 [label="__CPAchecker_TMP_1 = strcmp(argv[optind], \"-\");"]
73 -> 70 [label="[__CPAchecker_TMP_1 == 0]"]
73 -> 71 [label="[!(__CPAchecker_TMP_1 == 0)]"]
71 -> 75 [label="infd = open(argv[optind], 0);"]
75 -> 69 [label=""]
69 -> 77 [label="[infd == -1]"]
69 -> 76 [label="[!(infd == -1)]"]
76 -> 88 [label="int __CPAchecker_TMP_5;"]
88 -> 89 [label="__CPAchecker_TMP_5 = fstat(infd, &st);"]
89 -> 86 [label="[__CPAchecker_TMP_5 == 0]"]
89 -> 87 [label="[!(__CPAchecker_TMP_5 == 0)]"]
87 -> 90 [label="perror(\"stat\");"]
90 -> 37 [label="return 1;"]
86 -> 92 [label="data = mmap((void *)0, st.st_size, 1, 1, infd, 0);"]
92 -> 94 [label="[data == ((void *)-1)]"]
92 -> 93 [label="[!(data == ((void *)-1))]"]
93 -> 100 [label="int __CPAchecker_TMP_6;"]
100 -> 101 [label="__CPAchecker_TMP_6 = strcmp(argv[optind + 1], \"-\");"]
101 -> 98 [label="[__CPAchecker_TMP_6 == 0]"]
101 -> 99 [label="[!(__CPAchecker_TMP_6 == 0)]"]
99 -> 103 [label="outfd = open(argv[optind + 1], 577, 420);"]
103 -> 97 [label=""]
97 -> 105 [label="[outfd == -1]"]
97 -> 104 [label="[!(outfd == -1)]"]
104 -> 116 [label="int __CPAchecker_TMP_10;"]
116 -> 117 [label="__CPAchecker_TMP_10 = process_ihex(data, st.st_size);" style="dotted" arrowhead="empty"]
117 -> 114 [label="[__CPAchecker_TMP_10 == 0]"]
117 -> 115 [label="[!(__CPAchecker_TMP_10 == 0)]"]
115 -> 37 [label="return 1;"]
114 -> 119 [label="int __CPAchecker_TMP_11;"]
119 -> 120 [label="__CPAchecker_TMP_11 = output_records(outfd);" style="dotted" arrowhead="empty"]
120 -> 37 [label="return __CPAchecker_TMP_11;"]
105 -> 106 [label="int *__CPAchecker_TMP_7;"]
106 -> 107 [label="__CPAchecker_TMP_7 = __errno_location();"]
107 -> 108 [label="char *__CPAchecker_TMP_8;"]
108 -> 109 [label="__CPAchecker_TMP_8 = strerror(*__CPAchecker_TMP_7);"]
109 -> 110 [label="fprintf(stderr, \"Failed to open destination file: %s\", __CPAchecker_TMP_8);"]
110 -> 111 [label="int __CPAchecker_TMP_9;"]
111 -> 112 [label="__CPAchecker_TMP_9 = usage();" style="dotted" arrowhead="empty"]
67 -> 37 [label="return __CPAchecker_TMP_0;"]
84 -> 37 [label="return __CPAchecker_TMP_4;"]
112 -> 37 [label="return __CPAchecker_TMP_9;"]
98 -> 97 [label="outfd = 1; "]
94 -> 95 [label="perror(\"mmap\");"]
95 -> 37 [label="return 1;"]
77 -> 78 [label="int *__CPAchecker_TMP_2;"]
78 -> 79 [label="__CPAchecker_TMP_2 = __errno_location();"]
79 -> 80 [label="char *__CPAchecker_TMP_3;"]
80 -> 81 [label="__CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);"]
81 -> 82 [label="fprintf(stderr, \"Failed to open source file: %s\", __CPAchecker_TMP_3);"]
82 -> 83 [label="int __CPAchecker_TMP_4;"]
83 -> 84 [label="__CPAchecker_TMP_4 = usage();" style="dotted" arrowhead="empty"]
70 -> 69 [label="infd = 0; "]
65 -> 66 [label="int __CPAchecker_TMP_0;"]
66 -> 67 [label="__CPAchecker_TMP_0 = usage();" style="dotted" arrowhead="empty"]
46 -> 49 [label="switch (opt)"]
49 -> 52 [label="[opt == 'w']"]
49 -> 53 [label="[!(opt == 'w')]"]
53 -> 56 [label="[opt == 's']"]
53 -> 57 [label="[!(opt == 's')]"]
57 -> 60 [label="[opt == 'j']"]
57 -> 61 [label="[!(opt == 'j')]"]
61 -> 50 [label=""]
50 -> 45 [label=""]
60 -> 50 [label="include_jump = 1; break"]
56 -> 50 [label="sort_records = 1; break"]
52 -> 50 [label="wide_records = 1; break"]}
subgraph cluster_nybble {
label="nybble()"
1 -> 2 [label="Function start dummy edge"]
2 -> 6 [label="[n >= '0']"]
2 -> 5 [label="[!(n >= '0')]"]
5 -> 11 [label="[n >= 'A']"]
5 -> 10 [label="[!(n >= 'A')]"]
10 -> 15 [label="[n >= 'a']"]
10 -> 13 [label="[!(n >= 'a')]"]
13 -> 0 [label=" return 0;"]
15 -> 14 [label="[n <= 'f']"]
15 -> 13 [label="[!(n <= 'f')]"]
14 -> 0 [label="return n - ('a' - 10);"]
11 -> 9 [label="[n <= 'F']"]
11 -> 10 [label="[!(n <= 'F')]"]
9 -> 0 [label="return n - ('A' - 10);"]
6 -> 4 [label="[n <= '9']"]
6 -> 5 [label="[!(n <= '9')]"]
4 -> 0 [label="return n - '0';"]}
subgraph cluster_output_records {
label="output_records()"
291 -> 295 [label="Function start dummy edge unsigned char zeroes[6] = { 0, 0, 0, 0, 0, 0 }; struct ihex_binrec *p = records; while"]
295 -> 297 [label="[p == 0]"]
295 -> 296 [label="[!(p == 0)]"]
296 -> 298 [label="uint16_t writelen = ((p->len) + 9) & (~3);"]
298 -> 299 [label="p->addr = htonl(p->addr);"]
299 -> 300 [label="p->len = htons(p->len);"]
300 -> 303 [label="ssize_t __CPAchecker_TMP_0;"]
303 -> 304 [label="__CPAchecker_TMP_0 = write(outfd, &(p->addr), writelen);"]
304 -> 302 [label="[__CPAchecker_TMP_0 != writelen]"]
304 -> 301 [label="[!(__CPAchecker_TMP_0 != writelen)]"]
301 -> 295 [label="p = p->next; "]
302 -> 290 [label="return 1;"]
297 -> 309 [label="ssize_t __CPAchecker_TMP_1;"]
309 -> 310 [label="__CPAchecker_TMP_1 = write(outfd, zeroes, 6);"]
310 -> 308 [label="[__CPAchecker_TMP_1 != 6]"]
310 -> 307 [label="[!(__CPAchecker_TMP_1 != 6)]"]
307 -> 290 [label="return 0;"]
308 -> 290 [label="return 1;"]}
subgraph cluster_process_ihex {
label="process_ihex()"
123 -> 136 [label="Function start dummy edge struct ihex_binrec *record; uint32_t offset = 0; uint32_t data32; uint8_t type; uint8_t crc = 0; uint8_t crcbyte = 0; int i; int j; int line = 1; int len; i = 0; Label: next_record"]
136 -> 137 [label="while"]
137 -> 138 [label="[i < size]"]
137 -> 139 [label="[!(i < size)]"]
139 -> 151 [label="[(i + 10) > size]"]
139 -> 150 [label="[!((i + 10) > size)]"]
150 -> 154 [label="len = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
197 -> 193 [label=" int __CPAchecker_TMP_6 = j; j = j + 1; __CPAchecker_TMP_6; i = i + 2;"]
193 -> 195 [label="[j < (record->len)]"]
193 -> 196 [label="[!(j < (record->len))]"]
196 -> 201 [label="crcbyte = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
201 -> 202 [label="i = i + 2;"]
202 -> 204 [label="[crc != 0]"]
202 -> 203 [label="[!(crc != 0)]"]
203 -> 209 [label="switch (type)"]
209 -> 212 [label="[type == 0]"]
209 -> 213 [label="[!(type == 0)]"]
213 -> 222 [label="[type == 1]"]
213 -> 223 [label="[!(type == 1)]"]
223 -> 232 [label="[type == 2]"]
223 -> 233 [label="[!(type == 2)]"]
233 -> 234 [label="[type == 4]"]
233 -> 235 [label="[!(type == 4)]"]
235 -> 252 [label="[type == 3]"]
235 -> 253 [label="[!(type == 3)]"]
253 -> 254 [label="[type == 5]"]
253 -> 255 [label="[!(type == 5)]"]
255 -> 272 [label="default"]
272 -> 273 [label="fprintf(stderr, \"Unknown record (type %02X)\n\", type);"]
273 -> 274 [label="free(record);"]
274 -> 122 [label="Num = Num + 1; return -22;"]
254 -> 258 [label="[(record->addr) == 0]"]
254 -> 257 [label="[!((record->addr) == 0)]"]
257 -> 259 [label="fprintf(stderr, \"Bad Start Address record (type %02X) at line %d\n\", type, line);"]
259 -> 260 [label="free(record);"]
260 -> 122 [label="Num = Num + 1; return -22;"]
258 -> 257 [label="[(record->len) != 4]"]
258 -> 256 [label="[!((record->len) != 4)]"]
256 -> 263 [label="memcpy(&data32, &((record->data)[0]), 4);"]
263 -> 264 [label="data32 = htonl(data32);"]
264 -> 265 [label="memcpy(&((record->data)[0]), &data32, 4);"]
265 -> 266 [label="[include_jump == 0]"]
265 -> 267 [label="[!(include_jump == 0)]"]
267 -> 268 [label="file_record(record);" style="dotted" arrowhead="empty"]
218 -> 219 [label="free(record);"]
219 -> 136 [label="Num = Num + 1; Goto: next_record"]
268 -> 266 [label=""]
266 -> 269 [label="free(record);"]
269 -> 136 [label="Num = Num + 1; Goto: next_record"]
252 -> 254 [label="fall through"]
234 -> 238 [label="[(record->addr) == 0]"]
234 -> 237 [label="[!((record->addr) == 0)]"]
237 -> 239 [label="fprintf(stderr, \"Bad HEX86/HEX386 record (type %02X) at line %d\n\", type, line);"]
239 -> 240 [label="free(record);"]
240 -> 122 [label="Num = Num + 1; return -22;"]
238 -> 237 [label="[(record->len) != 2]"]
238 -> 236 [label="[!((record->len) != 2)]"]
236 -> 244 [label="offset = (((record->data)[0]) << 8) | ((record->data)[1]); int __CPAchecker_TMP_7;"]
244 -> 245 [label="[type == 2]"]
244 -> 246 [label="[!(type == 2)]"]
246 -> 247 [label="__CPAchecker_TMP_7 = 16;"]
247 -> 248 [label="offset = offset << __CPAchecker_TMP_7;"]
248 -> 249 [label="free(record);"]
249 -> 136 [label="Num = Num + 1; Goto: next_record"]
245 -> 247 [label="__CPAchecker_TMP_7 = 4;"]
232 -> 234 [label="fall through"]
222 -> 226 [label="[(record->addr) == 0]"]
222 -> 225 [label="[!((record->addr) == 0)]"]
225 -> 227 [label="fprintf(stderr, \"Bad EOF record (type 01) format at line %d\", line);"]
227 -> 228 [label="free(record);"]
228 -> 122 [label="Num = Num + 1; return -22;"]
226 -> 224 [label="[(record->len) == 0]"]
226 -> 225 [label="[!((record->len) == 0)]"]
224 -> 210 [label="break"]
210 -> 122 [label="return 0;"]
212 -> 215 [label="[(record->len) == 0]"]
212 -> 214 [label="[!((record->len) == 0)]"]
214 -> 217 [label="record->addr = (record->addr) + offset;"]
217 -> 218 [label="file_record(record);" style="dotted" arrowhead="empty"]
215 -> 210 [label="break"]
204 -> 205 [label="fprintf(stderr, \"CRC failure at line %d: got 0x%X, expected 0x%X\n\", line, crcbyte, (unsigned char)(crcbyte - crc));"]
205 -> 206 [label="free(record);"]
206 -> 122 [label="Num = Num + 1; return -22;"]
195 -> 197 [label="(record->data)[j] = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
190 -> 193 [label="i = i + 2; for j = 0;"]
187 -> 189 [label="record->addr = (record->addr) | __CPAchecker_TMP_5; i = i + 2;"]
189 -> 190 [label="type = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
183 -> 186 [label="record->addr = __CPAchecker_TMP_4 << 8; i = i + 2; uint8_t __CPAchecker_TMP_5;"]
186 -> 187 [label="__CPAchecker_TMP_5 = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
160 -> 156 [label="len = len + __CPAchecker_TMP_2; i = i + 2; "]
156 -> 163 [label="record = malloc(((14 + len) + 3) & (~3));"]
163 -> 164 [label="Num = Num - 1;"]
164 -> 165 [label="[Num >= 0]"]
164 -> 166 [label="[!(Num >= 0)]"]
166 -> 167 [label="__assert_fail(\"Num >= 0\", \"tf/ihex2fw.c\", 164, \"__PRETTY_FUNCTION__\");"]
167 -> 169 [label="[record == 0]"]
167 -> 168 [label="[!(record == 0)]"]
168 -> 174 [label="memset(record, 0, ((14 + len) + 3) & (~3));"]
174 -> 175 [label="record->len = len;"]
175 -> 177 [label="[((i + 8) + ((record->len) * 2)) > size]"]
175 -> 176 [label="[!(((i + 8) + ((record->len) * 2)) > size)]"]
176 -> 182 [label="uint8_t __CPAchecker_TMP_4;"]
182 -> 183 [label="__CPAchecker_TMP_4 = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
177 -> 178 [label="fprintf(stderr, \"Not enough data to read complete record at line %d\n\", line);"]
178 -> 179 [label="free(record);"]
179 -> 122 [label="Num = Num + 1; return -22;"]
169 -> 170 [label="fprintf(stderr, \"out of memory for records\n\");"]
170 -> 171 [label="free(record);"]
171 -> 122 [label="Num = Num + 1; return -12;"]
165 -> 167 [label="0;"]
154 -> 155 [label="i = i + 2;"]
155 -> 156 [label="[wide_records == 0]"]
155 -> 157 [label="[!(wide_records == 0)]"]
157 -> 159 [label="len = len << 8; uint8_t __CPAchecker_TMP_2;"]
159 -> 160 [label="__CPAchecker_TMP_2 = hex(data + i, &crc);" style="dotted" arrowhead="empty"]
151 -> 152 [label="fprintf(stderr, \"Can't find valid record at line %d\n\", line);"]
152 -> 122 [label="return -22;"]
138 -> 141 [label="[(data[i]) == '\xa']"]
138 -> 140 [label="[!((data[i]) == '\xa')]"]
140 -> 148 [label="int __CPAchecker_TMP_1 = i; i = i + 1;"]
148 -> 146 [label="[(data[__CPAchecker_TMP_1]) == ':']"]
148 -> 145 [label="[!((data[__CPAchecker_TMP_1]) == ':')]"]
145 -> 137 [label=""]
146 -> 139 [label="break"]
141 -> 140 [label="int __CPAchecker_TMP_0 = line; line = line + 1; __CPAchecker_TMP_0; "]}
subgraph cluster_usage {
label="usage()"
29 -> 30 [label="Function start dummy edge"]
30 -> 31 [label="fprintf(stderr, \"ihex2fw: Convert ihex files into binary representation for use by Linux kernel\n\");"]
31 -> 32 [label="fprintf(stderr, \"usage: ihex2fw [<options>] <src.HEX> <dst.fw>\n\");"]
32 -> 33 [label="fprintf(stderr, \"       -w: wide records (16-bit length)\n\");"]
33 -> 34 [label="fprintf(stderr, \"       -s: sort records by address\n\");"]
34 -> 35 [label="fprintf(stderr, \"       -j: include records for CS:IP/EIP address\n\");"]
35 -> 28 [label="return 1;"]}
116 -> 123 [label="process_ihex(data, st.st_size)"]
150 -> 19 [label="hex(data + i, &crc)"]
21 -> 1 [label="nybble(data[0])"]
0 -> 22 [label="Return edge from nybble to hex"]
0 -> 24 [label="Return edge from nybble to hex"]
18 -> 154 [label="Return edge from hex to process_ihex"]
18 -> 160 [label="Return edge from hex to process_ihex"]
18 -> 183 [label="Return edge from hex to process_ihex"]
18 -> 187 [label="Return edge from hex to process_ihex"]
18 -> 190 [label="Return edge from hex to process_ihex"]
18 -> 201 [label="Return edge from hex to process_ihex"]
18 -> 197 [label="Return edge from hex to process_ihex"]
196 -> 19 [label="hex(data + i, &crc)"]
122 -> 117 [label="Return edge from process_ihex to main"]
119 -> 291 [label="output_records(outfd)"]
290 -> 120 [label="Return edge from output_records to main"]
267 -> 279 [label="file_record(record)"]
278 -> 268 [label="Return edge from file_record to process_ihex"]
278 -> 218 [label="Return edge from file_record to process_ihex"]
217 -> 279 [label="file_record(record)"]
195 -> 19 [label="hex(data + i, &crc)"]
189 -> 19 [label="hex(data + i, &crc)"]
186 -> 19 [label="hex(data + i, &crc)"]
182 -> 19 [label="hex(data + i, &crc)"]
159 -> 19 [label="hex(data + i, &crc)"]
23 -> 1 [label="nybble(data[1])"]
111 -> 29 [label="usage()"]
28 -> 112 [label="Return edge from usage to main"]
28 -> 84 [label="Return edge from usage to main"]
28 -> 67 [label="Return edge from usage to main"]
83 -> 29 [label="usage()"]
66 -> 29 [label="usage()"]}