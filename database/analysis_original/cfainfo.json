{"nodes":{"0":{"no":0,"func":"die"},"1":{"no":1,"func":"die"},"2":{"no":2,"func":"die"},"3":{"no":3,"func":"die"},"4":{"no":4,"func":"die"},"5":{"no":5,"func":"die"},"6":{"no":6,"func":"die"},"7":{"no":7,"func":"die"},"8":{"no":8,"func":"die"},"9":{"no":9,"func":"die"},"10":{"no":10,"func":"die"},"11":{"no":11,"func":"Address_print"},"12":{"no":12,"func":"Address_print"},"13":{"no":13,"func":"Address_print"},"14":{"no":14,"func":"Address_print"},"15":{"no":15,"func":"Database_load"},"16":{"no":16,"func":"Database_load"},"17":{"no":17,"func":"Database_load"},"18":{"no":18,"func":"Database_load"},"19":{"no":19,"func":"Database_load"},"20":{"no":20,"func":"Database_load"},"21":{"no":21,"func":"Database_load"},"22":{"no":22,"func":"Database_load"},"23":{"no":23,"func":"Database_open"},"24":{"no":24,"func":"Database_open"},"25":{"no":25,"func":"Database_open"},"26":{"no":26,"func":"Database_open"},"27":{"no":27,"func":"Database_open"},"28":{"no":28,"func":"Database_open"},"29":{"no":29,"func":"Database_open"},"30":{"no":30,"func":"Database_open"},"31":{"no":31,"func":"Database_open"},"32":{"no":32,"func":"Database_open"},"33":{"no":33,"func":"Database_open"},"34":{"no":34,"func":"Database_open"},"35":{"no":35,"func":"Database_open"},"36":{"no":36,"func":"Database_open"},"37":{"no":37,"func":"Database_open"},"38":{"no":38,"func":"Database_open"},"39":{"no":39,"func":"Database_open"},"40":{"no":40,"func":"Database_open"},"41":{"no":41,"func":"Database_open"},"42":{"no":42,"func":"Database_open"},"43":{"no":43,"func":"Database_open"},"44":{"no":44,"func":"Database_open"},"45":{"no":45,"func":"Database_open"},"46":{"no":46,"func":"Database_open"},"47":{"no":47,"func":"Database_open"},"48":{"no":48,"func":"Database_open"},"49":{"no":49,"func":"Database_open"},"50":{"no":50,"func":"Database_open"},"51":{"no":51,"func":"Database_open"},"52":{"no":52,"func":"Database_open"},"53":{"no":53,"func":"Database_open"},"54":{"no":54,"func":"Database_open"},"55":{"no":55,"func":"Database_open"},"56":{"no":56,"func":"Database_open"},"57":{"no":57,"func":"Database_open"},"58":{"no":58,"func":"Database_open"},"59":{"no":59,"func":"Database_open"},"60":{"no":60,"func":"Database_open"},"61":{"no":61,"func":"Database_open"},"63":{"no":63,"func":"Database_close"},"64":{"no":64,"func":"Database_close"},"65":{"no":65,"func":"Database_close"},"66":{"no":66,"func":"Database_close"},"67":{"no":67,"func":"Database_close"},"68":{"no":68,"func":"Database_close"},"69":{"no":69,"func":"Database_close"},"70":{"no":70,"func":"Database_close"},"72":{"no":72,"func":"Database_close"},"73":{"no":73,"func":"Database_close"},"74":{"no":74,"func":"Database_close"},"76":{"no":76,"func":"Database_close"},"78":{"no":78,"func":"Database_write"},"79":{"no":79,"func":"Database_write"},"80":{"no":80,"func":"Database_write"},"81":{"no":81,"func":"Database_write"},"82":{"no":82,"func":"Database_write"},"83":{"no":83,"func":"Database_write"},"84":{"no":84,"func":"Database_write"},"85":{"no":85,"func":"Database_write"},"86":{"no":86,"func":"Database_write"},"87":{"no":87,"func":"Database_write"},"88":{"no":88,"func":"Database_write"},"89":{"no":89,"func":"Database_write"},"90":{"no":90,"func":"Database_write"},"91":{"no":91,"func":"Database_create"},"92":{"no":92,"func":"Database_create"},"93":{"no":93,"func":"Database_create"},"96":{"no":96,"func":"Database_create"},"98":{"no":98,"func":"Database_create"},"99":{"no":99,"func":"Database_create"},"102":{"no":102,"func":"Database_set"},"103":{"no":103,"func":"Database_set"},"104":{"no":104,"func":"Database_set"},"105":{"no":105,"func":"Database_set"},"106":{"no":106,"func":"Database_set"},"107":{"no":107,"func":"Database_set"},"108":{"no":108,"func":"Database_set"},"110":{"no":110,"func":"Database_set"},"111":{"no":111,"func":"Database_set"},"112":{"no":112,"func":"Database_set"},"113":{"no":113,"func":"Database_set"},"114":{"no":114,"func":"Database_set"},"115":{"no":115,"func":"Database_set"},"116":{"no":116,"func":"Database_set"},"117":{"no":117,"func":"Database_set"},"118":{"no":118,"func":"Database_set"},"119":{"no":119,"func":"Database_get"},"120":{"no":120,"func":"Database_get"},"121":{"no":121,"func":"Database_get"},"122":{"no":122,"func":"Database_get"},"123":{"no":123,"func":"Database_get"},"124":{"no":124,"func":"Database_get"},"125":{"no":125,"func":"Database_get"},"126":{"no":126,"func":"Database_get"},"127":{"no":127,"func":"Database_get"},"128":{"no":128,"func":"Database_delete"},"129":{"no":129,"func":"Database_delete"},"130":{"no":130,"func":"Database_delete"},"133":{"no":133,"func":"Database_list"},"134":{"no":134,"func":"Database_list"},"135":{"no":135,"func":"Database_list"},"139":{"no":139,"func":"Database_list"},"141":{"no":141,"func":"Database_list"},"142":{"no":142,"func":"Database_list"},"143":{"no":143,"func":"Database_list"},"144":{"no":144,"func":"Database_list"},"145":{"no":145,"func":"Database_list"},"146":{"no":146,"func":"Database_list"},"147":{"no":147,"func":"main"},"148":{"no":148,"func":"main"},"149":{"no":149,"func":"main"},"150":{"no":150,"func":"main"},"151":{"no":151,"func":"main"},"152":{"no":152,"func":"main"},"155":{"no":155,"func":"main"},"156":{"no":156,"func":"main"},"157":{"no":157,"func":"main"},"158":{"no":158,"func":"main"},"159":{"no":159,"func":"main"},"160":{"no":160,"func":"main"},"161":{"no":161,"func":"main"},"162":{"no":162,"func":"main"},"163":{"no":163,"func":"main"},"164":{"no":164,"func":"main"},"165":{"no":165,"func":"main"},"167":{"no":167,"func":"main"},"168":{"no":168,"func":"main"},"169":{"no":169,"func":"main"},"170":{"no":170,"func":"main"},"172":{"no":172,"func":"main"},"173":{"no":173,"func":"main"},"174":{"no":174,"func":"main"},"175":{"no":175,"func":"main"},"176":{"no":176,"func":"main"},"177":{"no":177,"func":"main"},"179":{"no":179,"func":"main"},"180":{"no":180,"func":"main"},"181":{"no":181,"func":"main"},"182":{"no":182,"func":"main"},"183":{"no":183,"func":"main"},"184":{"no":184,"func":"main"},"185":{"no":185,"func":"main"},"187":{"no":187,"func":"main"},"188":{"no":188,"func":"main"},"189":{"no":189,"func":"main"},"190":{"no":190,"func":"main"},"191":{"no":191,"func":"main"},"192":{"no":192,"func":"main"},"193":{"no":193,"func":"main"},"195":{"no":195,"func":"main"},"196":{"no":196,"func":"main"},"197":{"no":197,"func":"main"},"199":{"no":199,"func":"main"},"200":{"no":200,"func":"main"},"201":{"no":201,"func":"main"},"203":{"no":203,"func":"main"}},"edges":{"165->201":{"file":"tf\/database.c","line":2306,"source":165,"type":"CallToReturnEdge","stmt":"Database_close(conn);","target":201},"126->123":{"file":"<none>","line":0,"source":126,"type":"BlankEdge","stmt":"","target":123},"82->83":{"file":"tf\/database.c","line":2196,"source":82,"type":"StatementEdge","stmt":"rc = fwrite(conn->db, 103200, 1, conn->file);","target":83},"107->108":{"file":"tf\/database.c","line":2218,"source":107,"type":"CallToReturnEdge","stmt":"die(\\\"Already set, delete it first\\\");","target":108},"17->18":{"file":"tf\/database.c","line":2127,"source":17,"type":"DeclarationEdge","stmt":"int rc;","target":18},"201->147":{"file":"tf\/database.c","line":2308,"source":201,"type":"ReturnStatementEdge","stmt":"return 0;","target":147},"148->203":{"file":"<none>","line":0,"source":148,"type":"BlankEdge","stmt":"INIT GLOBAL VARS","target":203},"145->146":{"file":"tf\/database.c","line":2256,"source":145,"type":"CallToReturnEdge","stmt":"Address_print(cur);","target":146},"70->68":{"file":"tf\/database.c","line":2175,"source":70,"type":"MultiEdge","stmt":"Num = Num + 1; ","target":68},"37->39":{"file":"tf\/database.c","line":2143,"source":37,"type":"StatementEdge","stmt":"(void)0;","target":39},"110->111":{"file":"tf\/database.c","line":2222,"source":110,"type":"StatementEdge","stmt":"res = strncpy(addr->name, name, 512);","target":111},"29->31":{"file":"tf\/database.c","line":2136,"source":29,"type":"StatementEdge","stmt":"(void)0;","target":31},"50->43":{"file":"<none>","line":0,"source":50,"type":"BlankEdge","stmt":"","target":43},"25->26":{"file":"tf\/database.c","line":2133,"source":25,"type":"DeclarationEdge","stmt":"struct Connection *conn;","target":26},"187->190":{"file":"tf\/database.c","line":2293,"source":187,"type":"AssumeEdge","stmt":"[argc != 4]","target":190},"13->14":{"file":"tf\/database.c","line":2121,"source":13,"type":"StatementEdge","stmt":"printf(\\\"%d %s %s\\n\\\", addr->id, addr->name, addr->email);","target":14},"183->181":{"file":"<none>","line":0,"source":183,"type":"BlankEdge","stmt":"","target":181},"57->58":{"file":"tf\/database.c","line":2159,"source":57,"type":"CallToReturnEdge","stmt":"Database_load(conn);","target":58},"105->106":{"file":"tf\/database.c","line":2218,"source":105,"type":"AssumeEdge","stmt":"[(addr->set) == 0]","target":106},"105->107":{"file":"tf\/database.c","line":2218,"source":105,"type":"AssumeEdge","stmt":"[!((addr->set) == 0)]","target":107},"149->150":{"file":"tf\/database.c","line":2263,"source":149,"type":"AssumeEdge","stmt":"[!(argc < 3)]","target":150},"149->151":{"file":"tf\/database.c","line":2263,"source":149,"type":"AssumeEdge","stmt":"[argc < 3]","target":151},"98->96":{"file":"tf\/database.c","line":2207,"source":98,"type":"MultiEdge","stmt":"struct Address addr = { .id = i, .set = 0 }; (conn->db->rows)[i] = addr; i = i + 1;","target":96},"162->163":{"file":"tf\/database.c","line":2271,"source":162,"type":"CallToReturnEdge","stmt":"die(\\\"There's not that many records.\\\");","target":163},"34->32":{"file":"<none>","line":0,"source":34,"type":"BlankEdge","stmt":"","target":32},"5->9":{"file":"tf\/database.c","line":2113,"source":5,"type":"StatementEdge","stmt":"printf(\\\"ERROR: %s\\n\\\", message);","target":9},"185->165":{"file":"tf\/database.c","line":2290,"source":185,"type":"BlankEdge","stmt":"break","target":165},"114->112":{"file":"<none>","line":0,"source":114,"type":"BlankEdge","stmt":"","target":112},"160->158":{"file":"<none>","line":0,"source":160,"type":"BlankEdge","stmt":"","target":158},"54->55":{"file":"tf\/database.c","line":2156,"source":54,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >= 0\\\", \\\"tf\/database.c\\\", 76, \\\"__PRETTY_FUNCTION__\\\");","target":55},"65->67":{"file":"tf\/database.c","line":2170,"source":65,"type":"AssumeEdge","stmt":"[!(conn == 0)]","target":67},"203->149":{"file":"<multiple files>","line":0,"source":203,"type":"MultiEdge","stmt":"typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 { int __val[2]; }; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 { unsigned int __wch; char __wchb[4]; }; struct __anon_type_2 { int __count; union __anon_type_1 __value; }; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 { __off_t __pos; __mbstate_t __state; }; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 { __off64_t __pos; __mbstate_t __state; }; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t; typedef void _IO_lock_t; struct _IO_marker { struct _IO_marker *_next; struct _IO_FILE *_sbuf; int _pos; }; enum __codecvt_result { __codecvt_ok = 0, __codecvt_partial = 1, __codecvt_error = 2, __codecvt_noconv = 3 }; struct _IO_FILE { int _flags; char *_IO_read_ptr; char *_IO_read_end; char *_IO_read_base; char *_IO_write_base; char *_IO_write_ptr; char *_IO_write_end; char *_IO_buf_base; char *_IO_buf_end; char *_IO_save_base; char *_IO_backup_base; char *_IO_save_end; struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock; __off64_t _offset; void *__pad1; void *__pad2; void *__pad3; void *__pad4; size_t __pad5; int _mode; char _unused2[40UL]; }; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t ); size_t _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); typedef int wchar_t; struct __anon_type_5 { int quot; int rem; }; typedef struct __anon_type_5 div_t; struct __anon_type_6 { long int quot; long int rem; }; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 { long long int quot; long long int rem; }; typedef struct __anon_type_7 lldiv_t; size_t __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 { unsigned long int __val[32UL]; }; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec { __time_t tv_sec; long int tv_nsec; }; struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 { __fd_mask __fds_bits[32]; }; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 { char __size[56]; long int __align; }; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list { struct __pthread_internal_list *__prev; struct __pthread_internal_list *__next; }; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s { int __lock; unsigned int __count; int __owner; unsigned int __nusers; int __kind; int __spins; __pthread_list_t __list; }; union __anon_type_11 { struct __pthread_mutex_s __data; char __size[40]; long int __align; }; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 { char __size[4]; int __align; }; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 { int __lock; unsigned int __futex; unsigned long long int __total_seq; unsigned long long int __wakeup_seq; unsigned long long int __woken_seq; void *__mutex; unsigned int __nwaiters; unsigned int __broadcast_seq; }; union __anon_type_14 { struct __anon_type_13 __data; char __size[48]; long long int __align; }; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 { char __size[4]; int __align; }; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 { int __lock; unsigned int __nr_readers; unsigned int __readers_wakeup; unsigned int __writer_wakeup; unsigned int __nr_readers_queued; unsigned int __nr_writers_queued; int __writer; int __shared; unsigned long int __pad1; unsigned long int __pad2; unsigned int __flags; }; union __anon_type_17 { struct __anon_type_16 __data; char __size[56]; long int __align; }; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 { char __size[8]; long int __align; }; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 { char __size[32]; long int __align; }; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 { char __size[4]; int __align; }; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data { int32_t *fptr; int32_t *rptr; int32_t *state; int rand_type; int rand_deg; int rand_sep; int32_t *end_ptr; }; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data { unsigned short int __x[3]; unsigned short int __old_x[3]; unsigned short int __c; unsigned short int __init; unsigned long long int __a; }; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t div(int __numer, int __denom); ldiv_t ldiv(long int __numer, long int __denom); lldiv_t lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); int * __errno_location(); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct { struct locale_data *__locales[13]; const unsigned short int *__ctype_b; const int *__ctype_tolower; const int *__ctype_toupper; const char *__names[13]; }; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t strcspn(const char *__s, const char *__reject); size_t strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t strlen(const char *__s); size_t strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); int Num = 3; struct Address { int id; int set; char name[512]; char email[512]; }; struct Database { struct Address rows[100]; }; struct Connection { FILE *file; struct Database *db; }; void die(const char *message); void Address_print(struct Address *addr); void Database_load(struct Connection *conn); struct Connection * Database_open(const char *filename, char mode); void Database_close(struct Connection *conn); void Database_write(struct Connection *conn); void Database_create(struct Connection *conn); void Database_set(struct Connection *conn, int id, const char *name, const char *email); void Database_get(struct Connection *conn, int id); void Database_delete(struct Connection *conn, int id); void Database_list(struct Connection *conn); int main(int argc, char *argv[]); Function start dummy edge","target":149},"65->66":{"file":"tf\/database.c","line":2170,"source":65,"type":"AssumeEdge","stmt":"[conn == 0]","target":66},"189->192":{"file":"tf\/database.c","line":2295,"source":189,"type":"CallToReturnEdge","stmt":"Database_delete(conn, id);","target":192},"187->189":{"file":"tf\/database.c","line":2293,"source":187,"type":"AssumeEdge","stmt":"[!(argc != 4)]","target":189},"181->184":{"file":"tf\/database.c","line":2288,"source":181,"type":"CallToReturnEdge","stmt":"Database_set(conn, id, argv[4], argv[5]);","target":184},"141->143":{"file":"tf\/database.c","line":2253,"source":141,"type":"DeclarationEdge","stmt":"struct Address *cur = &((db->rows)[i]);","target":143},"85->86":{"file":"tf\/database.c","line":2197,"source":85,"type":"CallToReturnEdge","stmt":"die(\\\"Failed to write database.\\\");","target":86},"74->72":{"file":"tf\/database.c","line":2183,"source":74,"type":"MultiEdge","stmt":"Num = Num + 1; ","target":72},"21->22":{"file":"tf\/database.c","line":2128,"source":21,"type":"CallToReturnEdge","stmt":"die(\\\"Failed to load database.\\\");","target":22},"135->139":{"file":"tf\/database.c","line":2249,"source":135,"type":"MultiEdge","stmt":"int i = 0; struct Database *db = conn->db; for i = 0;","target":139},"30->31":{"file":"tf\/database.c","line":2136,"source":30,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >=0\\\", \\\"tf\/database.c\\\", 56, \\\"__PRETTY_FUNCTION__\\\");","target":31},"190->191":{"file":"tf\/database.c","line":2293,"source":190,"type":"CallToReturnEdge","stmt":"die(\\\"Need id to delete\\\");","target":191},"41->42":{"file":"tf\/database.c","line":2145,"source":41,"type":"CallToReturnEdge","stmt":"die(\\\"Memory error\\\");","target":42},"150->155":{"file":"tf\/database.c","line":2265,"source":150,"type":"MultiEdge","stmt":"char *filename = argv[1]; char action = argv[2][0]; struct Connection *conn;","target":155},"168->172":{"file":"tf\/database.c","line":2279,"source":168,"type":"AssumeEdge","stmt":"[action == 'g']","target":172},"168->173":{"file":"tf\/database.c","line":2279,"source":168,"type":"AssumeEdge","stmt":"[!(action == 'g')]","target":173},"159->160":{"file":"tf\/database.c","line":2270,"source":159,"type":"StatementEdge","stmt":"id = atoi(argv[3]);","target":160},"197->165":{"file":"tf\/database.c","line":2301,"source":197,"type":"BlankEdge","stmt":"break","target":165},"93->96":{"file":"tf\/database.c","line":2205,"source":93,"type":"MultiEdge","stmt":"int i = 0; for i = 0;","target":96},"28->29":{"file":"tf\/database.c","line":2136,"source":28,"type":"AssumeEdge","stmt":"[Num >= 0]","target":29},"18->19":{"file":"tf\/database.c","line":2127,"source":18,"type":"StatementEdge","stmt":"rc = fread(conn->db, 103200, 1, conn->file);","target":19},"58->43":{"file":"<none>","line":0,"source":58,"type":"BlankEdge","stmt":"","target":43},"175->176":{"file":"tf\/database.c","line":2280,"source":175,"type":"CallToReturnEdge","stmt":"die(\\\"Need an id to get\\\");","target":176},"43->60":{"file":"tf\/database.c","line":2163,"source":43,"type":"AssumeEdge","stmt":"[(conn->file) == 0]","target":60},"180->187":{"file":"tf\/database.c","line":2292,"source":180,"type":"AssumeEdge","stmt":"[action == 'd']","target":187},"180->188":{"file":"tf\/database.c","line":2292,"source":180,"type":"AssumeEdge","stmt":"[!(action == 'd')]","target":188},"158->162":{"file":"tf\/database.c","line":2271,"source":158,"type":"AssumeEdge","stmt":"[id >= 100]","target":162},"157->159":{"file":"tf\/database.c","line":2270,"source":157,"type":"AssumeEdge","stmt":"[argc > 3]","target":159},"157->158":{"file":"tf\/database.c","line":2270,"source":157,"type":"AssumeEdge","stmt":"[!(argc > 3)]","target":158},"3->10":{"file":"tf\/database.c","line":2116,"source":3,"type":"StatementEdge","stmt":"exit(1);","target":10},"6->7":{"file":"tf\/database.c","line":2110,"source":6,"type":"StatementEdge","stmt":"__CPAchecker_TMP_0 = __errno_location();","target":7},"116->102":{"file":"<none>","line":0,"source":116,"type":"BlankEdge","stmt":"default return","target":102},"36->38":{"file":"tf\/database.c","line":2143,"source":36,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":38},"36->37":{"file":"tf\/database.c","line":2143,"source":36,"type":"AssumeEdge","stmt":"[Num >= 0]","target":37},"158->161":{"file":"tf\/database.c","line":2271,"source":158,"type":"AssumeEdge","stmt":"[!(id >= 100)]","target":161},"24->25":{"file":"<none>","line":0,"source":24,"type":"BlankEdge","stmt":"Function start dummy edge","target":25},"81->82":{"file":"tf\/database.c","line":2196,"source":81,"type":"DeclarationEdge","stmt":"int rc;","target":82},"43->59":{"file":"tf\/database.c","line":2163,"source":43,"type":"AssumeEdge","stmt":"[!((conn->file) == 0)]","target":59},"195->197":{"file":"tf\/database.c","line":2300,"source":195,"type":"CallToReturnEdge","stmt":"Database_list(conn);","target":197},"134->135":{"file":"<none>","line":0,"source":134,"type":"BlankEdge","stmt":"Function start dummy edge","target":135},"14->11":{"file":"<none>","line":0,"source":14,"type":"BlankEdge","stmt":"default return","target":11},"46->47":{"file":"tf\/database.c","line":2150,"source":46,"type":"StatementEdge","stmt":"Num = Num - 1;","target":47},"152->150":{"file":"<none>","line":0,"source":152,"type":"BlankEdge","stmt":"","target":150},"1->2":{"file":"<none>","line":0,"source":1,"type":"BlankEdge","stmt":"Function start dummy edge","target":2},"199->200":{"file":"tf\/database.c","line":2303,"source":199,"type":"CallToReturnEdge","stmt":"die(\\\"Invalid action, only: c=create, g=get, s=set, d=del, l=list\\\");","target":200},"143->145":{"file":"tf\/database.c","line":2255,"source":143,"type":"AssumeEdge","stmt":"[!((cur->set) == 0)]","target":145},"143->144":{"file":"tf\/database.c","line":2255,"source":143,"type":"AssumeEdge","stmt":"[(cur->set) == 0]","target":144},"69->70":{"file":"tf\/database.c","line":2174,"source":69,"type":"StatementEdge","stmt":"fclose(conn->file);","target":70},"170->165":{"file":"tf\/database.c","line":2277,"source":170,"type":"BlankEdge","stmt":"break","target":165},"20->15":{"file":"<none>","line":0,"source":20,"type":"BlankEdge","stmt":"default return","target":15},"31->33":{"file":"tf\/database.c","line":2138,"source":31,"type":"AssumeEdge","stmt":"[conn == 0]","target":33},"176->174":{"file":"<none>","line":0,"source":176,"type":"BlankEdge","stmt":"","target":174},"31->32":{"file":"tf\/database.c","line":2138,"source":31,"type":"AssumeEdge","stmt":"[!(conn == 0)]","target":32},"115->116":{"file":"tf\/database.c","line":2227,"source":115,"type":"AssumeEdge","stmt":"[!(res == 0)]","target":116},"115->117":{"file":"tf\/database.c","line":2227,"source":115,"type":"AssumeEdge","stmt":"[res == 0]","target":117},"10->0":{"file":"<none>","line":0,"source":10,"type":"BlankEdge","stmt":"default return","target":0},"167->169":{"file":"tf\/database.c","line":2275,"source":167,"type":"CallToReturnEdge","stmt":"Database_create(conn);","target":169},"161->164":{"file":"tf\/database.c","line":2273,"source":161,"type":"BlankEdge","stmt":"switch (action)","target":164},"139->141":{"file":"tf\/database.c","line":2252,"source":139,"type":"AssumeEdge","stmt":"[i < 100]","target":141},"124->126":{"file":"tf\/database.c","line":2235,"source":124,"type":"CallToReturnEdge","stmt":"Address_print(addr);","target":126},"139->142":{"file":"tf\/database.c","line":2252,"source":139,"type":"AssumeEdge","stmt":"[!(i < 100)]","target":142},"86->84":{"file":"<none>","line":0,"source":86,"type":"BlankEdge","stmt":"","target":84},"64->65":{"file":"<none>","line":0,"source":64,"type":"BlankEdge","stmt":"Function start dummy edge","target":65},"42->40":{"file":"<none>","line":0,"source":42,"type":"BlankEdge","stmt":"","target":40},"53->55":{"file":"tf\/database.c","line":2156,"source":53,"type":"StatementEdge","stmt":"(void)0;","target":55},"19->20":{"file":"tf\/database.c","line":2128,"source":19,"type":"AssumeEdge","stmt":"[!(rc != 1)]","target":20},"144->139":{"file":"tf\/database.c","line":2252,"source":144,"type":"MultiEdge","stmt":" i = i + 1;","target":139},"19->21":{"file":"tf\/database.c","line":2128,"source":19,"type":"AssumeEdge","stmt":"[rc != 1]","target":21},"111->113":{"file":"tf\/database.c","line":2224,"source":111,"type":"AssumeEdge","stmt":"[res == 0]","target":113},"111->112":{"file":"tf\/database.c","line":2224,"source":111,"type":"AssumeEdge","stmt":"[!(res == 0)]","target":112},"27->28":{"file":"tf\/database.c","line":2135,"source":27,"type":"StatementEdge","stmt":"Num = Num - 1;","target":28},"7->5":{"file":"tf\/database.c","line":2110,"source":7,"type":"AssumeEdge","stmt":"[(*__CPAchecker_TMP_0) == 0]","target":5},"7->4":{"file":"tf\/database.c","line":2110,"source":7,"type":"AssumeEdge","stmt":"[!((*__CPAchecker_TMP_0) == 0)]","target":4},"146->144":{"file":"<none>","line":0,"source":146,"type":"BlankEdge","stmt":"","target":144},"40->44":{"file":"tf\/database.c","line":2147,"source":40,"type":"AssumeEdge","stmt":"[mode == 'c']","target":44},"184->185":{"file":"tf\/database.c","line":2289,"source":184,"type":"CallToReturnEdge","stmt":"Database_write(conn);","target":185},"72->76":{"file":"tf\/database.c","line":2186,"source":72,"type":"StatementEdge","stmt":"free(conn);","target":76},"40->45":{"file":"tf\/database.c","line":2147,"source":40,"type":"AssumeEdge","stmt":"[!(mode == 'c')]","target":45},"47->48":{"file":"tf\/database.c","line":2151,"source":47,"type":"AssumeEdge","stmt":"[Num >= 0]","target":48},"47->49":{"file":"tf\/database.c","line":2151,"source":47,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":49},"2->6":{"file":"tf\/database.c","line":2110,"source":2,"type":"DeclarationEdge","stmt":"int *__CPAchecker_TMP_0;","target":6},"163->161":{"file":"<none>","line":0,"source":163,"type":"BlankEdge","stmt":"","target":161},"108->106":{"file":"<none>","line":0,"source":108,"type":"BlankEdge","stmt":"","target":106},"125->127":{"file":"tf\/database.c","line":2237,"source":125,"type":"CallToReturnEdge","stmt":"die(\\\"ID is not set\\\");","target":127},"151->152":{"file":"tf\/database.c","line":2263,"source":151,"type":"CallToReturnEdge","stmt":"die(\\\"USAGE: ex17 <dbfile> <action> [action params]\\\");","target":152},"129->130":{"file":"<none>","line":0,"source":129,"type":"BlankEdge","stmt":"Function start dummy edge","target":130},"106->110":{"file":"tf\/database.c","line":2220,"source":106,"type":"MultiEdge","stmt":"addr->set = 1; char *res;","target":110},"80->81":{"file":"tf\/database.c","line":2194,"source":80,"type":"StatementEdge","stmt":"rewind(conn->file);","target":81},"130->128":{"file":"tf\/database.c","line":2243,"source":130,"type":"MultiEdge","stmt":"struct Address addr = { .id = id, .set = 0 }; (conn->db->rows)[id] = addr; default return","target":128},"177->165":{"file":"tf\/database.c","line":2283,"source":177,"type":"BlankEdge","stmt":"break","target":165},"35->36":{"file":"tf\/database.c","line":2142,"source":35,"type":"StatementEdge","stmt":"Num = Num - 1;","target":36},"67->68":{"file":"tf\/database.c","line":2172,"source":67,"type":"AssumeEdge","stmt":"[(conn->file) == 0]","target":68},"67->69":{"file":"tf\/database.c","line":2172,"source":67,"type":"AssumeEdge","stmt":"[!((conn->file) == 0)]","target":69},"142->133":{"file":"<none>","line":0,"source":142,"type":"BlankEdge","stmt":"default return","target":133},"60->61":{"file":"tf\/database.c","line":2163,"source":60,"type":"CallToReturnEdge","stmt":"die(\\\"Failed to open the file\\\");","target":61},"92->93":{"file":"<none>","line":0,"source":92,"type":"BlankEdge","stmt":"Function start dummy edge","target":93},"12->13":{"file":"<none>","line":0,"source":12,"type":"BlankEdge","stmt":"Function start dummy edge","target":13},"104->105":{"file":"tf\/database.c","line":2217,"source":104,"type":"DeclarationEdge","stmt":"struct Address *addr = &((conn->db->rows)[id]);","target":105},"200->165":{"file":"<none>","line":0,"source":200,"type":"BlankEdge","stmt":"","target":165},"172->174":{"file":"tf\/database.c","line":2280,"source":172,"type":"AssumeEdge","stmt":"[!(argc != 4)]","target":174},"172->175":{"file":"tf\/database.c","line":2280,"source":172,"type":"AssumeEdge","stmt":"[argc != 4]","target":175},"79->80":{"file":"<none>","line":0,"source":79,"type":"BlankEdge","stmt":"Function start dummy edge","target":80},"113->114":{"file":"tf\/database.c","line":2224,"source":113,"type":"CallToReturnEdge","stmt":"die(\\\"Name copy failed\\\");","target":114},"87->89":{"file":"tf\/database.c","line":2200,"source":87,"type":"AssumeEdge","stmt":"[rc == -1]","target":89},"87->88":{"file":"tf\/database.c","line":2200,"source":87,"type":"AssumeEdge","stmt":"[!(rc == -1)]","target":88},"68->72":{"file":"tf\/database.c","line":2179,"source":68,"type":"AssumeEdge","stmt":"[(conn->db) == 0]","target":72},"68->73":{"file":"tf\/database.c","line":2179,"source":68,"type":"AssumeEdge","stmt":"[!((conn->db) == 0)]","target":73},"28->30":{"file":"tf\/database.c","line":2136,"source":28,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":30},"52->53":{"file":"tf\/database.c","line":2156,"source":52,"type":"AssumeEdge","stmt":"[Num >= 0]","target":53},"39->41":{"file":"tf\/database.c","line":2145,"source":39,"type":"AssumeEdge","stmt":"[(conn->db) == 0]","target":41},"52->54":{"file":"tf\/database.c","line":2156,"source":52,"type":"AssumeEdge","stmt":"[!(Num >= 0)]","target":54},"196->199":{"file":"<none>","line":0,"source":196,"type":"BlankEdge","stmt":"default","target":199},"39->40":{"file":"tf\/database.c","line":2145,"source":39,"type":"AssumeEdge","stmt":"[!((conn->db) == 0)]","target":40},"56->43":{"file":"<none>","line":0,"source":56,"type":"BlankEdge","stmt":"","target":43},"32->35":{"file":"tf\/database.c","line":2140,"source":32,"type":"StatementEdge","stmt":"conn->db = malloc(103200);","target":35},"8->3":{"file":"<none>","line":0,"source":8,"type":"BlankEdge","stmt":"","target":3},"156->157":{"file":"tf\/database.c","line":2268,"source":156,"type":"DeclarationEdge","stmt":"int id = 0;","target":157},"48->50":{"file":"tf\/database.c","line":2151,"source":48,"type":"StatementEdge","stmt":"(void)0;","target":50},"76->66":{"file":"tf\/database.c","line":2188,"source":76,"type":"MultiEdge","stmt":"Num = Num + 1; ","target":66},"123->119":{"file":"<none>","line":0,"source":123,"type":"BlankEdge","stmt":"default return","target":119},"96->99":{"file":"tf\/database.c","line":2207,"source":96,"type":"AssumeEdge","stmt":"[!(i < 100)]","target":99},"96->98":{"file":"tf\/database.c","line":2207,"source":96,"type":"AssumeEdge","stmt":"[i < 100]","target":98},"120->121":{"file":"<none>","line":0,"source":120,"type":"BlankEdge","stmt":"Function start dummy edge","target":121},"117->118":{"file":"tf\/database.c","line":2227,"source":117,"type":"CallToReturnEdge","stmt":"die(\\\"Email copy failed\\\");","target":118},"38->39":{"file":"tf\/database.c","line":2143,"source":38,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >=0\\\", \\\"tf\/database.c\\\", 63, \\\"__PRETTY_FUNCTION__\\\");","target":39},"174->177":{"file":"tf\/database.c","line":2282,"source":174,"type":"CallToReturnEdge","stmt":"Database_get(conn, id);","target":177},"51->52":{"file":"tf\/database.c","line":2155,"source":51,"type":"StatementEdge","stmt":"Num = Num - 1;","target":52},"73->74":{"file":"tf\/database.c","line":2181,"source":73,"type":"StatementEdge","stmt":"free(conn->db);","target":74},"16->17":{"file":"<none>","line":0,"source":16,"type":"BlankEdge","stmt":"Function start dummy edge","target":17},"26->27":{"file":"tf\/database.c","line":2133,"source":26,"type":"StatementEdge","stmt":"conn = malloc(8);","target":27},"83->85":{"file":"tf\/database.c","line":2197,"source":83,"type":"AssumeEdge","stmt":"[rc != 1]","target":85},"83->84":{"file":"tf\/database.c","line":2197,"source":83,"type":"AssumeEdge","stmt":"[!(rc != 1)]","target":84},"155->156":{"file":"tf\/database.c","line":2267,"source":155,"type":"CallToReturnEdge","stmt":"conn = Database_open(filename, action);","target":156},"122->125":{"file":"tf\/database.c","line":2234,"source":122,"type":"AssumeEdge","stmt":"[(addr->set) == 0]","target":125},"191->189":{"file":"<none>","line":0,"source":191,"type":"BlankEdge","stmt":"","target":189},"122->124":{"file":"tf\/database.c","line":2234,"source":122,"type":"AssumeEdge","stmt":"[!((addr->set) == 0)]","target":124},"45->51":{"file":"tf\/database.c","line":2153,"source":45,"type":"StatementEdge","stmt":"conn->file = fopen(filename, \\\"r+\\\");","target":51},"192->193":{"file":"tf\/database.c","line":2296,"source":192,"type":"CallToReturnEdge","stmt":"Database_write(conn);","target":193},"61->59":{"file":"<none>","line":0,"source":61,"type":"BlankEdge","stmt":"","target":59},"169->170":{"file":"tf\/database.c","line":2276,"source":169,"type":"CallToReturnEdge","stmt":"Database_write(conn);","target":170},"89->90":{"file":"tf\/database.c","line":2200,"source":89,"type":"CallToReturnEdge","stmt":"die(\\\"Cannot flush database.\\\");","target":90},"55->57":{"file":"tf\/database.c","line":2158,"source":55,"type":"AssumeEdge","stmt":"[!((conn->file) == 0)]","target":57},"55->56":{"file":"tf\/database.c","line":2158,"source":55,"type":"AssumeEdge","stmt":"[(conn->file) == 0]","target":56},"173->180":{"file":"tf\/database.c","line":2285,"source":173,"type":"AssumeEdge","stmt":"[!(action == 's')]","target":180},"22->20":{"file":"<none>","line":0,"source":22,"type":"BlankEdge","stmt":"","target":20},"179->182":{"file":"tf\/database.c","line":2286,"source":179,"type":"AssumeEdge","stmt":"[argc != 6]","target":182},"179->181":{"file":"tf\/database.c","line":2286,"source":179,"type":"AssumeEdge","stmt":"[!(argc != 6)]","target":181},"193->165":{"file":"tf\/database.c","line":2297,"source":193,"type":"BlankEdge","stmt":"break","target":165},"182->183":{"file":"tf\/database.c","line":2286,"source":182,"type":"CallToReturnEdge","stmt":"die(\\\"Need id, name, email to set\\\");","target":183},"103->104":{"file":"<none>","line":0,"source":103,"type":"BlankEdge","stmt":"Function start dummy edge","target":104},"9->3":{"file":"<none>","line":0,"source":9,"type":"BlankEdge","stmt":"","target":3},"99->91":{"file":"<none>","line":0,"source":99,"type":"BlankEdge","stmt":"default return","target":91},"33->34":{"file":"tf\/database.c","line":2138,"source":33,"type":"CallToReturnEdge","stmt":"die(\\\"Memory error\\\");","target":34},"66->63":{"file":"<none>","line":0,"source":66,"type":"BlankEdge","stmt":"default return","target":63},"44->46":{"file":"tf\/database.c","line":2148,"source":44,"type":"StatementEdge","stmt":"conn->file = fopen(filename, \\\"w\\\");","target":46},"49->50":{"file":"tf\/database.c","line":2151,"source":49,"type":"StatementEdge","stmt":"__assert_fail(\\\"Num >= 0\\\", \\\"tf\/database.c\\\", 71, \\\"__PRETTY_FUNCTION__\\\");","target":50},"112->115":{"file":"tf\/database.c","line":2226,"source":112,"type":"StatementEdge","stmt":"res = strncpy(addr->email, email, 512);","target":115},"127->123":{"file":"<none>","line":0,"source":127,"type":"BlankEdge","stmt":"","target":123},"88->78":{"file":"<none>","line":0,"source":88,"type":"BlankEdge","stmt":"default return","target":78},"4->8":{"file":"tf\/database.c","line":2111,"source":4,"type":"StatementEdge","stmt":"perror(message);","target":8},"84->87":{"file":"tf\/database.c","line":2199,"source":84,"type":"StatementEdge","stmt":"rc = fflush(conn->file);","target":87},"164->168":{"file":"tf\/database.c","line":2274,"source":164,"type":"AssumeEdge","stmt":"[!(action == 'c')]","target":168},"164->167":{"file":"tf\/database.c","line":2274,"source":164,"type":"AssumeEdge","stmt":"[action == 'c']","target":167},"188->196":{"file":"tf\/database.c","line":2299,"source":188,"type":"AssumeEdge","stmt":"[!(action == 'l')]","target":196},"121->122":{"file":"tf\/database.c","line":2232,"source":121,"type":"DeclarationEdge","stmt":"struct Address *addr = &((conn->db->rows)[id]);","target":122},"90->88":{"file":"<none>","line":0,"source":90,"type":"BlankEdge","stmt":"","target":88},"188->195":{"file":"tf\/database.c","line":2299,"source":188,"type":"AssumeEdge","stmt":"[action == 'l']","target":195},"173->179":{"file":"tf\/database.c","line":2285,"source":173,"type":"AssumeEdge","stmt":"[action == 's']","target":179},"118->116":{"file":"<none>","line":0,"source":118,"type":"BlankEdge","stmt":"","target":116},"59->23":{"file":"tf\/database.c","line":2165,"source":59,"type":"ReturnStatementEdge","stmt":"return conn;","target":23}}}