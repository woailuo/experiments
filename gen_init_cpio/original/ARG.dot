digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N379\nmain entry\nAbstractionState: ABS0: true" id="0"]
430 [label="430 @ N516\nmain\n" id="430"]
431 [label="431 @ N387\nmain\n" id="431"]
432 [label="432 @ N388\nmain\n" id="432"]
2961 [fillcolor="cornflowerblue" label="2961 @ N389\nmain\nAbstractionState: ABS124" id="2961"]
2962 [label="2962 @ N392\nmain\n" id="2962"]
2963 [label="2963 @ N393\nmain\n" id="2963"]
2964 [label="2964 @ N394\nmain\n" id="2964"]
2966 [label="2966 @ N395\nmain\n" id="2966"]
2967 [label="2967 @ N398\nmain\n" id="2967"]
2969 [label="2969 @ N402\nmain\n" id="2969"]
2971 [label="2971 @ N412\nmain\n" id="2971"]
2976 [label="2976 @ N413\nmain\n" id="2976"]
2977 [label="2977 @ N375\nusage entry\n" id="2977"]
2978 [label="2978 @ N376\nusage\n" id="2978"]
2979 [label="2979 @ N377\nusage\n" id="2979"]
2980 [label="2980 @ N374\nusage exit\n" id="2980"]
2981 [label="2981 @ N415\nmain\n" id="2981"]
2982 [label="2982 @ N416\nmain\n" id="2982"]
2984 [label="2984 @ N418\nmain\n" id="2984"]
2987 [label="2987 @ N419\nmain\n" id="2987"]
2983 [label="2983 @ N417\nmain\n" id="2983"]
2973 [label="2973 @ N414\nmain\n" id="2973"]
3001 [label="3001 @ N399\nmain\n" id="3001"]
3003 [fillcolor="green" label="3003 @ N389\nmain\nAbstractionState: ABS125" id="3003"]
2970 [label="2970 @ N411\nmain\n" id="2970"]
2968 [label="2968 @ N401\nmain\n" id="2968"]
2988 [label="2988 @ N403\nmain\n" id="2988"]
2993 [label="2993 @ N405\nmain\n" id="2993"]
2994 [label="2994 @ N407\nmain\n" id="2994"]
2995 [label="2995 @ N375\nusage entry\n" id="2995"]
2996 [label="2996 @ N376\nusage\n" id="2996"]
2997 [label="2997 @ N377\nusage\n" id="2997"]
2998 [label="2998 @ N374\nusage exit\n" id="2998"]
2999 [label="2999 @ N408\nmain\n" id="2999"]
2990 [label="2990 @ N406\nmain\n" id="2990"]
2991 [label="2991 @ N404\nmain\n" id="2991"]
2965 [label="2965 @ N396\nmain\n" id="2965"]
3004 [label="3004 @ N391\nmain\n" id="3004"]
3006 [label="3006 @ N421\nmain\n" id="3006"]
3012 [label="3012 @ N429\nmain\n" id="3012"]
3013 [label="3013 @ N430\nmain\n" id="3013"]
3015 [label="3015 @ N428\nmain\n" id="3015"]
3016 [label="3016 @ N434\nmain\n" id="3016"]
3018 [label="3018 @ N432\nmain\n" id="3018"]
3031 [label="3031 @ N426\nmain\n" id="3031"]
3033 [fillcolor="cornflowerblue" label="3033 @ N442\nmain\nAbstractionState: ABS126" id="3033"]
3034 [label="3034 @ N445\nmain\n" id="3034"]
3035 [label="3035 @ N446\nmain\n" id="3035"]
5071 [label="5071 @ N444\nmain\n" id="5071"]
5075 [label="5075 @ N494\nmain\n" id="5075"]
5074 [label="5074 @ N495\nmain\n" id="5074"]
5076 [label="5076 @ N46\ncpio_trailer entry\n" id="5076"]
5077 [label="5077 @ N47\ncpio_trailer\n" id="5077"]
5078 [label="5078 @ N50\ncpio_trailer\n" id="5078"]
5079 [label="5079 @ N51\ncpio_trailer\n" id="5079"]
5080 [label="5080 @ N52\ncpio_trailer\n" id="5080"]
5081 [label="5081 @ N41\npush_hdr entry\n" id="5081"]
5082 [label="5082 @ N42\npush_hdr\n" id="5082"]
5083 [label="5083 @ N43\npush_hdr\n" id="5083"]
5084 [label="5084 @ N40\npush_hdr exit\n" id="5084"]
5085 [label="5085 @ N53\ncpio_trailer\n" id="5085"]
5086 [label="5086 @ N20\npush_rest entry\n" id="5086"]
5087 [label="5087 @ N21\npush_rest\n" id="5087"]
5088 [label="5088 @ N22\npush_rest\n" id="5088"]
5089 [label="5089 @ N23\npush_rest\n" id="5089"]
5090 [label="5090 @ N25\npush_rest\n" id="5090"]
5091 [label="5091 @ N26\npush_rest\n" id="5091"]
5092 [label="5092 @ N27\npush_rest\n" id="5092"]
5094 [fillcolor="cornflowerblue" label="5094 @ N30\npush_rest\nAbstractionState: ABS226" id="5094"]
5096 [label="5096 @ N31\npush_rest\n" id="5096"]
5097 [label="5097 @ N33\npush_rest\n" id="5097"]
5099 [fillcolor="green" label="5099 @ N30\npush_rest\nAbstractionState: ABS227" id="5099"]
5095 [label="5095 @ N32\npush_rest\n" id="5095"]
5100 [label="5100 @ N19\npush_rest exit\n" id="5100"]
5101 [label="5101 @ N54\ncpio_trailer\n" id="5101"]
5103 [fillcolor="cornflowerblue" label="5103 @ N55\ncpio_trailer\nAbstractionState: ABS228" id="5103"]
5105 [label="5105 @ N56\ncpio_trailer\n" id="5105"]
5106 [label="5106 @ N58\ncpio_trailer\n" id="5106"]
5108 [fillcolor="green" label="5108 @ N55\ncpio_trailer\nAbstractionState: ABS229" id="5108"]
5104 [label="5104 @ N57\ncpio_trailer\n" id="5104"]
5109 [label="5109 @ N45\ncpio_trailer exit\n" id="5109"]
5110 [label="5110 @ N496\nmain\n" id="5110"]
5111 [label="5111 @ N494\nmain\n" id="5111"]
3037 [label="3037 @ N443\nmain\n" id="3037"]
3038 [label="3038 @ N448\nmain\n" id="3038"]
3039 [label="3039 @ N449\nmain\n" id="3039"]
3040 [label="3040 @ N452\nmain\n" id="3040"]
3042 [label="3042 @ N453\nmain\n" id="3042"]
3043 [label="3043 @ N458\nmain\n" id="3043"]
3045 [label="3045 @ N456\nmain\n" id="3045"]
3047 [label="3047 @ N462\nmain\n" id="3047"]
3048 [label="3048 @ N467\nmain\n" id="3048"]
3049 [label="3049 @ N468\nmain\n" id="3049"]
3051 [label="3051 @ N465\nmain\n" id="3051"]
3052 [label="3052 @ N472\nmain\n" id="3052"]
3057 [label="3057 @ N470\nmain\n" id="3057"]
3059 [fillcolor="cornflowerblue" label="3059 @ N476\nmain\nAbstractionState: ABS127" id="3059"]
3673 [label="3673 @ N479\nmain\n" id="3673"]
3718 [label="3718 @ N491\nmain\n" id="3718"]
4391 [fillcolor="green" label="4391 @ N442\nmain\nAbstractionState: ABS186" id="4391"]
3690 [label="3690 @ N492\nmain\n" id="3690"]
3700 [label="3700 @ N493\nmain\n" id="3700"]
3061 [label="3061 @ N478\nmain\n" id="3061"]
3062 [label="3062 @ N483\nmain\n" id="3062"]
3063 [label="3063 @ N484\nmain\n" id="3063"]
3065 [label="3065 @ N481\nmain\n" id="3065"]
3067 [fillcolor="green" label="3067 @ N476\nmain\nAbstractionState: ABS128" id="3067"]
3064 [label="3064 @ N482\nmain\n" id="3064"]
3069 [label="3069 @ N499\nmain\n" id="3069"]
3071 [label="3071 @ N502\nmain\n" id="3071"]
3073 [label="3073 @ N505\nmain\n" id="3073"]
3075 [label="3075 @ N508\nmain\n" id="3075"]
3077 [label="3077 @ N511\nmain\n" id="3077"]
3079 [label="3079 @ N514\nmain\n" id="3079"]
3609 [label="3609 @ N487\nmain\n" id="3609"]
3663 [label="3663 @ N485\nmain\n" id="3663"]
3627 [label="3627 @ N486\nmain\n" id="3627"]
3636 [label="3636 @ N488\nmain\n" id="3636"]
3645 [label="3645 @ N489\nmain\n" id="3645"]
3078 [label="3078 @ N513\nmain\n" id="3078"]
3081 [label="3081 @ N150\ncpio_mksock_line entry\n" id="3081"]
3082 [label="3082 @ N151\ncpio_mksock_line\n" id="3082"]
3083 [label="3083 @ N152\ncpio_mksock_line\n" id="3083"]
3084 [label="3084 @ N120\ncpio_mkgeneric_line entry\n" id="3084"]
3085 [label="3085 @ N121\ncpio_mkgeneric_line\n" id="3085"]
3086 [label="3086 @ N129\ncpio_mkgeneric_line\n" id="3086"]
3087 [label="3087 @ N130\ncpio_mkgeneric_line\n" id="3087"]
3089 [label="3089 @ N127\ncpio_mkgeneric_line\n" id="3089"]
3090 [label="3090 @ N133\ncpio_mkgeneric_line\n" id="3090"]
3091 [label="3091 @ N103\ncpio_mkgeneric entry\n" id="3091"]
3092 [label="3092 @ N104\ncpio_mkgeneric\n" id="3092"]
3093 [label="3093 @ N105\ncpio_mkgeneric\n" id="3093"]
3097 [label="3097 @ N106\ncpio_mkgeneric\n" id="3097"]
3098 [label="3098 @ N113\ncpio_mkgeneric\n" id="3098"]
3099 [label="3099 @ N114\ncpio_mkgeneric\n" id="3099"]
3100 [label="3100 @ N115\ncpio_mkgeneric\n" id="3100"]
3101 [label="3101 @ N41\npush_hdr entry\n" id="3101"]
3102 [label="3102 @ N42\npush_hdr\n" id="3102"]
3103 [label="3103 @ N43\npush_hdr\n" id="3103"]
3104 [label="3104 @ N40\npush_hdr exit\n" id="3104"]
3105 [label="3105 @ N116\ncpio_mkgeneric\n" id="3105"]
3106 [label="3106 @ N20\npush_rest entry\n" id="3106"]
3107 [label="3107 @ N21\npush_rest\n" id="3107"]
3108 [label="3108 @ N22\npush_rest\n" id="3108"]
3109 [label="3109 @ N23\npush_rest\n" id="3109"]
3110 [label="3110 @ N25\npush_rest\n" id="3110"]
3111 [label="3111 @ N26\npush_rest\n" id="3111"]
3112 [label="3112 @ N27\npush_rest\n" id="3112"]
3114 [fillcolor="cornflowerblue" label="3114 @ N30\npush_rest\nAbstractionState: ABS129" id="3114"]
3116 [label="3116 @ N31\npush_rest\n" id="3116"]
3117 [label="3117 @ N33\npush_rest\n" id="3117"]
3119 [fillcolor="green" label="3119 @ N30\npush_rest\nAbstractionState: ABS130" id="3119"]
3115 [label="3115 @ N32\npush_rest\n" id="3115"]
3120 [label="3120 @ N19\npush_rest exit\n" id="3120"]
3121 [label="3121 @ N117\ncpio_mkgeneric\n" id="3121"]
3122 [label="3122 @ N102\ncpio_mkgeneric exit\n" id="3122"]
3123 [label="3123 @ N134\ncpio_mkgeneric_line\n" id="3123"]
3124 [label="3124 @ N135\ncpio_mkgeneric_line\n" id="3124"]
3127 [label="3127 @ N119\ncpio_mkgeneric_line exit\n" id="3127"]
3129 [label="3129 @ N153\ncpio_mksock_line\n" id="3129"]
3131 [label="3131 @ N149\ncpio_mksock_line exit\n" id="3131"]
3133 [label="3133 @ N515\nmain\n" id="3133"]
3135 [label="3135 @ N487\nmain\n" id="3135"]
3647 [label="3647 @ N485\nmain\n" id="3647"]
3664 [label="3664 @ N479\nmain\n" id="3664"]
3702 [label="3702 @ N491\nmain\n" id="3702"]
3720 [fillcolor="green" label="3720 @ N442\nmain\nAbstractionState: ABS151" id="3720"]
3674 [label="3674 @ N492\nmain\n" id="3674"]
3692 [label="3692 @ N493\nmain\n" id="3692"]
3611 [label="3611 @ N486\nmain\n" id="3611"]
3628 [label="3628 @ N488\nmain\n" id="3628"]
3637 [label="3637 @ N489\nmain\n" id="3637"]
3094 [label="3094 @ N107\ncpio_mkgeneric\n" id="3094"]
3088 [label="3088 @ N128\ncpio_mkgeneric_line\n" id="3088"]
3125 [label="3125 @ N131\ncpio_mkgeneric_line\n" id="3125"]
3126 [label="3126 @ N135\ncpio_mkgeneric_line\n" id="3126"]
3128 [label="3128 @ N119\ncpio_mkgeneric_line exit\n" id="3128"]
3130 [label="3130 @ N153\ncpio_mksock_line\n" id="3130"]
3132 [label="3132 @ N149\ncpio_mksock_line exit\n" id="3132"]
3134 [label="3134 @ N515\nmain\n" id="3134"]
3076 [label="3076 @ N510\nmain\n" id="3076"]
3138 [label="3138 @ N138\ncpio_mkdir_line entry\n" id="3138"]
3139 [label="3139 @ N139\ncpio_mkdir_line\n" id="3139"]
3140 [label="3140 @ N140\ncpio_mkdir_line\n" id="3140"]
3141 [label="3141 @ N120\ncpio_mkgeneric_line entry\n" id="3141"]
3142 [label="3142 @ N121\ncpio_mkgeneric_line\n" id="3142"]
3143 [label="3143 @ N129\ncpio_mkgeneric_line\n" id="3143"]
3144 [label="3144 @ N130\ncpio_mkgeneric_line\n" id="3144"]
3146 [label="3146 @ N127\ncpio_mkgeneric_line\n" id="3146"]
3147 [label="3147 @ N133\ncpio_mkgeneric_line\n" id="3147"]
3148 [label="3148 @ N103\ncpio_mkgeneric entry\n" id="3148"]
3149 [label="3149 @ N104\ncpio_mkgeneric\n" id="3149"]
3150 [label="3150 @ N105\ncpio_mkgeneric\n" id="3150"]
3154 [label="3154 @ N106\ncpio_mkgeneric\n" id="3154"]
3155 [label="3155 @ N113\ncpio_mkgeneric\n" id="3155"]
3156 [label="3156 @ N114\ncpio_mkgeneric\n" id="3156"]
3157 [label="3157 @ N115\ncpio_mkgeneric\n" id="3157"]
3158 [label="3158 @ N41\npush_hdr entry\n" id="3158"]
3159 [label="3159 @ N42\npush_hdr\n" id="3159"]
3160 [label="3160 @ N43\npush_hdr\n" id="3160"]
3161 [label="3161 @ N40\npush_hdr exit\n" id="3161"]
3162 [label="3162 @ N116\ncpio_mkgeneric\n" id="3162"]
3163 [label="3163 @ N20\npush_rest entry\n" id="3163"]
3164 [label="3164 @ N21\npush_rest\n" id="3164"]
3165 [label="3165 @ N22\npush_rest\n" id="3165"]
3166 [label="3166 @ N23\npush_rest\n" id="3166"]
3167 [label="3167 @ N25\npush_rest\n" id="3167"]
3168 [label="3168 @ N26\npush_rest\n" id="3168"]
3169 [label="3169 @ N27\npush_rest\n" id="3169"]
3171 [fillcolor="cornflowerblue" label="3171 @ N30\npush_rest\nAbstractionState: ABS131" id="3171"]
3173 [label="3173 @ N31\npush_rest\n" id="3173"]
3174 [label="3174 @ N33\npush_rest\n" id="3174"]
3176 [fillcolor="green" label="3176 @ N30\npush_rest\nAbstractionState: ABS132" id="3176"]
3172 [label="3172 @ N32\npush_rest\n" id="3172"]
3177 [label="3177 @ N19\npush_rest exit\n" id="3177"]
3178 [label="3178 @ N117\ncpio_mkgeneric\n" id="3178"]
3179 [label="3179 @ N102\ncpio_mkgeneric exit\n" id="3179"]
3180 [label="3180 @ N134\ncpio_mkgeneric_line\n" id="3180"]
3181 [label="3181 @ N135\ncpio_mkgeneric_line\n" id="3181"]
3184 [label="3184 @ N119\ncpio_mkgeneric_line exit\n" id="3184"]
3186 [label="3186 @ N141\ncpio_mkdir_line\n" id="3186"]
3188 [label="3188 @ N137\ncpio_mkdir_line exit\n" id="3188"]
3190 [label="3190 @ N512\nmain\n" id="3190"]
3192 [label="3192 @ N487\nmain\n" id="3192"]
3649 [label="3649 @ N485\nmain\n" id="3649"]
3665 [label="3665 @ N479\nmain\n" id="3665"]
3704 [label="3704 @ N491\nmain\n" id="3704"]
3722 [fillcolor="green" label="3722 @ N442\nmain\nAbstractionState: ABS152" id="3722"]
3676 [label="3676 @ N492\nmain\n" id="3676"]
3693 [label="3693 @ N493\nmain\n" id="3693"]
3613 [label="3613 @ N486\nmain\n" id="3613"]
3629 [label="3629 @ N488\nmain\n" id="3629"]
3638 [label="3638 @ N489\nmain\n" id="3638"]
3151 [label="3151 @ N107\ncpio_mkgeneric\n" id="3151"]
3145 [label="3145 @ N128\ncpio_mkgeneric_line\n" id="3145"]
3182 [label="3182 @ N131\ncpio_mkgeneric_line\n" id="3182"]
3183 [label="3183 @ N135\ncpio_mkgeneric_line\n" id="3183"]
3185 [label="3185 @ N119\ncpio_mkgeneric_line exit\n" id="3185"]
3187 [label="3187 @ N141\ncpio_mkdir_line\n" id="3187"]
3189 [label="3189 @ N137\ncpio_mkdir_line exit\n" id="3189"]
3191 [label="3191 @ N512\nmain\n" id="3191"]
3074 [label="3074 @ N507\nmain\n" id="3074"]
3195 [label="3195 @ N85\ncpio_mkslink_line entry\n" id="3195"]
3196 [label="3196 @ N86\ncpio_mkslink_line\n" id="3196"]
3197 [label="3197 @ N95\ncpio_mkslink_line\n" id="3197"]
3198 [label="3198 @ N96\ncpio_mkslink_line\n" id="3198"]
3200 [label="3200 @ N93\ncpio_mkslink_line\n" id="3200"]
3201 [label="3201 @ N63\ncpio_mkslink entry\n" id="3201"]
3202 [label="3202 @ N64\ncpio_mkslink\n" id="3202"]
3203 [label="3203 @ N65\ncpio_mkslink\n" id="3203"]
3207 [label="3207 @ N66\ncpio_mkslink\n" id="3207"]
3208 [label="3208 @ N73\ncpio_mkslink\n" id="3208"]
3209 [label="3209 @ N74\ncpio_mkslink\n" id="3209"]
3210 [label="3210 @ N75\ncpio_mkslink\n" id="3210"]
3211 [label="3211 @ N76\ncpio_mkslink\n" id="3211"]
3212 [label="3212 @ N77\ncpio_mkslink\n" id="3212"]
3213 [label="3213 @ N41\npush_hdr entry\n" id="3213"]
3214 [label="3214 @ N42\npush_hdr\n" id="3214"]
3215 [label="3215 @ N43\npush_hdr\n" id="3215"]
3216 [label="3216 @ N40\npush_hdr exit\n" id="3216"]
3217 [label="3217 @ N78\ncpio_mkslink\n" id="3217"]
3218 [label="3218 @ N1\npush_string entry\n" id="3218"]
3219 [label="3219 @ N2\npush_string\n" id="3219"]
3220 [label="3220 @ N3\npush_string\n" id="3220"]
3221 [label="3221 @ N4\npush_string\n" id="3221"]
3222 [label="3222 @ N5\npush_string\n" id="3222"]
3223 [label="3223 @ N6\npush_string\n" id="3223"]
3224 [label="3224 @ N7\npush_string\n" id="3224"]
3225 [label="3225 @ N0\npush_string exit\n" id="3225"]
3226 [label="3226 @ N79\ncpio_mkslink\n" id="3226"]
3227 [label="3227 @ N10\npush_pad entry\n" id="3227"]
3228 [label="3228 @ N11\npush_pad\n" id="3228"]
3230 [fillcolor="cornflowerblue" label="3230 @ N12\npush_pad\nAbstractionState: ABS133" id="3230"]
3232 [label="3232 @ N13\npush_pad\n" id="3232"]
3233 [label="3233 @ N15\npush_pad\n" id="3233"]
3235 [fillcolor="green" label="3235 @ N12\npush_pad\nAbstractionState: ABS134" id="3235"]
3231 [label="3231 @ N14\npush_pad\n" id="3231"]
3236 [label="3236 @ N9\npush_pad exit\n" id="3236"]
3237 [label="3237 @ N80\ncpio_mkslink\n" id="3237"]
3238 [label="3238 @ N1\npush_string entry\n" id="3238"]
3239 [label="3239 @ N2\npush_string\n" id="3239"]
3240 [label="3240 @ N3\npush_string\n" id="3240"]
3241 [label="3241 @ N4\npush_string\n" id="3241"]
3242 [label="3242 @ N5\npush_string\n" id="3242"]
3243 [label="3243 @ N6\npush_string\n" id="3243"]
3244 [label="3244 @ N7\npush_string\n" id="3244"]
3245 [label="3245 @ N0\npush_string exit\n" id="3245"]
3246 [label="3246 @ N81\ncpio_mkslink\n" id="3246"]
3247 [label="3247 @ N10\npush_pad entry\n" id="3247"]
3248 [label="3248 @ N11\npush_pad\n" id="3248"]
3250 [fillcolor="cornflowerblue" label="3250 @ N12\npush_pad\nAbstractionState: ABS135" id="3250"]
3252 [label="3252 @ N13\npush_pad\n" id="3252"]
3253 [label="3253 @ N15\npush_pad\n" id="3253"]
3255 [fillcolor="green" label="3255 @ N12\npush_pad\nAbstractionState: ABS136" id="3255"]
3251 [label="3251 @ N14\npush_pad\n" id="3251"]
3256 [label="3256 @ N9\npush_pad exit\n" id="3256"]
3257 [label="3257 @ N82\ncpio_mkslink\n" id="3257"]
3258 [label="3258 @ N62\ncpio_mkslink exit\n" id="3258"]
3259 [label="3259 @ N99\ncpio_mkslink_line\n" id="3259"]
3260 [label="3260 @ N100\ncpio_mkslink_line\n" id="3260"]
3263 [label="3263 @ N84\ncpio_mkslink_line exit\n" id="3263"]
3265 [label="3265 @ N509\nmain\n" id="3265"]
3267 [label="3267 @ N487\nmain\n" id="3267"]
3651 [label="3651 @ N485\nmain\n" id="3651"]
3666 [label="3666 @ N479\nmain\n" id="3666"]
3706 [label="3706 @ N491\nmain\n" id="3706"]
3724 [fillcolor="green" label="3724 @ N442\nmain\nAbstractionState: ABS153" id="3724"]
3678 [label="3678 @ N492\nmain\n" id="3678"]
3694 [label="3694 @ N493\nmain\n" id="3694"]
3615 [label="3615 @ N486\nmain\n" id="3615"]
3630 [label="3630 @ N488\nmain\n" id="3630"]
3639 [label="3639 @ N489\nmain\n" id="3639"]
3204 [label="3204 @ N67\ncpio_mkslink\n" id="3204"]
3199 [label="3199 @ N94\ncpio_mkslink_line\n" id="3199"]
3261 [label="3261 @ N97\ncpio_mkslink_line\n" id="3261"]
3262 [label="3262 @ N100\ncpio_mkslink_line\n" id="3262"]
3264 [label="3264 @ N84\ncpio_mkslink_line exit\n" id="3264"]
3266 [label="3266 @ N509\nmain\n" id="3266"]
3072 [label="3072 @ N504\nmain\n" id="3072"]
3270 [label="3270 @ N303\ncpio_mkfile_line entry\n" id="3270"]
3271 [label="3271 @ N304\ncpio_mkfile_line\n" id="3271"]
3272 [label="3272 @ N317\ncpio_mkfile_line\n" id="3272"]
3273 [label="3273 @ N318\ncpio_mkfile_line\n" id="3273"]
3275 [label="3275 @ N315\ncpio_mkfile_line\n" id="3275"]
3282 [label="3282 @ N323\ncpio_mkfile_line\n" id="3282"]
3300 [label="3300 @ N321\ncpio_mkfile_line\n" id="3300"]
3301 [label="3301 @ N365\ncpio_mkfile_line\n" id="3301"]
3302 [label="3302 @ N280\ncpio_replace_env entry\n" id="3302"]
3303 [label="3303 @ N281\ncpio_replace_env\n" id="3303"]
4706 [fillcolor="cornflowerblue" label="4706 @ N286\ncpio_replace_env\nAbstractionState: ABS203" id="4706"]
4707 [label="4707 @ N290\ncpio_replace_env\n" id="4707"]
4713 [label="4713 @ N288\ncpio_replace_env\n" id="4713"]
4726 [label="4726 @ N279\ncpio_replace_env exit\n" id="4726"]
4727 [label="4727 @ N366\ncpio_mkfile_line\n" id="4727"]
4728 [label="4728 @ N198\ncpio_mkfile entry\n" id="4728"]
4729 [label="4729 @ N199\ncpio_mkfile\n" id="4729"]
4730 [label="4730 @ N209\ncpio_mkfile\n" id="4730"]
4731 [label="4731 @ N210\ncpio_mkfile\n" id="4731"]
4733 [label="4733 @ N211\ncpio_mkfile\n" id="4733"]
4734 [label="4734 @ N215\ncpio_mkfile\n" id="4734"]
4736 [label="4736 @ N217\ncpio_mkfile\n" id="4736"]
4737 [label="4737 @ N218\ncpio_mkfile\n" id="4737"]
4889 [label="4889 @ N270\ncpio_mkfile\n" id="4889"]
4914 [label="4914 @ N271\ncpio_mkfile\n" id="4914"]
4939 [label="4939 @ N275\ncpio_mkfile\n" id="4939"]
4944 [label="4944 @ N197\ncpio_mkfile exit\n" id="4944"]
4949 [label="4949 @ N367\ncpio_mkfile_line\n" id="4949"]
4954 [label="4954 @ N368\ncpio_mkfile_line\n" id="4954"]
4979 [label="4979 @ N369\ncpio_mkfile_line\n" id="4979"]
4984 [label="4984 @ N302\ncpio_mkfile_line exit\n" id="4984"]
4989 [label="4989 @ N506\nmain\n" id="4989"]
4994 [label="4994 @ N487\nmain\n" id="4994"]
5024 [label="5024 @ N485\nmain\n" id="5024"]
5029 [label="5029 @ N479\nmain\n" id="5029"]
5054 [label="5054 @ N491\nmain\n" id="5054"]
5064 [fillcolor="green" label="5064 @ N442\nmain\nAbstractionState: ABS222" id="5064"]
5038 [label="5038 @ N492\nmain\n" id="5038"]
5044 [label="5044 @ N493\nmain\n" id="5044"]
5004 [label="5004 @ N486\nmain\n" id="5004"]
5009 [label="5009 @ N488\nmain\n" id="5009"]
5014 [label="5014 @ N489\nmain\n" id="5014"]
4964 [label="4964 @ N370\ncpio_mkfile_line\n" id="4964"]
4969 [label="4969 @ N371\ncpio_mkfile_line\n" id="4969"]
4923 [label="4923 @ N276\ncpio_mkfile\n" id="4923"]
4929 [label="4929 @ N277\ncpio_mkfile\n" id="4929"]
4899 [label="4899 @ N272\ncpio_mkfile\n" id="4899"]
4904 [label="4904 @ N273\ncpio_mkfile\n" id="4904"]
4735 [label="4735 @ N216\ncpio_mkfile\n" id="4735"]
4739 [label="4739 @ N220\ncpio_mkfile\n" id="4739"]
4740 [label="4740 @ N221\ncpio_mkfile\n" id="4740"]
4742 [label="4742 @ N223\ncpio_mkfile\n" id="4742"]
4741 [label="4741 @ N222\ncpio_mkfile\n" id="4741"]
4743 [label="4743 @ N224\ncpio_mkfile\n" id="4743"]
4745 [label="4745 @ N225\ncpio_mkfile\n" id="4745"]
4746 [label="4746 @ N229\ncpio_mkfile\n" id="4746"]
4748 [label="4748 @ N230\ncpio_mkfile\n" id="4748"]
4750 [fillcolor="cornflowerblue" label="4750 @ N236\ncpio_mkfile\nAbstractionState: ABS205" id="4750"]
4752 [label="4752 @ N239\ncpio_mkfile\n" id="4752"]
4753 [label="4753 @ N270\ncpio_mkfile\n" id="4753"]
4906 [label="4906 @ N271\ncpio_mkfile\n" id="4906"]
4931 [label="4931 @ N275\ncpio_mkfile\n" id="4931"]
4940 [label="4940 @ N197\ncpio_mkfile exit\n" id="4940"]
4945 [label="4945 @ N367\ncpio_mkfile_line\n" id="4945"]
4950 [label="4950 @ N368\ncpio_mkfile_line\n" id="4950"]
4971 [label="4971 @ N369\ncpio_mkfile_line\n" id="4971"]
4980 [label="4980 @ N302\ncpio_mkfile_line exit\n" id="4980"]
4985 [label="4985 @ N506\nmain\n" id="4985"]
4990 [label="4990 @ N487\nmain\n" id="4990"]
5016 [label="5016 @ N485\nmain\n" id="5016"]
5025 [label="5025 @ N479\nmain\n" id="5025"]
5046 [label="5046 @ N491\nmain\n" id="5046"]
5056 [fillcolor="cornflowerblue" label="5056 @ N442\nmain\nAbstractionState: ABS218: false" id="5056"]
5030 [label="5030 @ N492\nmain\n" id="5030"]
5040 [label="5040 @ N493\nmain\n" id="5040"]
4996 [label="4996 @ N486\nmain\n" id="4996"]
5005 [label="5005 @ N488\nmain\n" id="5005"]
5010 [label="5010 @ N489\nmain\n" id="5010"]
4956 [label="4956 @ N370\ncpio_mkfile_line\n" id="4956"]
4965 [label="4965 @ N371\ncpio_mkfile_line\n" id="4965"]
4915 [label="4915 @ N276\ncpio_mkfile\n" id="4915"]
4925 [label="4925 @ N277\ncpio_mkfile\n" id="4925"]
4891 [label="4891 @ N272\ncpio_mkfile\n" id="4891"]
4900 [label="4900 @ N273\ncpio_mkfile\n" id="4900"]
4751 [label="4751 @ N238\ncpio_mkfile\n" id="4751"]
4757 [label="4757 @ N240\ncpio_mkfile\n" id="4757"]
4761 [label="4761 @ N243\ncpio_mkfile\n" id="4761"]
4762 [label="4762 @ N248\ncpio_mkfile\n" id="4762"]
4763 [label="4763 @ N249\ncpio_mkfile\n" id="4763"]
4764 [label="4764 @ N250\ncpio_mkfile\n" id="4764"]
4765 [label="4765 @ N251\ncpio_mkfile\n" id="4765"]
4766 [label="4766 @ N41\npush_hdr entry\n" id="4766"]
4767 [label="4767 @ N42\npush_hdr\n" id="4767"]
4768 [label="4768 @ N43\npush_hdr\n" id="4768"]
4769 [label="4769 @ N40\npush_hdr exit\n" id="4769"]
4770 [label="4770 @ N252\ncpio_mkfile\n" id="4770"]
4771 [label="4771 @ N1\npush_string entry\n" id="4771"]
4772 [label="4772 @ N2\npush_string\n" id="4772"]
4773 [label="4773 @ N3\npush_string\n" id="4773"]
4774 [label="4774 @ N4\npush_string\n" id="4774"]
4775 [label="4775 @ N5\npush_string\n" id="4775"]
4776 [label="4776 @ N6\npush_string\n" id="4776"]
4777 [label="4777 @ N7\npush_string\n" id="4777"]
4778 [label="4778 @ N0\npush_string exit\n" id="4778"]
4779 [label="4779 @ N253\ncpio_mkfile\n" id="4779"]
4780 [label="4780 @ N10\npush_pad entry\n" id="4780"]
4781 [label="4781 @ N11\npush_pad\n" id="4781"]
4783 [fillcolor="cornflowerblue" label="4783 @ N12\npush_pad\nAbstractionState: ABS206" id="4783"]
4785 [label="4785 @ N13\npush_pad\n" id="4785"]
4786 [label="4786 @ N15\npush_pad\n" id="4786"]
4788 [fillcolor="green" label="4788 @ N12\npush_pad\nAbstractionState: ABS207" id="4788"]
4784 [label="4784 @ N14\npush_pad\n" id="4784"]
4789 [label="4789 @ N9\npush_pad exit\n" id="4789"]
4790 [label="4790 @ N254\ncpio_mkfile\n" id="4790"]
4792 [label="4792 @ N256\ncpio_mkfile\n" id="4792"]
4793 [label="4793 @ N259\ncpio_mkfile\n" id="4793"]
4794 [label="4794 @ N260\ncpio_mkfile\n" id="4794"]
4796 [label="4796 @ N257\ncpio_mkfile\n" id="4796"]
4797 [label="4797 @ N263\ncpio_mkfile\n" id="4797"]
4798 [label="4798 @ N10\npush_pad entry\n" id="4798"]
4799 [label="4799 @ N11\npush_pad\n" id="4799"]
4801 [fillcolor="cornflowerblue" label="4801 @ N12\npush_pad\nAbstractionState: ABS208" id="4801"]
4803 [label="4803 @ N13\npush_pad\n" id="4803"]
4804 [label="4804 @ N15\npush_pad\n" id="4804"]
4806 [fillcolor="green" label="4806 @ N12\npush_pad\nAbstractionState: ABS209" id="4806"]
4802 [label="4802 @ N14\npush_pad\n" id="4802"]
4807 [label="4807 @ N9\npush_pad exit\n" id="4807"]
4808 [label="4808 @ N264\ncpio_mkfile\n" id="4808"]
4809 [label="4809 @ N255\ncpio_mkfile\n" id="4809"]
4876 [fillcolor="green" label="4876 @ N236\ncpio_mkfile\nAbstractionState: ABS215" id="4876"]
4795 [label="4795 @ N258\ncpio_mkfile\n" id="4795"]
4810 [label="4810 @ N261\ncpio_mkfile\n" id="4810"]
4811 [label="4811 @ N270\ncpio_mkfile\n" id="4811"]
4908 [label="4908 @ N271\ncpio_mkfile\n" id="4908"]
4933 [label="4933 @ N275\ncpio_mkfile\n" id="4933"]
4941 [label="4941 @ N197\ncpio_mkfile exit\n" id="4941"]
4946 [label="4946 @ N367\ncpio_mkfile_line\n" id="4946"]
4951 [label="4951 @ N368\ncpio_mkfile_line\n" id="4951"]
4973 [label="4973 @ N369\ncpio_mkfile_line\n" id="4973"]
4981 [label="4981 @ N302\ncpio_mkfile_line exit\n" id="4981"]
4986 [label="4986 @ N506\nmain\n" id="4986"]
4991 [label="4991 @ N487\nmain\n" id="4991"]
5018 [label="5018 @ N485\nmain\n" id="5018"]
5026 [label="5026 @ N479\nmain\n" id="5026"]
5048 [label="5048 @ N491\nmain\n" id="5048"]
5058 [fillcolor="green" label="5058 @ N442\nmain\nAbstractionState: ABS219" id="5058"]
5032 [label="5032 @ N492\nmain\n" id="5032"]
5041 [label="5041 @ N493\nmain\n" id="5041"]
4998 [label="4998 @ N486\nmain\n" id="4998"]
5006 [label="5006 @ N488\nmain\n" id="5006"]
5011 [label="5011 @ N489\nmain\n" id="5011"]
4958 [label="4958 @ N370\ncpio_mkfile_line\n" id="4958"]
4966 [label="4966 @ N371\ncpio_mkfile_line\n" id="4966"]
4917 [label="4917 @ N276\ncpio_mkfile\n" id="4917"]
4926 [label="4926 @ N277\ncpio_mkfile\n" id="4926"]
4893 [label="4893 @ N272\ncpio_mkfile\n" id="4893"]
4901 [label="4901 @ N273\ncpio_mkfile\n" id="4901"]
4791 [label="4791 @ N255\ncpio_mkfile\n" id="4791"]
4813 [fillcolor="cornflowerblue" label="4813 @ N236\ncpio_mkfile\nAbstractionState: ABS210" id="4813"]
4815 [label="4815 @ N239\ncpio_mkfile\n" id="4815"]
4816 [label="4816 @ N270\ncpio_mkfile\n" id="4816"]
4910 [label="4910 @ N271\ncpio_mkfile\n" id="4910"]
4935 [label="4935 @ N275\ncpio_mkfile\n" id="4935"]
4942 [label="4942 @ N197\ncpio_mkfile exit\n" id="4942"]
4947 [label="4947 @ N367\ncpio_mkfile_line\n" id="4947"]
4952 [label="4952 @ N368\ncpio_mkfile_line\n" id="4952"]
4975 [label="4975 @ N369\ncpio_mkfile_line\n" id="4975"]
4982 [label="4982 @ N302\ncpio_mkfile_line exit\n" id="4982"]
4987 [label="4987 @ N506\nmain\n" id="4987"]
4992 [label="4992 @ N487\nmain\n" id="4992"]
5020 [label="5020 @ N485\nmain\n" id="5020"]
5027 [label="5027 @ N479\nmain\n" id="5027"]
5050 [label="5050 @ N491\nmain\n" id="5050"]
5060 [fillcolor="green" label="5060 @ N442\nmain\nAbstractionState: ABS220" id="5060"]
5034 [label="5034 @ N492\nmain\n" id="5034"]
5042 [label="5042 @ N493\nmain\n" id="5042"]
5000 [label="5000 @ N486\nmain\n" id="5000"]
5007 [label="5007 @ N488\nmain\n" id="5007"]
5012 [label="5012 @ N489\nmain\n" id="5012"]
4960 [label="4960 @ N370\ncpio_mkfile_line\n" id="4960"]
4967 [label="4967 @ N371\ncpio_mkfile_line\n" id="4967"]
4919 [label="4919 @ N276\ncpio_mkfile\n" id="4919"]
4927 [label="4927 @ N277\ncpio_mkfile\n" id="4927"]
4895 [label="4895 @ N272\ncpio_mkfile\n" id="4895"]
4902 [label="4902 @ N273\ncpio_mkfile\n" id="4902"]
4814 [label="4814 @ N238\ncpio_mkfile\n" id="4814"]
4820 [label="4820 @ N240\ncpio_mkfile\n" id="4820"]
4824 [label="4824 @ N243\ncpio_mkfile\n" id="4824"]
4825 [label="4825 @ N248\ncpio_mkfile\n" id="4825"]
4826 [label="4826 @ N249\ncpio_mkfile\n" id="4826"]
4827 [label="4827 @ N250\ncpio_mkfile\n" id="4827"]
4828 [label="4828 @ N251\ncpio_mkfile\n" id="4828"]
4829 [label="4829 @ N41\npush_hdr entry\n" id="4829"]
4830 [label="4830 @ N42\npush_hdr\n" id="4830"]
4831 [label="4831 @ N43\npush_hdr\n" id="4831"]
4832 [label="4832 @ N40\npush_hdr exit\n" id="4832"]
4833 [label="4833 @ N252\ncpio_mkfile\n" id="4833"]
4834 [label="4834 @ N1\npush_string entry\n" id="4834"]
4835 [label="4835 @ N2\npush_string\n" id="4835"]
4836 [label="4836 @ N3\npush_string\n" id="4836"]
4837 [label="4837 @ N4\npush_string\n" id="4837"]
4838 [label="4838 @ N5\npush_string\n" id="4838"]
4839 [label="4839 @ N6\npush_string\n" id="4839"]
4840 [label="4840 @ N7\npush_string\n" id="4840"]
4841 [label="4841 @ N0\npush_string exit\n" id="4841"]
4842 [label="4842 @ N253\ncpio_mkfile\n" id="4842"]
4843 [label="4843 @ N10\npush_pad entry\n" id="4843"]
4844 [label="4844 @ N11\npush_pad\n" id="4844"]
4846 [fillcolor="cornflowerblue" label="4846 @ N12\npush_pad\nAbstractionState: ABS211" id="4846"]
4848 [label="4848 @ N13\npush_pad\n" id="4848"]
4849 [label="4849 @ N15\npush_pad\n" id="4849"]
4851 [fillcolor="green" label="4851 @ N12\npush_pad\nAbstractionState: ABS212" id="4851"]
4847 [label="4847 @ N14\npush_pad\n" id="4847"]
4852 [label="4852 @ N9\npush_pad exit\n" id="4852"]
4853 [label="4853 @ N254\ncpio_mkfile\n" id="4853"]
4855 [label="4855 @ N256\ncpio_mkfile\n" id="4855"]
4856 [label="4856 @ N259\ncpio_mkfile\n" id="4856"]
4857 [label="4857 @ N260\ncpio_mkfile\n" id="4857"]
4859 [label="4859 @ N257\ncpio_mkfile\n" id="4859"]
4860 [label="4860 @ N263\ncpio_mkfile\n" id="4860"]
4861 [label="4861 @ N10\npush_pad entry\n" id="4861"]
4862 [label="4862 @ N11\npush_pad\n" id="4862"]
4864 [fillcolor="cornflowerblue" label="4864 @ N12\npush_pad\nAbstractionState: ABS213" id="4864"]
4866 [label="4866 @ N13\npush_pad\n" id="4866"]
4867 [label="4867 @ N15\npush_pad\n" id="4867"]
4869 [fillcolor="green" label="4869 @ N12\npush_pad\nAbstractionState: ABS214" id="4869"]
4865 [label="4865 @ N14\npush_pad\n" id="4865"]
4870 [label="4870 @ N9\npush_pad exit\n" id="4870"]
4871 [label="4871 @ N264\ncpio_mkfile\n" id="4871"]
4872 [label="4872 @ N255\ncpio_mkfile\n" id="4872"]
4880 [fillcolor="green" label="4880 @ N236\ncpio_mkfile\nAbstractionState: ABS217" id="4880"]
4858 [label="4858 @ N258\ncpio_mkfile\n" id="4858"]
4873 [label="4873 @ N261\ncpio_mkfile\n" id="4873"]
4874 [label="4874 @ N270\ncpio_mkfile\n" id="4874"]
4912 [label="4912 @ N271\ncpio_mkfile\n" id="4912"]
4937 [label="4937 @ N275\ncpio_mkfile\n" id="4937"]
4943 [label="4943 @ N197\ncpio_mkfile exit\n" id="4943"]
4948 [label="4948 @ N367\ncpio_mkfile_line\n" id="4948"]
4953 [label="4953 @ N368\ncpio_mkfile_line\n" id="4953"]
4977 [label="4977 @ N369\ncpio_mkfile_line\n" id="4977"]
4983 [label="4983 @ N302\ncpio_mkfile_line exit\n" id="4983"]
4988 [label="4988 @ N506\nmain\n" id="4988"]
4993 [label="4993 @ N487\nmain\n" id="4993"]
5022 [label="5022 @ N485\nmain\n" id="5022"]
5028 [label="5028 @ N479\nmain\n" id="5028"]
5052 [label="5052 @ N491\nmain\n" id="5052"]
5062 [fillcolor="green" label="5062 @ N442\nmain\nAbstractionState: ABS221" id="5062"]
5036 [label="5036 @ N492\nmain\n" id="5036"]
5043 [label="5043 @ N493\nmain\n" id="5043"]
5002 [label="5002 @ N486\nmain\n" id="5002"]
5008 [label="5008 @ N488\nmain\n" id="5008"]
5013 [label="5013 @ N489\nmain\n" id="5013"]
4962 [label="4962 @ N370\ncpio_mkfile_line\n" id="4962"]
4968 [label="4968 @ N371\ncpio_mkfile_line\n" id="4968"]
4921 [label="4921 @ N276\ncpio_mkfile\n" id="4921"]
4928 [label="4928 @ N277\ncpio_mkfile\n" id="4928"]
4897 [label="4897 @ N272\ncpio_mkfile\n" id="4897"]
4903 [label="4903 @ N273\ncpio_mkfile\n" id="4903"]
4854 [label="4854 @ N255\ncpio_mkfile\n" id="4854"]
4878 [fillcolor="green" label="4878 @ N236\ncpio_mkfile\nAbstractionState: ABS216" id="4878"]
4821 [label="4821 @ N244\ncpio_mkfile\n" id="4821"]
4817 [label="4817 @ N241\ncpio_mkfile\n" id="4817"]
4758 [label="4758 @ N244\ncpio_mkfile\n" id="4758"]
4754 [label="4754 @ N241\ncpio_mkfile\n" id="4754"]
4747 [label="4747 @ N231\ncpio_mkfile\n" id="4747"]
4881 [label="4881 @ N232\ncpio_mkfile\n" id="4881"]
4744 [label="4744 @ N226\ncpio_mkfile\n" id="4744"]
4884 [label="4884 @ N227\ncpio_mkfile\n" id="4884"]
4732 [label="4732 @ N212\ncpio_mkfile\n" id="4732"]
4887 [label="4887 @ N213\ncpio_mkfile\n" id="4887"]
4709 [label="4709 @ N289\ncpio_replace_env\n" id="4709"]
4710 [label="4710 @ N291\ncpio_replace_env\n" id="4710"]
4712 [label="4712 @ N287\ncpio_replace_env\n" id="4712"]
4714 [label="4714 @ N293\ncpio_replace_env\n" id="4714"]
4715 [label="4715 @ N294\ncpio_replace_env\n" id="4715"]
4716 [label="4716 @ N295\ncpio_replace_env\n" id="4716"]
4718 [label="4718 @ N296\ncpio_replace_env\n" id="4718"]
4721 [label="4721 @ N298\ncpio_replace_env\n" id="4721"]
4722 [label="4722 @ N299\ncpio_replace_env\n" id="4722"]
4723 [label="4723 @ N300\ncpio_replace_env\n" id="4723"]
4725 [fillcolor="green" label="4725 @ N286\ncpio_replace_env\nAbstractionState: ABS204" id="4725"]
4717 [label="4717 @ N297\ncpio_replace_env\n" id="4717"]
3277 [label="3277 @ N324\ncpio_mkfile_line\n" id="3277"]
3278 [label="3278 @ N325\ncpio_mkfile_line\n" id="3278"]
3279 [label="3279 @ N326\ncpio_mkfile_line\n" id="3279"]
3281 [label="3281 @ N322\ncpio_mkfile_line\n" id="3281"]
3283 [label="3283 @ N329\ncpio_mkfile_line\n" id="3283"]
3284 [label="3284 @ N330\ncpio_mkfile_line\n" id="3284"]
3285 [label="3285 @ N331\ncpio_mkfile_line\n" id="3285"]
3286 [label="3286 @ N332\ncpio_mkfile_line\n" id="3286"]
3288 [label="3288 @ N334\ncpio_mkfile_line\n" id="3288"]
3287 [label="3287 @ N333\ncpio_mkfile_line\n" id="3287"]
3289 [label="3289 @ N335\ncpio_mkfile_line\n" id="3289"]
3291 [label="3291 @ N336\ncpio_mkfile_line\n" id="3291"]
3292 [label="3292 @ N340\ncpio_mkfile_line\n" id="3292"]
3293 [label="3293 @ N341\ncpio_mkfile_line\n" id="3293"]
3294 [label="3294 @ N342\ncpio_mkfile_line\n" id="3294"]
3295 [label="3295 @ N343\ncpio_mkfile_line\n" id="3295"]
3297 [fillcolor="cornflowerblue" label="3297 @ N345\ncpio_mkfile_line\nAbstractionState: ABS137: false" id="3297"]
3290 [label="3290 @ N337\ncpio_mkfile_line\n" id="3290"]
3298 [label="3298 @ N338\ncpio_mkfile_line\n" id="3298"]
3465 [label="3465 @ N368\ncpio_mkfile_line\n" id="3465"]
3485 [label="3485 @ N369\ncpio_mkfile_line\n" id="3485"]
3489 [label="3489 @ N302\ncpio_mkfile_line exit\n" id="3489"]
3493 [label="3493 @ N506\nmain\n" id="3493"]
3473 [label="3473 @ N370\ncpio_mkfile_line\n" id="3473"]
3477 [label="3477 @ N371\ncpio_mkfile_line\n" id="3477"]
3274 [label="3274 @ N316\ncpio_mkfile_line\n" id="3274"]
3463 [label="3463 @ N319\ncpio_mkfile_line\n" id="3463"]
3070 [label="3070 @ N501\nmain\n" id="3070"]
3499 [label="3499 @ N144\ncpio_mkpipe_line entry\n" id="3499"]
3500 [label="3500 @ N145\ncpio_mkpipe_line\n" id="3500"]
3501 [label="3501 @ N146\ncpio_mkpipe_line\n" id="3501"]
3502 [label="3502 @ N120\ncpio_mkgeneric_line entry\n" id="3502"]
3503 [label="3503 @ N121\ncpio_mkgeneric_line\n" id="3503"]
3504 [label="3504 @ N129\ncpio_mkgeneric_line\n" id="3504"]
3505 [label="3505 @ N130\ncpio_mkgeneric_line\n" id="3505"]
3507 [label="3507 @ N127\ncpio_mkgeneric_line\n" id="3507"]
3508 [label="3508 @ N133\ncpio_mkgeneric_line\n" id="3508"]
3509 [label="3509 @ N103\ncpio_mkgeneric entry\n" id="3509"]
3510 [label="3510 @ N104\ncpio_mkgeneric\n" id="3510"]
3511 [label="3511 @ N105\ncpio_mkgeneric\n" id="3511"]
3515 [label="3515 @ N106\ncpio_mkgeneric\n" id="3515"]
3516 [label="3516 @ N113\ncpio_mkgeneric\n" id="3516"]
3517 [label="3517 @ N114\ncpio_mkgeneric\n" id="3517"]
3518 [label="3518 @ N115\ncpio_mkgeneric\n" id="3518"]
3519 [label="3519 @ N41\npush_hdr entry\n" id="3519"]
3520 [label="3520 @ N42\npush_hdr\n" id="3520"]
3521 [label="3521 @ N43\npush_hdr\n" id="3521"]
3522 [label="3522 @ N40\npush_hdr exit\n" id="3522"]
3523 [label="3523 @ N116\ncpio_mkgeneric\n" id="3523"]
3524 [label="3524 @ N20\npush_rest entry\n" id="3524"]
3525 [label="3525 @ N21\npush_rest\n" id="3525"]
3526 [label="3526 @ N22\npush_rest\n" id="3526"]
3527 [label="3527 @ N23\npush_rest\n" id="3527"]
3528 [label="3528 @ N25\npush_rest\n" id="3528"]
3529 [label="3529 @ N26\npush_rest\n" id="3529"]
3530 [label="3530 @ N27\npush_rest\n" id="3530"]
3532 [fillcolor="cornflowerblue" label="3532 @ N30\npush_rest\nAbstractionState: ABS147" id="3532"]
3534 [label="3534 @ N31\npush_rest\n" id="3534"]
3535 [label="3535 @ N33\npush_rest\n" id="3535"]
3537 [fillcolor="green" label="3537 @ N30\npush_rest\nAbstractionState: ABS148" id="3537"]
3533 [label="3533 @ N32\npush_rest\n" id="3533"]
3538 [label="3538 @ N19\npush_rest exit\n" id="3538"]
3539 [label="3539 @ N117\ncpio_mkgeneric\n" id="3539"]
3540 [label="3540 @ N102\ncpio_mkgeneric exit\n" id="3540"]
3541 [label="3541 @ N134\ncpio_mkgeneric_line\n" id="3541"]
3542 [label="3542 @ N135\ncpio_mkgeneric_line\n" id="3542"]
3545 [label="3545 @ N119\ncpio_mkgeneric_line exit\n" id="3545"]
3547 [label="3547 @ N147\ncpio_mkpipe_line\n" id="3547"]
3549 [label="3549 @ N143\ncpio_mkpipe_line exit\n" id="3549"]
3551 [label="3551 @ N503\nmain\n" id="3551"]
3553 [label="3553 @ N487\nmain\n" id="3553"]
3659 [label="3659 @ N485\nmain\n" id="3659"]
3670 [label="3670 @ N479\nmain\n" id="3670"]
3714 [label="3714 @ N491\nmain\n" id="3714"]
4387 [fillcolor="green" label="4387 @ N442\nmain\nAbstractionState: ABS184" id="4387"]
3686 [label="3686 @ N492\nmain\n" id="3686"]
3698 [label="3698 @ N493\nmain\n" id="3698"]
3623 [label="3623 @ N486\nmain\n" id="3623"]
3634 [label="3634 @ N488\nmain\n" id="3634"]
3643 [label="3643 @ N489\nmain\n" id="3643"]
3512 [label="3512 @ N107\ncpio_mkgeneric\n" id="3512"]
3506 [label="3506 @ N128\ncpio_mkgeneric_line\n" id="3506"]
3543 [label="3543 @ N131\ncpio_mkgeneric_line\n" id="3543"]
3544 [label="3544 @ N135\ncpio_mkgeneric_line\n" id="3544"]
3546 [label="3546 @ N119\ncpio_mkgeneric_line exit\n" id="3546"]
3548 [label="3548 @ N147\ncpio_mkpipe_line\n" id="3548"]
3550 [label="3550 @ N143\ncpio_mkpipe_line exit\n" id="3550"]
3552 [label="3552 @ N503\nmain\n" id="3552"]
3068 [label="3068 @ N498\nmain\n" id="3068"]
3556 [label="3556 @ N178\ncpio_mknod_line entry\n" id="3556"]
3557 [label="3557 @ N179\ncpio_mknod_line\n" id="3557"]
3558 [label="3558 @ N190\ncpio_mknod_line\n" id="3558"]
3559 [label="3559 @ N191\ncpio_mknod_line\n" id="3559"]
3561 [label="3561 @ N188\ncpio_mknod_line\n" id="3561"]
3562 [label="3562 @ N156\ncpio_mknod entry\n" id="3562"]
3563 [label="3563 @ N157\ncpio_mknod\n" id="3563"]
3564 [label="3564 @ N158\ncpio_mknod\n" id="3564"]
3566 [label="3566 @ N161\ncpio_mknod\n" id="3566"]
3569 [label="3569 @ N159\ncpio_mknod\n" id="3569"]
3573 [label="3573 @ N164\ncpio_mknod\n" id="3573"]
3574 [label="3574 @ N171\ncpio_mknod\n" id="3574"]
3575 [label="3575 @ N172\ncpio_mknod\n" id="3575"]
3576 [label="3576 @ N173\ncpio_mknod\n" id="3576"]
3577 [label="3577 @ N41\npush_hdr entry\n" id="3577"]
3578 [label="3578 @ N42\npush_hdr\n" id="3578"]
3579 [label="3579 @ N43\npush_hdr\n" id="3579"]
3580 [label="3580 @ N40\npush_hdr exit\n" id="3580"]
3581 [label="3581 @ N174\ncpio_mknod\n" id="3581"]
3582 [label="3582 @ N20\npush_rest entry\n" id="3582"]
3583 [label="3583 @ N21\npush_rest\n" id="3583"]
3584 [label="3584 @ N22\npush_rest\n" id="3584"]
3585 [label="3585 @ N23\npush_rest\n" id="3585"]
3586 [label="3586 @ N25\npush_rest\n" id="3586"]
3587 [label="3587 @ N26\npush_rest\n" id="3587"]
3588 [label="3588 @ N27\npush_rest\n" id="3588"]
3590 [fillcolor="cornflowerblue" label="3590 @ N30\npush_rest\nAbstractionState: ABS149" id="3590"]
3592 [label="3592 @ N31\npush_rest\n" id="3592"]
3593 [label="3593 @ N33\npush_rest\n" id="3593"]
3595 [fillcolor="green" label="3595 @ N30\npush_rest\nAbstractionState: ABS150" id="3595"]
3591 [label="3591 @ N32\npush_rest\n" id="3591"]
3596 [label="3596 @ N19\npush_rest exit\n" id="3596"]
3597 [label="3597 @ N175\ncpio_mknod\n" id="3597"]
3598 [label="3598 @ N155\ncpio_mknod exit\n" id="3598"]
3599 [label="3599 @ N194\ncpio_mknod_line\n" id="3599"]
3600 [label="3600 @ N195\ncpio_mknod_line\n" id="3600"]
3603 [label="3603 @ N177\ncpio_mknod_line exit\n" id="3603"]
3605 [label="3605 @ N500\nmain\n" id="3605"]
3607 [label="3607 @ N487\nmain\n" id="3607"]
3661 [label="3661 @ N485\nmain\n" id="3661"]
3671 [label="3671 @ N479\nmain\n" id="3671"]
3716 [label="3716 @ N491\nmain\n" id="3716"]
4389 [fillcolor="green" label="4389 @ N442\nmain\nAbstractionState: ABS185" id="4389"]
3688 [label="3688 @ N492\nmain\n" id="3688"]
3699 [label="3699 @ N493\nmain\n" id="3699"]
3625 [label="3625 @ N486\nmain\n" id="3625"]
3635 [label="3635 @ N488\nmain\n" id="3635"]
3644 [label="3644 @ N489\nmain\n" id="3644"]
3570 [label="3570 @ N165\ncpio_mknod\n" id="3570"]
3565 [label="3565 @ N160\ncpio_mknod\n" id="3565"]
3560 [label="3560 @ N189\ncpio_mknod_line\n" id="3560"]
3601 [label="3601 @ N192\ncpio_mknod_line\n" id="3601"]
3602 [label="3602 @ N195\ncpio_mknod_line\n" id="3602"]
3604 [label="3604 @ N177\ncpio_mknod_line exit\n" id="3604"]
3606 [label="3606 @ N500\nmain\n" id="3606"]
3053 [label="3053 @ N471\nmain\n" id="3053"]
3055 [label="3055 @ N473\nmain\n" id="3055"]
3050 [label="3050 @ N466\nmain\n" id="3050"]
5066 [fillcolor="green" label="5066 @ N442\nmain\nAbstractionState: ABS223" id="5066"]
3046 [label="3046 @ N463\nmain\n" id="3046"]
5068 [fillcolor="green" label="5068 @ N442\nmain\nAbstractionState: ABS224" id="5068"]
3044 [label="3044 @ N457\nmain\n" id="3044"]
5069 [label="5069 @ N459\nmain\n" id="5069"]
3041 [label="3041 @ N454\nmain\n" id="3041"]
5073 [fillcolor="green" label="5073 @ N442\nmain\nAbstractionState: ABS225" id="5073"]
3017 [label="3017 @ N433\nmain\n" id="3017"]
3020 [label="3020 @ N435\nmain\n" id="3020"]
3021 [label="3021 @ N436\nmain\n" id="3021"]
3022 [label="3022 @ N437\nmain\n" id="3022"]
3023 [label="3023 @ N438\nmain\n" id="3023"]
3024 [label="3024 @ N439\nmain\n" id="3024"]
3025 [label="3025 @ N375\nusage entry\n" id="3025"]
3026 [label="3026 @ N376\nusage\n" id="3026"]
3027 [label="3027 @ N377\nusage\n" id="3027"]
3028 [label="3028 @ N374\nusage exit\n" id="3028"]
3029 [label="3029 @ N440\nmain\n" id="3029"]
3014 [label="3014 @ N427\nmain\n" id="3014"]
3005 [label="3005 @ N422\nmain\n" id="3005"]
3007 [label="3007 @ N375\nusage entry\n" id="3007"]
3008 [label="3008 @ N376\nusage\n" id="3008"]
3009 [label="3009 @ N377\nusage\n" id="3009"]
3010 [label="3010 @ N374\nusage exit\n" id="3010"]
3011 [label="3011 @ N423\nmain\n" id="3011"]
0 -> 430 [label="Line 0: INIT GLOBAL VARS" id="0 -> 430"]
430 -> 431 [label="Line 0: typedef unsigned long int size_t; typedef unsigned char __u_char; typedef unsigned short int __u_short; typedef unsigned int __u_int; typedef unsigned long int __u_long; typedef signed char __int8_t; typedef unsigned char __uint8_t; typedef signed short int __int16_t; typedef unsigned short int __uint16_t; typedef signed int __int32_t; typedef unsigned int __uint32_t; typedef signed long int __int64_t; typedef unsigned long int __uint64_t; typedef long int __quad_t; typedef unsigned long int __u_quad_t; typedef unsigned long int __dev_t; typedef unsigned int __uid_t; typedef unsigned int __gid_t; typedef unsigned long int __ino_t; typedef unsigned long int __ino64_t; typedef unsigned int __mode_t; typedef unsigned long int __nlink_t; typedef long int __off_t; typedef long int __off64_t; typedef int __pid_t; struct __anon_type_0 {   int __val[2]; } ; typedef struct __anon_type_0 __fsid_t; typedef long int __clock_t; typedef unsigned long int __rlim_t; typedef unsigned long int __rlim64_t; typedef unsigned int __id_t; typedef long int __time_t; typedef unsigned int __useconds_t; typedef long int __suseconds_t; typedef int __daddr_t; typedef long int __swblk_t; typedef int __key_t; typedef int __clockid_t; typedef void *__timer_t; typedef long int __blksize_t; typedef long int __blkcnt_t; typedef long int __blkcnt64_t; typedef unsigned long int __fsblkcnt_t; typedef unsigned long int __fsblkcnt64_t; typedef unsigned long int __fsfilcnt_t; typedef unsigned long int __fsfilcnt64_t; typedef long int __ssize_t; typedef __off64_t __loff_t; typedef __quad_t *__qaddr_t; typedef char *__caddr_t; typedef long int __intptr_t; typedef unsigned int __socklen_t; struct _IO_FILE ; typedef struct _IO_FILE FILE; typedef struct _IO_FILE __FILE; union __anon_type_1 {   unsigned int __wch;   char __wchb[4]; } ; struct __anon_type_2 {   int __count;   union __anon_type_1 __value; } ; typedef struct __anon_type_2 __mbstate_t; struct __anon_type_3 {   __off_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_3 _G_fpos_t; struct __anon_type_4 {   __off64_t __pos;   __mbstate_t __state; } ; typedef struct __anon_type_4 _G_fpos64_t; typedef int _G_int16_t; typedef int _G_int32_t; typedef unsigned int _G_uint16_t; typedef unsigned int _G_uint32_t; typedef __builtin_va_list __gnuc_va_list; struct _IO_jump_t ; typedef void _IO_lock_t; struct _IO_marker {   struct _IO_marker *_next;   struct _IO_FILE *_sbuf;   int _pos; } ; enum __codecvt_result {   __codecvt_ok = 0,   __codecvt_partial = 1,   __codecvt_error = 2,   __codecvt_noconv = 3 } ; struct _IO_FILE {   int _flags;   char *_IO_read_ptr;   char *_IO_read_end;   char *_IO_read_base;   char *_IO_write_base;   char *_IO_write_ptr;   char *_IO_write_end;   char *_IO_buf_base;   char *_IO_buf_end;   char *_IO_save_base;   char *_IO_backup_base;   char *_IO_save_end;   struct _IO_marker *_markers;   struct _IO_FILE *_chain;   int _fileno;   int _flags2;   __off_t _old_offset;   unsigned short _cur_column;   signed char _vtable_offset;   char _shortbuf[1];   _IO_lock_t *_lock;   __off64_t _offset;   void *__pad1;   void *__pad2;   void *__pad3;   void *__pad4;   size_t __pad5;   int _mode;   char _unused2[40UL]; } ; typedef struct _IO_FILE _IO_FILE; struct _IO_FILE_plus ; extern struct _IO_FILE_plus _IO_2_1_stdin_; extern struct _IO_FILE_plus _IO_2_1_stdout_; extern struct _IO_FILE_plus _IO_2_1_stderr_; typedef __ssize_t  __io_read_fn(void *__cookie, char *__buf, size_t __nbytes); typedef __ssize_t  __io_write_fn(void *__cookie, const char *__buf, size_t __n); typedef int __io_seek_fn(void *__cookie, __off64_t *__pos, int __w); typedef int __io_close_fn(void *__cookie); int __underflow(_IO_FILE *); int __uflow(_IO_FILE *); int __overflow(_IO_FILE *, int); int _IO_getc(_IO_FILE *__fp); int _IO_putc(int __c, _IO_FILE *__fp); int _IO_feof(_IO_FILE *__fp); int _IO_ferror(_IO_FILE *__fp); int _IO_peekc_locked(_IO_FILE *__fp); void _IO_flockfile(_IO_FILE *); void _IO_funlockfile(_IO_FILE *); int _IO_ftrylockfile(_IO_FILE *); int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list , int *); int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list ); __ssize_t  _IO_padn(_IO_FILE *, int, __ssize_t ); size_t  _IO_sgetn(_IO_FILE *, void *, size_t ); __off64_t  _IO_seekoff(_IO_FILE *, __off64_t , int, int); __off64_t  _IO_seekpos(_IO_FILE *, __off64_t , int); void _IO_free_backup_area(_IO_FILE *); typedef _G_fpos_t fpos_t; extern struct _IO_FILE *stdin; extern struct _IO_FILE *stdout; extern struct _IO_FILE *stderr; int remove(const char *__filename); int rename(const char *__old, const char *__new); int renameat(int __oldfd, const char *__old, int __newfd, const char *__new); FILE * tmpfile(); char * tmpnam(char *__s); char * tmpnam_r(char *__s); char * tempnam(const char *__dir, const char *__pfx); int fclose(FILE *__stream); int fflush(FILE *__stream); int fflush_unlocked(FILE *__stream); FILE * fopen(const char *__filename, const char *__modes); FILE * freopen(const char *__filename, const char *__modes, FILE *__stream); FILE * fdopen(int __fd, const char *__modes); FILE * fmemopen(void *__s, size_t __len, const char *__modes); FILE * open_memstream(char **__bufloc, size_t *__sizeloc); void setbuf(FILE *__stream, char *__buf); int setvbuf(FILE *__stream, char *__buf, int __modes, size_t __n); void setbuffer(FILE *__stream, char *__buf, size_t __size); void setlinebuf(FILE *__stream); int fprintf(FILE *__stream, const char *__format, ...); int printf(const char *__format, ...); int sprintf(char *__s, const char *__format, ...); int vfprintf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vprintf(const char *__format, __gnuc_va_list __arg); int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg); int snprintf(char *__s, size_t __maxlen, const char *__format, ...); int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg); int vdprintf(int __fd, const char *__fmt, __gnuc_va_list __arg); int dprintf(int __fd, const char *__fmt, ...); int fscanf(FILE *__stream, const char *__format, ...); int scanf(const char *__format, ...); int sscanf(const char *__s, const char *__format, ...); int vfscanf(FILE *__s, const char *__format, __gnuc_va_list __arg); int vscanf(const char *__format, __gnuc_va_list __arg); int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg); int fgetc(FILE *__stream); int getc(FILE *__stream); int getchar(); int getc_unlocked(FILE *__stream); int getchar_unlocked(); int fgetc_unlocked(FILE *__stream); int fputc(int __c, FILE *__stream); int putc(int __c, FILE *__stream); int putchar(int __c); int fputc_unlocked(int __c, FILE *__stream); int putc_unlocked(int __c, FILE *__stream); int putchar_unlocked(int __c); int getw(FILE *__stream); int putw(int __w, FILE *__stream); char * fgets(char *__s, int __n, FILE *__stream); char * gets(char *__s); __ssize_t  __getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getdelim(char **__lineptr, size_t *__n, int __delimiter, FILE *__stream); __ssize_t  getline(char **__lineptr, size_t *__n, FILE *__stream); int fputs(const char *__s, FILE *__stream); int puts(const char *__s); int ungetc(int __c, FILE *__stream); size_t  fread(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite(const void *__ptr, size_t __size, size_t __n, FILE *__s); size_t  fread_unlocked(void *__ptr, size_t __size, size_t __n, FILE *__stream); size_t  fwrite_unlocked(const void *__ptr, size_t __size, size_t __n, FILE *__stream); int fseek(FILE *__stream, long int __off, int __whence); long int ftell(FILE *__stream); void rewind(FILE *__stream); int fseeko(FILE *__stream, __off_t __off, int __whence); __off_t  ftello(FILE *__stream); int fgetpos(FILE *__stream, fpos_t *__pos); int fsetpos(FILE *__stream, const fpos_t *__pos); void clearerr(FILE *__stream); int feof(FILE *__stream); int ferror(FILE *__stream); void clearerr_unlocked(FILE *__stream); int feof_unlocked(FILE *__stream); int ferror_unlocked(FILE *__stream); void perror(const char *__s); extern int sys_nerr; extern const const char *sys_errlist[]; int fileno(FILE *__stream); int fileno_unlocked(FILE *__stream); FILE * popen(const char *__command, const char *__modes); int pclose(FILE *__stream); char * ctermid(char *__s); void flockfile(FILE *__stream); int ftrylockfile(FILE *__stream); void funlockfile(FILE *__stream); typedef int wchar_t; struct __anon_type_5 {   int quot;   int rem; } ; typedef struct __anon_type_5 div_t; struct __anon_type_6 {   long int quot;   long int rem; } ; typedef struct __anon_type_6 ldiv_t; struct __anon_type_7 {   long long int quot;   long long int rem; } ; typedef struct __anon_type_7 lldiv_t; size_t  __ctype_get_mb_cur_max(); double atof(const char *__nptr); int atoi(const char *__nptr); long int atol(const char *__nptr); long long int atoll(const char *__nptr); double strtod(const char *__nptr, char **__endptr); float strtof(const char *__nptr, char **__endptr); long double strtold(const char *__nptr, char **__endptr); long int strtol(const char *__nptr, char **__endptr, int __base); unsigned long int strtoul(const char *__nptr, char **__endptr, int __base); long long int strtoq(const char *__nptr, char **__endptr, int __base); unsigned long long int strtouq(const char *__nptr, char **__endptr, int __base); long long int strtoll(const char *__nptr, char **__endptr, int __base); unsigned long long int strtoull(const char *__nptr, char **__endptr, int __base); char * l64a(long int __n); long int a64l(const char *__s); typedef __u_char u_char; typedef __u_short u_short; typedef __u_int u_int; typedef __u_long u_long; typedef __quad_t quad_t; typedef __u_quad_t u_quad_t; typedef __fsid_t fsid_t; typedef __loff_t loff_t; typedef __ino_t ino_t; typedef __dev_t dev_t; typedef __gid_t gid_t; typedef __mode_t mode_t; typedef __nlink_t nlink_t; typedef __uid_t uid_t; typedef __off_t off_t; typedef __pid_t pid_t; typedef __id_t id_t; typedef __ssize_t ssize_t; typedef __daddr_t daddr_t; typedef __caddr_t caddr_t; typedef __key_t key_t; typedef __time_t time_t; typedef __clockid_t clockid_t; typedef __timer_t timer_t; typedef unsigned long int ulong; typedef unsigned short int ushort; typedef unsigned int uint; typedef int int8_t; typedef int int16_t; typedef int int32_t; typedef int int64_t; typedef unsigned int u_int8_t; typedef unsigned int u_int16_t; typedef unsigned int u_int32_t; typedef unsigned int u_int64_t; typedef int register_t; typedef int __sig_atomic_t; struct __anon_type_8 {   unsigned long int __val[32UL]; } ; typedef struct __anon_type_8 __sigset_t; typedef __sigset_t sigset_t; struct timespec {   __time_t tv_sec;   long int tv_nsec; } ; struct timeval {   __time_t tv_sec;   __suseconds_t tv_usec; } ; typedef __suseconds_t suseconds_t; typedef long int __fd_mask; struct __anon_type_9 {   __fd_mask __fds_bits[32]; } ; typedef struct __anon_type_9 fd_set; typedef __fd_mask fd_mask; int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout); int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const __sigset_t *__sigmask); unsigned int gnu_dev_major(unsigned long long int __dev); unsigned int gnu_dev_minor(unsigned long long int __dev); unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor); typedef __blkcnt_t blkcnt_t; typedef __fsblkcnt_t fsblkcnt_t; typedef __fsfilcnt_t fsfilcnt_t; typedef unsigned long int pthread_t; union __anon_type_10 {   char __size[56];   long int __align; } ; typedef union __anon_type_10 pthread_attr_t; struct __pthread_internal_list {   struct __pthread_internal_list *__prev;   struct __pthread_internal_list *__next; } ; typedef struct __pthread_internal_list __pthread_list_t; struct __pthread_mutex_s {   int __lock;   unsigned int __count;   int __owner;   unsigned int __nusers;   int __kind;   int __spins;   __pthread_list_t __list; } ; union __anon_type_11 {   struct __pthread_mutex_s __data;   char __size[40];   long int __align; } ; typedef union __anon_type_11 pthread_mutex_t; union __anon_type_12 {   char __size[4];   int __align; } ; typedef union __anon_type_12 pthread_mutexattr_t; struct __anon_type_13 {   int __lock;   unsigned int __futex;   unsigned long long int __total_seq;   unsigned long long int __wakeup_seq;   unsigned long long int __woken_seq;   void *__mutex;   unsigned int __nwaiters;   unsigned int __broadcast_seq; } ; union __anon_type_14 {   struct __anon_type_13 __data;   char __size[48];   long long int __align; } ; typedef union __anon_type_14 pthread_cond_t; union __anon_type_15 {   char __size[4];   int __align; } ; typedef union __anon_type_15 pthread_condattr_t; typedef unsigned int pthread_key_t; typedef int pthread_once_t; struct __anon_type_16 {   int __lock;   unsigned int __nr_readers;   unsigned int __readers_wakeup;   unsigned int __writer_wakeup;   unsigned int __nr_readers_queued;   unsigned int __nr_writers_queued;   int __writer;   int __shared;   unsigned long int __pad1;   unsigned long int __pad2;   unsigned int __flags; } ; union __anon_type_17 {   struct __anon_type_16 __data;   char __size[56];   long int __align; } ; typedef union __anon_type_17 pthread_rwlock_t; union __anon_type_18 {   char __size[8];   long int __align; } ; typedef union __anon_type_18 pthread_rwlockattr_t; typedef volatile int pthread_spinlock_t; union __anon_type_19 {   char __size[32];   long int __align; } ; typedef union __anon_type_19 pthread_barrier_t; union __anon_type_20 {   char __size[4];   int __align; } ; typedef union __anon_type_20 pthread_barrierattr_t; long int random(); void srandom(unsigned int __seed); char * initstate(unsigned int __seed, char *__statebuf, size_t __statelen); char * setstate(char *__statebuf); struct random_data {   int32_t *fptr;   int32_t *rptr;   int32_t *state;   int rand_type;   int rand_deg;   int rand_sep;   int32_t *end_ptr; } ; int random_r(struct random_data *__buf, int32_t *__result); int srandom_r(unsigned int __seed, struct random_data *__buf); int initstate_r(unsigned int __seed, char *__statebuf, size_t __statelen, struct random_data *__buf); int setstate_r(char *__statebuf, struct random_data *__buf); int rand(); void srand(unsigned int __seed); int rand_r(unsigned int *__seed); double drand48(); double erand48(unsigned short int __xsubi[3]); long int lrand48(); long int nrand48(unsigned short int __xsubi[3]); long int mrand48(); long int jrand48(unsigned short int __xsubi[3]); void srand48(long int __seedval); unsigned short int * seed48(unsigned short int __seed16v[3]); void lcong48(unsigned short int __param[7]); struct drand48_data {   unsigned short int __x[3];   unsigned short int __old_x[3];   unsigned short int __c;   unsigned short int __init;   unsigned long long int __a; } ; int drand48_r(struct drand48_data *__buffer, double *__result); int erand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, double *__result); int lrand48_r(struct drand48_data *__buffer, long int *__result); int nrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int mrand48_r(struct drand48_data *__buffer, long int *__result); int jrand48_r(unsigned short int __xsubi[3], struct drand48_data *__buffer, long int *__result); int srand48_r(long int __seedval, struct drand48_data *__buffer); int seed48_r(unsigned short int __seed16v[3], struct drand48_data *__buffer); int lcong48_r(unsigned short int __param[7], struct drand48_data *__buffer); void * malloc(size_t __size); void * calloc(size_t __nmemb, size_t __size); void * realloc(void *__ptr, size_t __size); void free(void *__ptr); void cfree(void *__ptr); void * alloca(size_t __size); void * valloc(size_t __size); int posix_memalign(void **__memptr, size_t __alignment, size_t __size); void abort(); int atexit(void (*__func)()); int on_exit(void (*__func)(int __status, void *__arg), void *__arg); void exit(int __status); void _Exit(int __status); char * getenv(const char *__name); char * __secure_getenv(const char *__name); int putenv(char *__string); int setenv(const char *__name, const char *__value, int __replace); int unsetenv(const char *__name); int clearenv(); char * mktemp(char *__template); int mkstemp(char *__template); int mkstemps(char *__template, int __suffixlen); char * mkdtemp(char *__template); int system(const char *__command); char * realpath(const char *__name, char *__resolved); typedef int (*__compar_fn_t)(const void *, const void *); void * bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar); int abs(int __x); long int labs(long int __x); long long int llabs(long long int __x); div_t  div(int __numer, int __denom); ldiv_t  ldiv(long int __numer, long int __denom); lldiv_t  lldiv(long long int __numer, long long int __denom); char * ecvt(double __value, int __ndigit, int *__decpt, int *__sign); char * fcvt(double __value, int __ndigit, int *__decpt, int *__sign); char * gcvt(double __value, int __ndigit, char *__buf); char * qecvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qfcvt(long double __value, int __ndigit, int *__decpt, int *__sign); char * qgcvt(long double __value, int __ndigit, char *__buf); int ecvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int fcvt_r(double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qecvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int qfcvt_r(long double __value, int __ndigit, int *__decpt, int *__sign, char *__buf, size_t __len); int mblen(const char *__s, size_t __n); int mbtowc(wchar_t *__pwc, const char *__s, size_t __n); int wctomb(char *__s, wchar_t __wchar); size_t  mbstowcs(wchar_t *__pwcs, const char *__s, size_t __n); size_t  wcstombs(char *__s, const wchar_t *__pwcs, size_t __n); int rpmatch(const char *__response); int posix_openpt(int __oflag); int getloadavg(double __loadavg[], int __nelem); struct stat {   __dev_t st_dev;   __ino_t st_ino;   __nlink_t st_nlink;   __mode_t st_mode;   __uid_t st_uid;   __gid_t st_gid;   int __pad0;   __dev_t st_rdev;   __off_t st_size;   __blksize_t st_blksize;   __blkcnt_t st_blocks;   struct timespec st_atim;   struct timespec st_mtim;   struct timespec st_ctim;   long int __unused[3]; } ; int stat(const char *__file, struct stat *__buf); int fstat(int __fd, struct stat *__buf); int fstatat(int __fd, const char *__file, struct stat *__buf, int __flag); int lstat(const char *__file, struct stat *__buf); int chmod(const char *__file, __mode_t __mode); int lchmod(const char *__file, __mode_t __mode); int fchmod(int __fd, __mode_t __mode); int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag); __mode_t  umask(__mode_t __mask); int mkdir(const char *__path, __mode_t __mode); int mkdirat(int __fd, const char *__path, __mode_t __mode); int mknod(const char *__path, __mode_t __mode, __dev_t __dev); int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev); int mkfifo(const char *__path, __mode_t __mode); int mkfifoat(int __fd, const char *__path, __mode_t __mode); int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags); int futimens(int __fd, const struct timespec __times[2]); int __fxstat(int __ver, int __fildes, struct stat *__stat_buf); int __xstat(int __ver, const char *__filename, struct stat *__stat_buf); int __lxstat(int __ver, const char *__filename, struct stat *__stat_buf); int __fxstatat(int __ver, int __fildes, const char *__filename, struct stat *__stat_buf, int __flag); int __xmknod(int __ver, const char *__path, __mode_t __mode, __dev_t *__dev); int __xmknodat(int __ver, int __fd, const char *__path, __mode_t __mode, __dev_t *__dev); void * memcpy(void *__dest, const void *__src, size_t __n); void * memmove(void *__dest, const void *__src, size_t __n); void * memccpy(void *__dest, const void *__src, int __c, size_t __n); void * memset(void *__s, int __c, size_t __n); int memcmp(const void *__s1, const void *__s2, size_t __n); void * memchr(const void *__s, int __c, size_t __n); char * strcpy(char *__dest, const char *__src); char * strncpy(char *__dest, const char *__src, size_t __n); char * strcat(char *__dest, const char *__src); char * strncat(char *__dest, const char *__src, size_t __n); int strcmp(const char *__s1, const char *__s2); int strncmp(const char *__s1, const char *__s2, size_t __n); int strcoll(const char *__s1, const char *__s2); size_t  strxfrm(char *__dest, const char *__src, size_t __n); struct __locale_struct {   struct locale_data *__locales[13];   const unsigned short int *__ctype_b;   const int *__ctype_tolower;   const int *__ctype_toupper;   const char *__names[13]; } ; typedef struct __locale_struct *__locale_t; typedef __locale_t locale_t; int strcoll_l(const char *__s1, const char *__s2, __locale_t __l); size_t  strxfrm_l(char *__dest, const char *__src, size_t __n, __locale_t __l); char * strdup(const char *__s); char * strndup(const char *__string, size_t __n); char * strchr(const char *__s, int __c); char * strrchr(const char *__s, int __c); size_t  strcspn(const char *__s, const char *__reject); size_t  strspn(const char *__s, const char *__accept); char * strpbrk(const char *__s, const char *__accept); char * strstr(const char *__haystack, const char *__needle); char * strtok(char *__s, const char *__delim); char * __strtok_r(char *__s, const char *__delim, char **__save_ptr); char * strtok_r(char *__s, const char *__delim, char **__save_ptr); size_t  strlen(const char *__s); size_t  strnlen(const char *__string, size_t __maxlen); char * strerror(int __errnum); int strerror_r(int __errnum, char *__buf, size_t __buflen); char * strerror_l(int __errnum, __locale_t __l); void __bzero(void *__s, size_t __n); void bcopy(const void *__src, void *__dest, size_t __n); void bzero(void *__s, size_t __n); int bcmp(const void *__s1, const void *__s2, size_t __n); char * index(const char *__s, int __c); char * rindex(const char *__s, int __c); int ffs(int __i); int strcasecmp(const char *__s1, const char *__s2); int strncasecmp(const char *__s1, const char *__s2, size_t __n); char * strsep(char **__stringp, const char *__delim); char * strsignal(int __sig); char * __stpcpy(char *__dest, const char *__src); char * stpcpy(char *__dest, const char *__src); char * __stpncpy(char *__dest, const char *__src, size_t __n); char * stpncpy(char *__dest, const char *__src, size_t __n); typedef __useconds_t useconds_t; typedef __intptr_t intptr_t; typedef __socklen_t socklen_t; int access(const char *__name, int __type); int faccessat(int __fd, const char *__file, int __type, int __flag); __off_t  lseek(int __fd, __off_t __offset, int __whence); int close(int __fd); ssize_t  read(int __fd, void *__buf, size_t __nbytes); ssize_t  write(int __fd, const void *__buf, size_t __n); int pipe(int __pipedes[2]); unsigned int alarm(unsigned int __seconds); unsigned int sleep(unsigned int __seconds); __useconds_t  ualarm(__useconds_t __value, __useconds_t __interval); int usleep(__useconds_t __useconds); int pause(); int chown(const char *__file, __uid_t __owner, __gid_t __group); int fchown(int __fd, __uid_t __owner, __gid_t __group); int lchown(const char *__file, __uid_t __owner, __gid_t __group); int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag); int chdir(const char *__path); int fchdir(int __fd); char * getcwd(char *__buf, size_t __size); char * getwd(char *__buf); int dup(int __fd); int dup2(int __fd, int __fd2); extern char **__environ; int execve(const char *__path, const char *__argv[], const char *__envp[]); int fexecve(int __fd, const char *__argv[], const char *__envp[]); int execv(const char *__path, const char *__argv[]); int execle(const char *__path, const char *__arg, ...); int execl(const char *__path, const char *__arg, ...); int execvp(const char *__file, const char *__argv[]); int execlp(const char *__file, const char *__arg, ...); int nice(int __inc); void _exit(int __status); enum __anon_type_21 {   _PC_LINK_MAX = 0,   _PC_MAX_CANON = 1,   _PC_MAX_INPUT = 2,   _PC_NAME_MAX = 3,   _PC_PATH_MAX = 4,   _PC_PIPE_BUF = 5,   _PC_CHOWN_RESTRICTED = 6,   _PC_NO_TRUNC = 7,   _PC_VDISABLE = 8,   _PC_SYNC_IO = 9,   _PC_ASYNC_IO = 10,   _PC_PRIO_IO = 11,   _PC_SOCK_MAXBUF = 12,   _PC_FILESIZEBITS = 13,   _PC_REC_INCR_XFER_SIZE = 14,   _PC_REC_MAX_XFER_SIZE = 15,   _PC_REC_MIN_XFER_SIZE = 16,   _PC_REC_XFER_ALIGN = 17,   _PC_ALLOC_SIZE_MIN = 18,   _PC_SYMLINK_MAX = 19,   _PC_2_SYMLINKS = 20 } ; enum __anon_type_22 {   _SC_ARG_MAX = 0,   _SC_CHILD_MAX = 1,   _SC_CLK_TCK = 2,   _SC_NGROUPS_MAX = 3,   _SC_OPEN_MAX = 4,   _SC_STREAM_MAX = 5,   _SC_TZNAME_MAX = 6,   _SC_JOB_CONTROL = 7,   _SC_SAVED_IDS = 8,   _SC_REALTIME_SIGNALS = 9,   _SC_PRIORITY_SCHEDULING = 10,   _SC_TIMERS = 11,   _SC_ASYNCHRONOUS_IO = 12,   _SC_PRIORITIZED_IO = 13,   _SC_SYNCHRONIZED_IO = 14,   _SC_FSYNC = 15,   _SC_MAPPED_FILES = 16,   _SC_MEMLOCK = 17,   _SC_MEMLOCK_RANGE = 18,   _SC_MEMORY_PROTECTION = 19,   _SC_MESSAGE_PASSING = 20,   _SC_SEMAPHORES = 21,   _SC_SHARED_MEMORY_OBJECTS = 22,   _SC_AIO_LISTIO_MAX = 23,   _SC_AIO_MAX = 24,   _SC_AIO_PRIO_DELTA_MAX = 25,   _SC_DELAYTIMER_MAX = 26,   _SC_MQ_OPEN_MAX = 27,   _SC_MQ_PRIO_MAX = 28,   _SC_VERSION = 29,   _SC_PAGESIZE = 30,   _SC_RTSIG_MAX = 31,   _SC_SEM_NSEMS_MAX = 32,   _SC_SEM_VALUE_MAX = 33,   _SC_SIGQUEUE_MAX = 34,   _SC_TIMER_MAX = 35,   _SC_BC_BASE_MAX = 36,   _SC_BC_DIM_MAX = 37,   _SC_BC_SCALE_MAX = 38,   _SC_BC_STRING_MAX = 39,   _SC_COLL_WEIGHTS_MAX = 40,   _SC_EQUIV_CLASS_MAX = 41,   _SC_EXPR_NEST_MAX = 42,   _SC_LINE_MAX = 43,   _SC_RE_DUP_MAX = 44,   _SC_CHARCLASS_NAME_MAX = 45,   _SC_2_VERSION = 46,   _SC_2_C_BIND = 47,   _SC_2_C_DEV = 48,   _SC_2_FORT_DEV = 49,   _SC_2_FORT_RUN = 50,   _SC_2_SW_DEV = 51,   _SC_2_LOCALEDEF = 52,   _SC_PII = 53,   _SC_PII_XTI = 54,   _SC_PII_SOCKET = 55,   _SC_PII_INTERNET = 56,   _SC_PII_OSI = 57,   _SC_POLL = 58,   _SC_SELECT = 59,   _SC_UIO_MAXIOV = 60,   _SC_IOV_MAX = 60,   _SC_PII_INTERNET_STREAM = 61,   _SC_PII_INTERNET_DGRAM = 62,   _SC_PII_OSI_COTS = 63,   _SC_PII_OSI_CLTS = 64,   _SC_PII_OSI_M = 65,   _SC_T_IOV_MAX = 66,   _SC_THREADS = 67,   _SC_THREAD_SAFE_FUNCTIONS = 68,   _SC_GETGR_R_SIZE_MAX = 69,   _SC_GETPW_R_SIZE_MAX = 70,   _SC_LOGIN_NAME_MAX = 71,   _SC_TTY_NAME_MAX = 72,   _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,   _SC_THREAD_KEYS_MAX = 74,   _SC_THREAD_STACK_MIN = 75,   _SC_THREAD_THREADS_MAX = 76,   _SC_THREAD_ATTR_STACKADDR = 77,   _SC_THREAD_ATTR_STACKSIZE = 78,   _SC_THREAD_PRIORITY_SCHEDULING = 79,   _SC_THREAD_PRIO_INHERIT = 80,   _SC_THREAD_PRIO_PROTECT = 81,   _SC_THREAD_PROCESS_SHARED = 82,   _SC_NPROCESSORS_CONF = 83,   _SC_NPROCESSORS_ONLN = 84,   _SC_PHYS_PAGES = 85,   _SC_AVPHYS_PAGES = 86,   _SC_ATEXIT_MAX = 87,   _SC_PASS_MAX = 88,   _SC_XOPEN_VERSION = 89,   _SC_XOPEN_XCU_VERSION = 90,   _SC_XOPEN_UNIX = 91,   _SC_XOPEN_CRYPT = 92,   _SC_XOPEN_ENH_I18N = 93,   _SC_XOPEN_SHM = 94,   _SC_2_CHAR_TERM = 95,   _SC_2_C_VERSION = 96,   _SC_2_UPE = 97,   _SC_XOPEN_XPG2 = 98,   _SC_XOPEN_XPG3 = 99,   _SC_XOPEN_XPG4 = 100,   _SC_CHAR_BIT = 101,   _SC_CHAR_MAX = 102,   _SC_CHAR_MIN = 103,   _SC_INT_MAX = 104,   _SC_INT_MIN = 105,   _SC_LONG_BIT = 106,   _SC_WORD_BIT = 107,   _SC_MB_LEN_MAX = 108,   _SC_NZERO = 109,   _SC_SSIZE_MAX = 110,   _SC_SCHAR_MAX = 111,   _SC_SCHAR_MIN = 112,   _SC_SHRT_MAX = 113,   _SC_SHRT_MIN = 114,   _SC_UCHAR_MAX = 115,   _SC_UINT_MAX = 116,   _SC_ULONG_MAX = 117,   _SC_USHRT_MAX = 118,   _SC_NL_ARGMAX = 119,   _SC_NL_LANGMAX = 120,   _SC_NL_MSGMAX = 121,   _SC_NL_NMAX = 122,   _SC_NL_SETMAX = 123,   _SC_NL_TEXTMAX = 124,   _SC_XBS5_ILP32_OFF32 = 125,   _SC_XBS5_ILP32_OFFBIG = 126,   _SC_XBS5_LP64_OFF64 = 127,   _SC_XBS5_LPBIG_OFFBIG = 128,   _SC_XOPEN_LEGACY = 129,   _SC_XOPEN_REALTIME = 130,   _SC_XOPEN_REALTIME_THREADS = 131,   _SC_ADVISORY_INFO = 132,   _SC_BARRIERS = 133,   _SC_BASE = 134,   _SC_C_LANG_SUPPORT = 135,   _SC_C_LANG_SUPPORT_R = 136,   _SC_CLOCK_SELECTION = 137,   _SC_CPUTIME = 138,   _SC_THREAD_CPUTIME = 139,   _SC_DEVICE_IO = 140,   _SC_DEVICE_SPECIFIC = 141,   _SC_DEVICE_SPECIFIC_R = 142,   _SC_FD_MGMT = 143,   _SC_FIFO = 144,   _SC_PIPE = 145,   _SC_FILE_ATTRIBUTES = 146,   _SC_FILE_LOCKING = 147,   _SC_FILE_SYSTEM = 148,   _SC_MONOTONIC_CLOCK = 149,   _SC_MULTI_PROCESS = 150,   _SC_SINGLE_PROCESS = 151,   _SC_NETWORKING = 152,   _SC_READER_WRITER_LOCKS = 153,   _SC_SPIN_LOCKS = 154,   _SC_REGEXP = 155,   _SC_REGEX_VERSION = 156,   _SC_SHELL = 157,   _SC_SIGNALS = 158,   _SC_SPAWN = 159,   _SC_SPORADIC_SERVER = 160,   _SC_THREAD_SPORADIC_SERVER = 161,   _SC_SYSTEM_DATABASE = 162,   _SC_SYSTEM_DATABASE_R = 163,   _SC_TIMEOUTS = 164,   _SC_TYPED_MEMORY_OBJECTS = 165,   _SC_USER_GROUPS = 166,   _SC_USER_GROUPS_R = 167,   _SC_2_PBS = 168,   _SC_2_PBS_ACCOUNTING = 169,   _SC_2_PBS_LOCATE = 170,   _SC_2_PBS_MESSAGE = 171,   _SC_2_PBS_TRACK = 172,   _SC_SYMLOOP_MAX = 173,   _SC_STREAMS = 174,   _SC_2_PBS_CHECKPOINT = 175,   _SC_V6_ILP32_OFF32 = 176,   _SC_V6_ILP32_OFFBIG = 177,   _SC_V6_LP64_OFF64 = 178,   _SC_V6_LPBIG_OFFBIG = 179,   _SC_HOST_NAME_MAX = 180,   _SC_TRACE = 181,   _SC_TRACE_EVENT_FILTER = 182,   _SC_TRACE_INHERIT = 183,   _SC_TRACE_LOG = 184,   _SC_LEVEL1_ICACHE_SIZE = 185,   _SC_LEVEL1_ICACHE_ASSOC = 186,   _SC_LEVEL1_ICACHE_LINESIZE = 187,   _SC_LEVEL1_DCACHE_SIZE = 188,   _SC_LEVEL1_DCACHE_ASSOC = 189,   _SC_LEVEL1_DCACHE_LINESIZE = 190,   _SC_LEVEL2_CACHE_SIZE = 191,   _SC_LEVEL2_CACHE_ASSOC = 192,   _SC_LEVEL2_CACHE_LINESIZE = 193,   _SC_LEVEL3_CACHE_SIZE = 194,   _SC_LEVEL3_CACHE_ASSOC = 195,   _SC_LEVEL3_CACHE_LINESIZE = 196,   _SC_LEVEL4_CACHE_SIZE = 197,   _SC_LEVEL4_CACHE_ASSOC = 198,   _SC_LEVEL4_CACHE_LINESIZE = 199,   _SC_IPV6 = 235,   _SC_RAW_SOCKETS = 236,   _SC_V7_ILP32_OFF32 = 237,   _SC_V7_ILP32_OFFBIG = 238,   _SC_V7_LP64_OFF64 = 239,   _SC_V7_LPBIG_OFFBIG = 240,   _SC_SS_REPL_MAX = 241,   _SC_TRACE_EVENT_NAME_MAX = 242,   _SC_TRACE_NAME_MAX = 243,   _SC_TRACE_SYS_MAX = 244,   _SC_TRACE_USER_EVENT_MAX = 245,   _SC_XOPEN_STREAMS = 246,   _SC_THREAD_ROBUST_PRIO_INHERIT = 247,   _SC_THREAD_ROBUST_PRIO_PROTECT = 248 } ; enum __anon_type_23 {   _CS_PATH = 0,   _CS_V6_WIDTH_RESTRICTED_ENVS = 1,   _CS_GNU_LIBC_VERSION = 2,   _CS_GNU_LIBPTHREAD_VERSION = 3,   _CS_V5_WIDTH_RESTRICTED_ENVS = 4,   _CS_V7_WIDTH_RESTRICTED_ENVS = 5,   _CS_LFS_CFLAGS = 1000,   _CS_LFS_LDFLAGS = 1001,   _CS_LFS_LIBS = 1002,   _CS_LFS_LINTFLAGS = 1003,   _CS_LFS64_CFLAGS = 1004,   _CS_LFS64_LDFLAGS = 1005,   _CS_LFS64_LIBS = 1006,   _CS_LFS64_LINTFLAGS = 1007,   _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,   _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,   _CS_XBS5_ILP32_OFF32_LIBS = 1102,   _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,   _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,   _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,   _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,   _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,   _CS_XBS5_LP64_OFF64_CFLAGS = 1108,   _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,   _CS_XBS5_LP64_OFF64_LIBS = 1110,   _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,   _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,   _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,   _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,   _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,   _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,   _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,   _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,   _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,   _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,   _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,   _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,   _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,   _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,   _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,   _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,   _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,   _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,   _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,   _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,   _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,   _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,   _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,   _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,   _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,   _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,   _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,   _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,   _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,   _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,   _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,   _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,   _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,   _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,   _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,   _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,   _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147 } ; long int pathconf(const char *__path, int __name); long int fpathconf(int __fd, int __name); long int sysconf(int __name); size_t  confstr(int __name, char *__buf, size_t __len); __pid_t  getpid(); __pid_t  getppid(); __pid_t  getpgrp(); __pid_t  __getpgid(__pid_t __pid); int setpgid(__pid_t __pid, __pid_t __pgid); int setpgrp(); __pid_t  setsid(); __uid_t  getuid(); __uid_t  geteuid(); __gid_t  getgid(); __gid_t  getegid(); int getgroups(int __size, __gid_t __list[]); int setuid(__uid_t __uid); int setreuid(__uid_t __ruid, __uid_t __euid); int seteuid(__uid_t __uid); int setgid(__gid_t __gid); int setregid(__gid_t __rgid, __gid_t __egid); int setegid(__gid_t __gid); __pid_t  fork(); __pid_t  vfork(); char * ttyname(int __fd); int ttyname_r(int __fd, char *__buf, size_t __buflen); int isatty(int __fd); int ttyslot(); int link(const char *__from, const char *__to); int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags); int symlink(const char *__from, const char *__to); ssize_t  readlink(const char *__path, char *__buf, size_t __len); int symlinkat(const char *__from, int __tofd, const char *__to); ssize_t  readlinkat(int __fd, const char *__path, char *__buf, size_t __len); int unlink(const char *__name); int unlinkat(int __fd, const char *__name, int __flag); int rmdir(const char *__path); __pid_t  tcgetpgrp(int __fd); int tcsetpgrp(int __fd, __pid_t __pgrp_id); char * getlogin(); int getlogin_r(char *__name, size_t __name_len); int setlogin(const char *__name); extern char *optarg; extern int optind; extern int opterr; extern int optopt; int getopt(int ___argc, const char **___argv, const char *__shortopts); int gethostname(char *__name, size_t __len); int sethostname(const char *__name, size_t __len); int sethostid(long int __id); int getdomainname(char *__name, size_t __len); int setdomainname(const char *__name, size_t __len); int vhangup(); int revoke(const char *__file); int profil(unsigned short int *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale); int acct(const char *__name); char * getusershell(); void endusershell(); void setusershell(); int daemon(int __nochdir, int __noclose); int chroot(const char *__path); char * getpass(const char *__prompt); int fsync(int __fd); long int gethostid(); void sync(); int getpagesize(); int getdtablesize(); int truncate(const char *__file, __off_t __length); int ftruncate(int __fd, __off_t __length); int brk(void *__addr); void * sbrk(intptr_t __delta); long int syscall(long int __sysno, ...); int lockf(int __fd, int __cmd, __off_t __len); int fdatasync(int __fildes); typedef __clock_t clock_t; struct tm {   int tm_sec;   int tm_min;   int tm_hour;   int tm_mday;   int tm_mon;   int tm_year;   int tm_wday;   int tm_yday;   int tm_isdst;   long int tm_gmtoff;   const char *tm_zone; } ; struct itimerspec {   struct timespec it_interval;   struct timespec it_value; } ; struct sigevent ; clock_t  clock(); time_t  time(time_t *__timer); double difftime(time_t __time1, time_t __time0); time_t  mktime(struct tm *__tp); size_t  strftime(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp); size_t  strftime_l(char *__s, size_t __maxsize, const char *__format, const struct tm *__tp, __locale_t __loc); struct tm * gmtime(const time_t *__timer); struct tm * localtime(const time_t *__timer); struct tm * gmtime_r(const time_t *__timer, struct tm *__tp); struct tm * localtime_r(const time_t *__timer, struct tm *__tp); char * asctime(const struct tm *__tp); char * ctime(const time_t *__timer); char * asctime_r(const struct tm *__tp, char *__buf); char * ctime_r(const time_t *__timer, char *__buf); extern char *__tzname[2]; extern int __daylight; extern long int __timezone; extern char *tzname[2]; void tzset(); extern int daylight; extern long int timezone; int stime(const time_t *__when); time_t  timegm(struct tm *__tp); time_t  timelocal(struct tm *__tp); int dysize(int __year); int nanosleep(const struct timespec *__requested_time, struct timespec *__remaining); int clock_getres(clockid_t __clock_id, struct timespec *__res); int clock_gettime(clockid_t __clock_id, struct timespec *__tp); int clock_settime(clockid_t __clock_id, const struct timespec *__tp); int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec *__req, struct timespec *__rem); int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id); int timer_create(clockid_t __clock_id, struct sigevent *__evp, timer_t *__timerid); int timer_delete(timer_t __timerid); int timer_settime(timer_t __timerid, int __flags, const struct itimerspec *__value, struct itimerspec *__ovalue); int timer_gettime(timer_t __timerid, struct itimerspec *__value); int timer_getoverrun(timer_t __timerid); struct flock {   short int l_type;   short int l_whence;   __off_t l_start;   __off_t l_len;   __pid_t l_pid; } ; int fcntl(int __fd, int __cmd, ...); int open(const char *__file, int __oflag, ...); int openat(int __fd, const char *__file, int __oflag, ...); int openat64(int __fd, const char *__file, int __oflag, ...); int creat(const char *__file, __mode_t __mode); int posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise); int posix_fallocate(int __fd, __off_t __offset, __off_t __len); int * __errno_location(); enum __anon_type_24 {   _ISupper = 256,   _ISlower = 512,   _ISalpha = 1024,   _ISdigit = 2048,   _ISxdigit = 4096,   _ISspace = 8192,   _ISprint = 16384,   _ISgraph = 32768,   _ISblank = 1,   _IScntrl = 2,   _ISpunct = 4,   _ISalnum = 8 } ; const unsigned short int ** __ctype_b_loc(); const __int32_t ** __ctype_tolower_loc(); const __int32_t ** __ctype_toupper_loc(); int isalnum(int); int isalpha(int); int iscntrl(int); int isdigit(int); int islower(int); int isgraph(int); int isprint(int); int ispunct(int); int isspace(int); int isupper(int); int isxdigit(int); int tolower(int __c); int toupper(int __c); int isblank(int); int isascii(int __c); int toascii(int __c); int _toupper(int); int _tolower(int); int isalnum_l(int, __locale_t ); int isalpha_l(int, __locale_t ); int iscntrl_l(int, __locale_t ); int isdigit_l(int, __locale_t ); int islower_l(int, __locale_t ); int isgraph_l(int, __locale_t ); int isprint_l(int, __locale_t ); int ispunct_l(int, __locale_t ); int isspace_l(int, __locale_t ); int isupper_l(int, __locale_t ); int isxdigit_l(int, __locale_t ); int isblank_l(int, __locale_t ); int __tolower_l(int __c, __locale_t __l); int tolower_l(int __c, __locale_t __l); int __toupper_l(int __c, __locale_t __l); int toupper_l(int __c, __locale_t __l); void __assert_fail(const char *__assertion, const char *__file, unsigned int __line, const char *__function); void __assert_perror_fail(int __errnum, const char *__file, unsigned int __line, const char *__function); void __assert(const char *__assertion, const char *__file, int __line); int Num = 1; unsigned int offset = 0U; unsigned int ino = 721; long int default_mtime = 0L; struct file_handler {   const char *type;   int (*handler)(const char *line); } ; void push_string(const char *name); void push_pad(); void push_rest(const char *name); void push_hdr(const char *s); void cpio_trailer(); int cpio_mkslink(const char *name, const char *target, unsigned int mode, uid_t uid, gid_t gid); int cpio_mkslink_line(const char *line); int cpio_mkgeneric(const char *name, unsigned int mode, uid_t uid, gid_t gid); enum generic_types {   GT_DIR = 0,   GT_PIPE = 1,   GT_SOCK = 2 } ; struct generic_type {   const char *type;   mode_t mode; } ; struct generic_type generic_type_table[3] = { [0] = { .type = 'dir', .mode = 16384 }, [1] = { .type = 'pipe', .mode = 4096 }, [2] = { .type = 'sock', .mode = 49152 } }; int cpio_mkgeneric_line(const char *line, enum generic_types gt); int cpio_mkdir_line(const char *line); int cpio_mkpipe_line(const char *line); int cpio_mksock_line(const char *line); int cpio_mknod(const char *name, unsigned int mode, uid_t uid, gid_t gid, char dev_type, unsigned int maj, unsigned int min); int cpio_mknod_line(const char *line); int cpio_mkfile(const char *name, const char *location, unsigned int mode, uid_t uid, gid_t gid, unsigned int nlinks); char * cpio_replace_env(char *new_location); int cpio_mkfile_line(const char *line); void usage(const char *prog); struct file_handler file_handler_table[7] = { { .type = 'file', .handler = &cpio_mkfile_line }, { .type = 'nod', .handler = &cpio_mknod_line }, { .type = 'dir', .handler = &cpio_mkdir_line }, { .type = 'slink', .handler = &cpio_mkslink_line }, { .type = 'pipe', .handler = &cpio_mkpipe_line }, { .type = 'sock', .handler = &cpio_mksock_line }, { .type = (void *)0, .handler = (void *)0 } }; int main(int argc, char *argv[]); Function start dummy edge FILE *cpio_list; char line[8242]; char *args; char *type; int ec = 0; int line_nr = 0; const char *filename;" id="430 -> 431"]
431 -> 432 [label="Line 4338: default_mtime = time((void *)0);" id="431 -> 432"]
432 -> 2961 [label="Line 4339: while" id="432 -> 2961"]
3003 -> 2961 [style="dashed" weight="0" label="covered by"]
2961 -> 2962 [label="Line 4339:  int opt;" id="2961 -> 2962"]
2962 -> 2963 [label="Line 4340: opt = getopt(argc, argv, 't:h');" id="2962 -> 2963"]
2963 -> 2964 [label="Line 4341: char *invalid;" id="2963 -> 2964"]
2964 -> 2965 [label="Line 4343: [opt == -1]" id="2964 -> 2965"]
2964 -> 2966 [label="Line 4343: [!(opt == -1)]" id="2964 -> 2966"]
2966 -> 2967 [label="Line 4345: switch (opt)" id="2966 -> 2967"]
2967 -> 2968 [label="Line 4346: [opt == 't']" id="2967 -> 2968"]
2967 -> 2969 [label="Line 4346: [!(opt == 't')]" id="2967 -> 2969"]
2969 -> 2970 [label="Line 4355: [opt == 'h']" id="2969 -> 2970"]
2969 -> 2971 [label="Line 4355: [!(opt == 'h')]" id="2969 -> 2971"]
2971 -> 2973 [label="Line 4356: [!(opt == '?')]" id="2971 -> 2973"]
2971 -> 2976 [label="Line 4356: [opt == '?']" id="2971 -> 2976"]
2976 -> 2977 [label="Line 4357: usage(argv[0])" id="2976 -> 2977"]
2977 -> 2978 [label="Line 0: Function start dummy edge" id="2977 -> 2978"]
2978 -> 2979 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2978 -> 2979"]
2979 -> 2980 [label="Line 0: default return" id="2979 -> 2980"]
2980 -> 2981 [label="Line 4357: Return edge from usage to main" id="2980 -> 2981"]
2981 -> 2982 [label="Line 4358: int __CPAchecker_TMP_0;" id="2981 -> 2982"]
2982 -> 2983 [label="Line 4358: [opt == 'h']" id="2982 -> 2983"]
2982 -> 2984 [label="Line 4358: [!(opt == 'h')]" id="2982 -> 2984"]
2984 -> 2987 [label="Line 4358: __CPAchecker_TMP_0 = 1;" id="2984 -> 2987"]
2983 -> 2987 [label="Line 4358: __CPAchecker_TMP_0 = 0;" id="2983 -> 2987"]
2973 -> 3001 [label="Line 0: " id="2973 -> 3001"]
3001 -> 3003 [label="Line 0: " id="3001 -> 3003"]
2970 -> 2976 [label="Line 4356: fall through" id="2970 -> 2976"]
2968 -> 2988 [label="Line 4347: default_mtime = strtol(optarg, &invalid, 10);" id="2968 -> 2988"]
2988 -> 2990 [label="Line 4348: [!((*optarg) == 0)]" id="2988 -> 2990"]
2988 -> 2993 [label="Line 4348: [(*optarg) == 0]" id="2988 -> 2993"]
2993 -> 2994 [label="Line 4349: fprintf(stderr, 'Invalid timestamp: %s\n', optarg);" id="2993 -> 2994"]
2994 -> 2995 [label="Line 4351: usage(argv[0])" id="2994 -> 2995"]
2995 -> 2996 [label="Line 0: Function start dummy edge" id="2995 -> 2996"]
2996 -> 2997 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="2996 -> 2997"]
2997 -> 2998 [label="Line 0: default return" id="2997 -> 2998"]
2998 -> 2999 [label="Line 4351: Return edge from usage to main" id="2998 -> 2999"]
2990 -> 2991 [label="Line 4348: [(*invalid) == 0]" id="2990 -> 2991"]
2990 -> 2993 [label="Line 4348: [!((*invalid) == 0)]" id="2990 -> 2993"]
2991 -> 3001 [label="Line 4354: break" id="2991 -> 3001"]
2965 -> 3004 [label="Line 4344: break" id="2965 -> 3004"]
3004 -> 3005 [label="Line 4362: [(argc - optind) != 1]" id="3004 -> 3005"]
3004 -> 3006 [label="Line 4362: [!((argc - optind) != 1)]" id="3004 -> 3006"]
3006 -> 3012 [label="Line 4366: filename = argv[optind]; int __CPAchecker_TMP_1;" id="3006 -> 3012"]
3012 -> 3013 [label="Line 4367: __CPAchecker_TMP_1 = strcmp(filename, '-');" id="3012 -> 3013"]
3013 -> 3014 [label="Line 4367: [__CPAchecker_TMP_1 == 0]" id="3013 -> 3014"]
3013 -> 3015 [label="Line 4367: [!(__CPAchecker_TMP_1 == 0)]" id="3013 -> 3015"]
3015 -> 3016 [label="Line 4369: cpio_list = fopen(filename, 'r');" id="3015 -> 3016"]
3016 -> 3017 [label="Line 4369: [cpio_list == 0]" id="3016 -> 3017"]
3016 -> 3018 [label="Line 4369: [!(cpio_list == 0)]" id="3016 -> 3018"]
3018 -> 3031 [label="Line 0: " id="3018 -> 3031"]
3031 -> 3033 [label="Line 4376: while" id="3031 -> 3033"]
3720 -> 3033 [style="dashed" weight="0" label="covered by"]
3722 -> 3033 [style="dashed" weight="0" label="covered by"]
3724 -> 3033 [style="dashed" weight="0" label="covered by"]
4387 -> 3033 [style="dashed" weight="0" label="covered by"]
4389 -> 3033 [style="dashed" weight="0" label="covered by"]
4391 -> 3033 [style="dashed" weight="0" label="covered by"]
5058 -> 3033 [style="dashed" weight="0" label="covered by"]
5060 -> 3033 [style="dashed" weight="0" label="covered by"]
5062 -> 3033 [style="dashed" weight="0" label="covered by"]
5064 -> 3033 [style="dashed" weight="0" label="covered by"]
5066 -> 3033 [style="dashed" weight="0" label="covered by"]
5068 -> 3033 [style="dashed" weight="0" label="covered by"]
5073 -> 3033 [style="dashed" weight="0" label="covered by"]
3033 -> 3034 [label="Line 4376: char *__CPAchecker_TMP_4;" id="3033 -> 3034"]
3034 -> 3035 [label="Line 4376: __CPAchecker_TMP_4 = fgets(line, 8242, cpio_list);" id="3034 -> 3035"]
3035 -> 3037 [label="Line 4376: [!(__CPAchecker_TMP_4 == 0)]" id="3035 -> 3037"]
3035 -> 5071 [label="Line 4376: [__CPAchecker_TMP_4 == 0]" id="3035 -> 5071"]
5071 -> 5074 [label="Line 4428: [ec == 0]" id="5071 -> 5074"]
5071 -> 5075 [label="Line 4428: [!(ec == 0)]" id="5071 -> 5075"]
5074 -> 5076 [label="Line 4429: cpio_trailer()" id="5074 -> 5076"]
5076 -> 5077 [label="Line 0: Function start dummy edge" id="5076 -> 5077"]
5077 -> 5078 [label="Line 3863: char s[256]; const char name[] = 'TRAILER!!!'; size_t __CPAchecker_TMP_0;" id="5077 -> 5078"]
5078 -> 5079 [label="Line 3866: __CPAchecker_TMP_0 = strlen(name);" id="5078 -> 5079"]
5079 -> 5080 [label="Line 3866: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', 0, 0, (long)0, (long)0, 1, (long)0, 0, 0, 0, 0, 0, ((unsigned)__CPAchecker_TMP_0) + 1, 0);" id="5079 -> 5080"]
5080 -> 5081 [label="Line 3882: push_hdr(s)" id="5080 -> 5081"]
5081 -> 5082 [label="Line 0: Function start dummy edge" id="5081 -> 5082"]
5082 -> 5083 [label="Line 3857: fputs(s, stdout);" id="5082 -> 5083"]
5083 -> 5084 [label="Line 3858: offset = offset + 110; default return" id="5083 -> 5084"]
5084 -> 5085 [label="Line 3882: Return edge from push_hdr to cpio_trailer" id="5084 -> 5085"]
5085 -> 5086 [label="Line 3883: push_rest(name)" id="5085 -> 5086"]
5086 -> 5087 [label="Line 0: Function start dummy edge" id="5086 -> 5087"]
5087 -> 5088 [label="Line 3840: size_t __CPAchecker_TMP_0;" id="5087 -> 5088"]
5088 -> 5089 [label="Line 3840: __CPAchecker_TMP_0 = strlen(name);" id="5088 -> 5089"]
5089 -> 5090 [label="Line 3840: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="5089 -> 5090"]
5090 -> 5091 [label="Line 3843: fputs(name, stdout);" id="5090 -> 5091"]
5091 -> 5092 [label="Line 3844: putchar(0);" id="5091 -> 5092"]
5092 -> 5094 [label="Line 3845: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="5092 -> 5094"]
5099 -> 5094 [style="dashed" weight="0" label="covered by"]
5094 -> 5095 [label="Line 3848: [(tmp_ofs & 3) == 0]" id="5094 -> 5095"]
5094 -> 5096 [label="Line 3848: [!((tmp_ofs & 3) == 0)]" id="5094 -> 5096"]
5096 -> 5097 [label="Line 3849: putchar(0);" id="5096 -> 5097"]
5097 -> 5099 [label="Line 3850: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="5097 -> 5099"]
5095 -> 5100 [label="Line 0: default return" id="5095 -> 5100"]
5100 -> 5101 [label="Line 3883: Return edge from push_rest to cpio_trailer" id="5100 -> 5101"]
5101 -> 5103 [label="Line 3885: while" id="5101 -> 5103"]
5108 -> 5103 [style="dashed" weight="0" label="covered by"]
5103 -> 5104 [label="Line 3885: [(offset % 512) == 0]" id="5103 -> 5104"]
5103 -> 5105 [label="Line 3885: [!((offset % 512) == 0)]" id="5103 -> 5105"]
5105 -> 5106 [label="Line 3886: putchar(0);" id="5105 -> 5106"]
5106 -> 5108 [label="Line 3887: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; " id="5106 -> 5108"]
5104 -> 5109 [label="Line 0: default return" id="5104 -> 5109"]
5109 -> 5110 [label="Line 4429: Return edge from cpio_trailer to main" id="5109 -> 5110"]
5110 -> 5111 [label="Line 0: " id="5110 -> 5111"]
3037 -> 3038 [label="Line 4377: int type_idx; unsigned long int slen;" id="3037 -> 3038"]
3038 -> 3039 [label="Line 4378: slen = strlen(line);" id="3038 -> 3039"]
3039 -> 3040 [label="Line 4380: int __CPAchecker_TMP_5 = line_nr; line_nr = line_nr + 1; __CPAchecker_TMP_5;" id="3039 -> 3040"]
3040 -> 3041 [label="Line 4382: ['#' == (*line)]" id="3040 -> 3041"]
3040 -> 3042 [label="Line 4382: [!('#' == (*line))]" id="3040 -> 3042"]
3042 -> 3043 [label="Line 4387: type = strtok(line, ' \t');" id="3042 -> 3043"]
3043 -> 3044 [label="Line 4387: [type == 0]" id="3043 -> 3044"]
3043 -> 3045 [label="Line 4387: [!(type == 0)]" id="3043 -> 3045"]
3045 -> 3046 [label="Line 4395: ['\xa' == (*type)]" id="3045 -> 3046"]
3045 -> 3047 [label="Line 4395: [!('\xa' == (*type))]" id="3045 -> 3047"]
3047 -> 3048 [label="Line 4400: size_t __CPAchecker_TMP_6;" id="3047 -> 3048"]
3048 -> 3049 [label="Line 4400: __CPAchecker_TMP_6 = strlen(type);" id="3048 -> 3049"]
3049 -> 3050 [label="Line 4400: [slen == __CPAchecker_TMP_6]" id="3049 -> 3050"]
3049 -> 3051 [label="Line 4400: [!(slen == __CPAchecker_TMP_6)]" id="3049 -> 3051"]
3051 -> 3052 [label="Line 4405: args = strtok((void *)0, '\n');" id="3051 -> 3052"]
3052 -> 3053 [label="Line 4405: [args == 0]" id="3052 -> 3053"]
3052 -> 3057 [label="Line 4405: [!(args == 0)]" id="3052 -> 3057"]
3057 -> 3059 [label="Line 4412: for type_idx = 0;" id="3057 -> 3059"]
3067 -> 3059 [style="dashed" weight="0" label="covered by"]
3059 -> 3061 [label="Line 4412: [!(((file_handler_table[type_idx]).type) == 0)]" id="3059 -> 3061"]
3059 -> 3673 [label="Line 4412: [((file_handler_table[type_idx]).type) == 0]" id="3059 -> 3673"]
3673 -> 3690 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3673 -> 3690"]
3673 -> 3718 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3673 -> 3718"]
3718 -> 4391 [label="Line 0: " id="3718 -> 4391"]
3690 -> 3700 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3690 -> 3700"]
3700 -> 3718 [label="Line 0: " id="3700 -> 3718"]
3061 -> 3062 [label="Line 4413: int rc; int __CPAchecker_TMP_7;" id="3061 -> 3062"]
3062 -> 3063 [label="Line 4414: __CPAchecker_TMP_7 = strcmp(line, (file_handler_table[type_idx]).type);" id="3062 -> 3063"]
3063 -> 3064 [label="Line 4414: [__CPAchecker_TMP_7 == 0]" id="3063 -> 3064"]
3063 -> 3065 [label="Line 4414: [!(__CPAchecker_TMP_7 == 0)]" id="3063 -> 3065"]
3065 -> 3067 [label="Line 4412:  type_idx = type_idx + 1;" id="3065 -> 3067"]
3064 -> 3068 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mknod_line)]" id="3064 -> 3068"]
3064 -> 3069 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mknod_line))]" id="3064 -> 3069"]
3069 -> 3070 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line)]" id="3069 -> 3070"]
3069 -> 3071 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkpipe_line))]" id="3069 -> 3071"]
3071 -> 3072 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line)]" id="3071 -> 3072"]
3071 -> 3073 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkfile_line))]" id="3071 -> 3073"]
3073 -> 3074 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line)]" id="3073 -> 3074"]
3073 -> 3075 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkslink_line))]" id="3073 -> 3075"]
3075 -> 3076 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line)]" id="3075 -> 3076"]
3075 -> 3077 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mkdir_line))]" id="3075 -> 3077"]
3077 -> 3078 [label="Line 4415: [((file_handler_table[type_idx]).handler) == (&cpio_mksock_line)]" id="3077 -> 3078"]
3077 -> 3079 [label="Line 4415: [!(((file_handler_table[type_idx]).handler) == (&cpio_mksock_line))]" id="3077 -> 3079"]
3079 -> 3609 [label="Line 4415: rc = (*((file_handler_table[type_idx]).handler))(args);" id="3079 -> 3609"]
3609 -> 3627 [label="Line 4415: [!(rc == 0)]" id="3609 -> 3627"]
3609 -> 3663 [label="Line 4415: [rc == 0]" id="3609 -> 3663"]
3663 -> 3673 [label="Line 4419: break" id="3663 -> 3673"]
3627 -> 3636 [label="Line 4416: ec = rc;" id="3627 -> 3636"]
3636 -> 3645 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3636 -> 3645"]
3645 -> 3663 [label="Line 0: " id="3645 -> 3663"]
3078 -> 3081 [label="Line 4415: cpio_mksock_line(args)" id="3078 -> 3081"]
3081 -> 3082 [label="Line 0: Function start dummy edge" id="3081 -> 3082"]
3082 -> 3083 [label="Line 4025: int __CPAchecker_TMP_0;" id="3082 -> 3083"]
3083 -> 3084 [label="Line 4025: cpio_mkgeneric_line(line, 2)" id="3083 -> 3084"]
3084 -> 3085 [label="Line 0: Function start dummy edge" id="3084 -> 3085"]
3085 -> 3086 [label="Line 3996: char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3085 -> 3086"]
3086 -> 3087 [label="Line 4002: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="3086 -> 3087"]
3087 -> 3088 [label="Line 4002: [4 != __CPAchecker_TMP_0]" id="3087 -> 3088"]
3087 -> 3089 [label="Line 4002: [!(4 != __CPAchecker_TMP_0)]" id="3087 -> 3089"]
3089 -> 3090 [label="Line 4007: mode = mode | ((generic_type_table[gt]).mode);" id="3089 -> 3090"]
3090 -> 3091 [label="Line 4008: cpio_mkgeneric(name, mode, uid, gid)" id="3090 -> 3091"]
3091 -> 3092 [label="Line 0: Function start dummy edge" id="3091 -> 3092"]
3092 -> 3093 [label="Line 3943: char s[256];" id="3092 -> 3093"]
3093 -> 3094 [label="Line 3945: [(name[0]) == '/']" id="3093 -> 3094"]
3093 -> 3097 [label="Line 3945: [!((name[0]) == '/')]" id="3093 -> 3097"]
3097 -> 3098 [label="Line 3947: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3097 -> 3098"]
3098 -> 3099 [label="Line 3947: __CPAchecker_TMP_2 = strlen(name);" id="3098 -> 3099"]
3099 -> 3100 [label="Line 3947: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3099 -> 3100"]
3100 -> 3101 [label="Line 3963: push_hdr(s)" id="3100 -> 3101"]
3101 -> 3102 [label="Line 0: Function start dummy edge" id="3101 -> 3102"]
3102 -> 3103 [label="Line 3857: fputs(s, stdout);" id="3102 -> 3103"]
3103 -> 3104 [label="Line 3858: offset = offset + 110; default return" id="3103 -> 3104"]
3104 -> 3105 [label="Line 3963: Return edge from push_hdr to cpio_mkgeneric" id="3104 -> 3105"]
3105 -> 3106 [label="Line 3964: push_rest(name)" id="3105 -> 3106"]
3106 -> 3107 [label="Line 0: Function start dummy edge" id="3106 -> 3107"]
3107 -> 3108 [label="Line 3840: size_t __CPAchecker_TMP_0;" id="3107 -> 3108"]
3108 -> 3109 [label="Line 3840: __CPAchecker_TMP_0 = strlen(name);" id="3108 -> 3109"]
3109 -> 3110 [label="Line 3840: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3109 -> 3110"]
3110 -> 3111 [label="Line 3843: fputs(name, stdout);" id="3110 -> 3111"]
3111 -> 3112 [label="Line 3844: putchar(0);" id="3111 -> 3112"]
3112 -> 3114 [label="Line 3845: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3112 -> 3114"]
3119 -> 3114 [style="dashed" weight="0" label="covered by"]
3114 -> 3115 [label="Line 3848: [(tmp_ofs & 3) == 0]" id="3114 -> 3115"]
3114 -> 3116 [label="Line 3848: [!((tmp_ofs & 3) == 0)]" id="3114 -> 3116"]
3116 -> 3117 [label="Line 3849: putchar(0);" id="3116 -> 3117"]
3117 -> 3119 [label="Line 3850: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3117 -> 3119"]
3115 -> 3120 [label="Line 0: default return" id="3115 -> 3120"]
3120 -> 3121 [label="Line 3964: Return edge from push_rest to cpio_mkgeneric" id="3120 -> 3121"]
3121 -> 3122 [label="Line 3965: return 0;" id="3121 -> 3122"]
3122 -> 3123 [label="Line 4008: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="3122 -> 3123"]
3123 -> 3124 [label="Line 4009: Label: fail" id="3123 -> 3124"]
3124 -> 3127 [label="Line 4010: return rc;" id="3124 -> 3127"]
3127 -> 3129 [label="Line 4025: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="3127 -> 3129"]
3129 -> 3131 [label="Line 4025: return __CPAchecker_TMP_0;" id="3129 -> 3131"]
3131 -> 3133 [label="Line 4415: Return edge from cpio_mksock_line to main" id="3131 -> 3133"]
3133 -> 3135 [label="Line 4415: skip" id="3133 -> 3135"]
3135 -> 3611 [label="Line 4415: [!(rc == 0)]" id="3135 -> 3611"]
3135 -> 3647 [label="Line 4415: [rc == 0]" id="3135 -> 3647"]
3647 -> 3664 [label="Line 4419: break" id="3647 -> 3664"]
3664 -> 3674 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3664 -> 3674"]
3664 -> 3702 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3664 -> 3702"]
3702 -> 3720 [label="Line 0: " id="3702 -> 3720"]
3674 -> 3692 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3674 -> 3692"]
3692 -> 3702 [label="Line 0: " id="3692 -> 3702"]
3611 -> 3628 [label="Line 4416: ec = rc;" id="3611 -> 3628"]
3628 -> 3637 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3628 -> 3637"]
3637 -> 3647 [label="Line 0: " id="3637 -> 3647"]
3094 -> 3097 [label="Line 3946: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3094 -> 3097"]
3088 -> 3125 [label="Line 4003: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="3088 -> 3125"]
3125 -> 3126 [label="Line 4005: Goto: fail" id="3125 -> 3126"]
3126 -> 3128 [label="Line 4010: return rc;" id="3126 -> 3128"]
3128 -> 3130 [label="Line 4025: Return edge from cpio_mkgeneric_line to cpio_mksock_line" id="3128 -> 3130"]
3130 -> 3132 [label="Line 4025: return __CPAchecker_TMP_0;" id="3130 -> 3132"]
3132 -> 3134 [label="Line 4415: Return edge from cpio_mksock_line to main" id="3132 -> 3134"]
3134 -> 3609 [label="Line 4415: skip" id="3134 -> 3609"]
3076 -> 3138 [label="Line 4415: cpio_mkdir_line(args)" id="3076 -> 3138"]
3138 -> 3139 [label="Line 0: Function start dummy edge" id="3138 -> 3139"]
3139 -> 3140 [label="Line 4015: int __CPAchecker_TMP_0;" id="3139 -> 3140"]
3140 -> 3141 [label="Line 4015: cpio_mkgeneric_line(line, 0)" id="3140 -> 3141"]
3141 -> 3142 [label="Line 0: Function start dummy edge" id="3141 -> 3142"]
3142 -> 3143 [label="Line 3996: char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3142 -> 3143"]
3143 -> 3144 [label="Line 4002: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="3143 -> 3144"]
3144 -> 3145 [label="Line 4002: [4 != __CPAchecker_TMP_0]" id="3144 -> 3145"]
3144 -> 3146 [label="Line 4002: [!(4 != __CPAchecker_TMP_0)]" id="3144 -> 3146"]
3146 -> 3147 [label="Line 4007: mode = mode | ((generic_type_table[gt]).mode);" id="3146 -> 3147"]
3147 -> 3148 [label="Line 4008: cpio_mkgeneric(name, mode, uid, gid)" id="3147 -> 3148"]
3148 -> 3149 [label="Line 0: Function start dummy edge" id="3148 -> 3149"]
3149 -> 3150 [label="Line 3943: char s[256];" id="3149 -> 3150"]
3150 -> 3151 [label="Line 3945: [(name[0]) == '/']" id="3150 -> 3151"]
3150 -> 3154 [label="Line 3945: [!((name[0]) == '/')]" id="3150 -> 3154"]
3154 -> 3155 [label="Line 3947: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3154 -> 3155"]
3155 -> 3156 [label="Line 3947: __CPAchecker_TMP_2 = strlen(name);" id="3155 -> 3156"]
3156 -> 3157 [label="Line 3947: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3156 -> 3157"]
3157 -> 3158 [label="Line 3963: push_hdr(s)" id="3157 -> 3158"]
3158 -> 3159 [label="Line 0: Function start dummy edge" id="3158 -> 3159"]
3159 -> 3160 [label="Line 3857: fputs(s, stdout);" id="3159 -> 3160"]
3160 -> 3161 [label="Line 3858: offset = offset + 110; default return" id="3160 -> 3161"]
3161 -> 3162 [label="Line 3963: Return edge from push_hdr to cpio_mkgeneric" id="3161 -> 3162"]
3162 -> 3163 [label="Line 3964: push_rest(name)" id="3162 -> 3163"]
3163 -> 3164 [label="Line 0: Function start dummy edge" id="3163 -> 3164"]
3164 -> 3165 [label="Line 3840: size_t __CPAchecker_TMP_0;" id="3164 -> 3165"]
3165 -> 3166 [label="Line 3840: __CPAchecker_TMP_0 = strlen(name);" id="3165 -> 3166"]
3166 -> 3167 [label="Line 3840: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3166 -> 3167"]
3167 -> 3168 [label="Line 3843: fputs(name, stdout);" id="3167 -> 3168"]
3168 -> 3169 [label="Line 3844: putchar(0);" id="3168 -> 3169"]
3169 -> 3171 [label="Line 3845: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3169 -> 3171"]
3176 -> 3171 [style="dashed" weight="0" label="covered by"]
3171 -> 3172 [label="Line 3848: [(tmp_ofs & 3) == 0]" id="3171 -> 3172"]
3171 -> 3173 [label="Line 3848: [!((tmp_ofs & 3) == 0)]" id="3171 -> 3173"]
3173 -> 3174 [label="Line 3849: putchar(0);" id="3173 -> 3174"]
3174 -> 3176 [label="Line 3850: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3174 -> 3176"]
3172 -> 3177 [label="Line 0: default return" id="3172 -> 3177"]
3177 -> 3178 [label="Line 3964: Return edge from push_rest to cpio_mkgeneric" id="3177 -> 3178"]
3178 -> 3179 [label="Line 3965: return 0;" id="3178 -> 3179"]
3179 -> 3180 [label="Line 4008: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="3179 -> 3180"]
3180 -> 3181 [label="Line 4009: Label: fail" id="3180 -> 3181"]
3181 -> 3184 [label="Line 4010: return rc;" id="3181 -> 3184"]
3184 -> 3186 [label="Line 4015: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="3184 -> 3186"]
3186 -> 3188 [label="Line 4015: return __CPAchecker_TMP_0;" id="3186 -> 3188"]
3188 -> 3190 [label="Line 4415: Return edge from cpio_mkdir_line to main" id="3188 -> 3190"]
3190 -> 3192 [label="Line 4415: skip" id="3190 -> 3192"]
3192 -> 3613 [label="Line 4415: [!(rc == 0)]" id="3192 -> 3613"]
3192 -> 3649 [label="Line 4415: [rc == 0]" id="3192 -> 3649"]
3649 -> 3665 [label="Line 4419: break" id="3649 -> 3665"]
3665 -> 3676 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3665 -> 3676"]
3665 -> 3704 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3665 -> 3704"]
3704 -> 3722 [label="Line 0: " id="3704 -> 3722"]
3676 -> 3693 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3676 -> 3693"]
3693 -> 3704 [label="Line 0: " id="3693 -> 3704"]
3613 -> 3629 [label="Line 4416: ec = rc;" id="3613 -> 3629"]
3629 -> 3638 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3629 -> 3638"]
3638 -> 3649 [label="Line 0: " id="3638 -> 3649"]
3151 -> 3154 [label="Line 3946: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3151 -> 3154"]
3145 -> 3182 [label="Line 4003: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="3145 -> 3182"]
3182 -> 3183 [label="Line 4005: Goto: fail" id="3182 -> 3183"]
3183 -> 3185 [label="Line 4010: return rc;" id="3183 -> 3185"]
3185 -> 3187 [label="Line 4015: Return edge from cpio_mkgeneric_line to cpio_mkdir_line" id="3185 -> 3187"]
3187 -> 3189 [label="Line 4015: return __CPAchecker_TMP_0;" id="3187 -> 3189"]
3189 -> 3191 [label="Line 4415: Return edge from cpio_mkdir_line to main" id="3189 -> 3191"]
3191 -> 3609 [label="Line 4415: skip" id="3191 -> 3609"]
3074 -> 3195 [label="Line 4415: cpio_mkslink_line(args)" id="3074 -> 3195"]
3195 -> 3196 [label="Line 0: Function start dummy edge" id="3195 -> 3196"]
3196 -> 3197 [label="Line 3924: char name[4097]; char target[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3196 -> 3197"]
3197 -> 3198 [label="Line 3931: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d', name, target, &mode, &uid, &gid);" id="3197 -> 3198"]
3198 -> 3199 [label="Line 3931: [5 != __CPAchecker_TMP_0]" id="3198 -> 3199"]
3198 -> 3200 [label="Line 3931: [!(5 != __CPAchecker_TMP_0)]" id="3198 -> 3200"]
3200 -> 3201 [label="Line 3935: cpio_mkslink(name, target, mode, uid, gid)" id="3200 -> 3201"]
3201 -> 3202 [label="Line 0: Function start dummy edge" id="3201 -> 3202"]
3202 -> 3203 [label="Line 3894: char s[256];" id="3202 -> 3203"]
3203 -> 3204 [label="Line 3896: [(name[0]) == '/']" id="3203 -> 3204"]
3203 -> 3207 [label="Line 3896: [!((name[0]) == '/')]" id="3203 -> 3207"]
3207 -> 3208 [label="Line 3898: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3207 -> 3208"]
3208 -> 3209 [label="Line 3898: __CPAchecker_TMP_2 = strlen(target);" id="3208 -> 3209"]
3209 -> 3210 [label="Line 3898: size_t __CPAchecker_TMP_3;" id="3209 -> 3210"]
3210 -> 3211 [label="Line 3898: __CPAchecker_TMP_3 = strlen(name);" id="3210 -> 3211"]
3211 -> 3212 [label="Line 3898: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, 40960 | mode, (long)uid, (long)gid, 1, (long)default_mtime, ((unsigned)__CPAchecker_TMP_2) + 1, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_3) + 1, 0);" id="3211 -> 3212"]
3212 -> 3213 [label="Line 3914: push_hdr(s)" id="3212 -> 3213"]
3213 -> 3214 [label="Line 0: Function start dummy edge" id="3213 -> 3214"]
3214 -> 3215 [label="Line 3857: fputs(s, stdout);" id="3214 -> 3215"]
3215 -> 3216 [label="Line 3858: offset = offset + 110; default return" id="3215 -> 3216"]
3216 -> 3217 [label="Line 3914: Return edge from push_hdr to cpio_mkslink" id="3216 -> 3217"]
3217 -> 3218 [label="Line 3915: push_string(name)" id="3217 -> 3218"]
3218 -> 3219 [label="Line 0: Function start dummy edge" id="3218 -> 3219"]
3219 -> 3220 [label="Line 3823: size_t __CPAchecker_TMP_0;" id="3219 -> 3220"]
3220 -> 3221 [label="Line 3823: __CPAchecker_TMP_0 = strlen(name);" id="3220 -> 3221"]
3221 -> 3222 [label="Line 3823: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="3221 -> 3222"]
3222 -> 3223 [label="Line 3825: fputs(name, stdout);" id="3222 -> 3223"]
3223 -> 3224 [label="Line 3826: putchar(0);" id="3223 -> 3224"]
3224 -> 3225 [label="Line 3827: offset = offset + name_len; default return" id="3224 -> 3225"]
3225 -> 3226 [label="Line 3915: Return edge from push_string to cpio_mkslink" id="3225 -> 3226"]
3226 -> 3227 [label="Line 3916: push_pad()" id="3226 -> 3227"]
3227 -> 3228 [label="Line 0: Function start dummy edge" id="3227 -> 3228"]
3228 -> 3230 [label="Line 3832: while" id="3228 -> 3230"]
3235 -> 3230 [style="dashed" weight="0" label="covered by"]
3230 -> 3231 [label="Line 3832: [(offset & 3) == 0]" id="3230 -> 3231"]
3230 -> 3232 [label="Line 3832: [!((offset & 3) == 0)]" id="3230 -> 3232"]
3232 -> 3233 [label="Line 3833: putchar(0);" id="3232 -> 3233"]
3233 -> 3235 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="3233 -> 3235"]
3231 -> 3236 [label="Line 0: default return" id="3231 -> 3236"]
3236 -> 3237 [label="Line 3916: Return edge from push_pad to cpio_mkslink" id="3236 -> 3237"]
3237 -> 3238 [label="Line 3917: push_string(target)" id="3237 -> 3238"]
3238 -> 3239 [label="Line 0: Function start dummy edge" id="3238 -> 3239"]
3239 -> 3240 [label="Line 3823: size_t __CPAchecker_TMP_0;" id="3239 -> 3240"]
3240 -> 3241 [label="Line 3823: __CPAchecker_TMP_0 = strlen(name);" id="3240 -> 3241"]
3241 -> 3242 [label="Line 3823: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="3241 -> 3242"]
3242 -> 3243 [label="Line 3825: fputs(name, stdout);" id="3242 -> 3243"]
3243 -> 3244 [label="Line 3826: putchar(0);" id="3243 -> 3244"]
3244 -> 3245 [label="Line 3827: offset = offset + name_len; default return" id="3244 -> 3245"]
3245 -> 3246 [label="Line 3917: Return edge from push_string to cpio_mkslink" id="3245 -> 3246"]
3246 -> 3247 [label="Line 3918: push_pad()" id="3246 -> 3247"]
3247 -> 3248 [label="Line 0: Function start dummy edge" id="3247 -> 3248"]
3248 -> 3250 [label="Line 3832: while" id="3248 -> 3250"]
3255 -> 3250 [style="dashed" weight="0" label="covered by"]
3250 -> 3251 [label="Line 3832: [(offset & 3) == 0]" id="3250 -> 3251"]
3250 -> 3252 [label="Line 3832: [!((offset & 3) == 0)]" id="3250 -> 3252"]
3252 -> 3253 [label="Line 3833: putchar(0);" id="3252 -> 3253"]
3253 -> 3255 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="3253 -> 3255"]
3251 -> 3256 [label="Line 0: default return" id="3251 -> 3256"]
3256 -> 3257 [label="Line 3918: Return edge from push_pad to cpio_mkslink" id="3256 -> 3257"]
3257 -> 3258 [label="Line 3919: return 0;" id="3257 -> 3258"]
3258 -> 3259 [label="Line 3935: Return edge from cpio_mkslink to cpio_mkslink_line" id="3258 -> 3259"]
3259 -> 3260 [label="Line 3936: Label: fail" id="3259 -> 3260"]
3260 -> 3263 [label="Line 3937: return rc;" id="3260 -> 3263"]
3263 -> 3265 [label="Line 4415: Return edge from cpio_mkslink_line to main" id="3263 -> 3265"]
3265 -> 3267 [label="Line 4415: skip" id="3265 -> 3267"]
3267 -> 3615 [label="Line 4415: [!(rc == 0)]" id="3267 -> 3615"]
3267 -> 3651 [label="Line 4415: [rc == 0]" id="3267 -> 3651"]
3651 -> 3666 [label="Line 4419: break" id="3651 -> 3666"]
3666 -> 3678 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3666 -> 3678"]
3666 -> 3706 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3666 -> 3706"]
3706 -> 3724 [label="Line 0: " id="3706 -> 3724"]
3678 -> 3694 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3678 -> 3694"]
3694 -> 3706 [label="Line 0: " id="3694 -> 3706"]
3615 -> 3630 [label="Line 4416: ec = rc;" id="3615 -> 3630"]
3630 -> 3639 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3630 -> 3639"]
3639 -> 3651 [label="Line 0: " id="3639 -> 3651"]
3204 -> 3207 [label="Line 3897: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3204 -> 3207"]
3199 -> 3261 [label="Line 3932: fprintf(stderr, 'Unrecognized dir format '%s'', line);" id="3199 -> 3261"]
3261 -> 3262 [label="Line 3933: Goto: fail" id="3261 -> 3262"]
3262 -> 3264 [label="Line 3937: return rc;" id="3262 -> 3264"]
3264 -> 3266 [label="Line 4415: Return edge from cpio_mkslink_line to main" id="3264 -> 3266"]
3266 -> 3609 [label="Line 4415: skip" id="3266 -> 3609"]
3072 -> 3270 [label="Line 4415: cpio_mkfile_line(args)" id="3072 -> 3270"]
3270 -> 3271 [label="Line 0: Function start dummy edge" id="3270 -> 3271"]
3271 -> 3272 [label="Line 4200: char name[4097]; char *dname = (void *)0; char location[4097]; unsigned int mode; int uid; int gid; int nlinks = 1; int end = 0; int dname_len = 0; int rc = -1; int __CPAchecker_TMP_0;" id="3271 -> 3272"]
3272 -> 3273 [label="Line 4210: __CPAchecker_TMP_0 = sscanf(line, '%4096s %4096s %o %d %d %n', name, location, &mode, &uid, &gid, &end);" id="3272 -> 3273"]
3273 -> 3274 [label="Line 4210: [5 > __CPAchecker_TMP_0]" id="3273 -> 3274"]
3273 -> 3275 [label="Line 4210: [!(5 > __CPAchecker_TMP_0)]" id="3273 -> 3275"]
3275 -> 3277 [label="Line 4216: [!(end == 0)]" id="3275 -> 3277"]
3275 -> 3282 [label="Line 4216: [end == 0]" id="3275 -> 3282"]
3282 -> 3300 [label="Line 4245: dname = name; " id="3282 -> 3300"]
3300 -> 3301 [label="Line 4247: char *__CPAchecker_TMP_9;" id="3300 -> 3301"]
3301 -> 3302 [label="Line 4247: cpio_replace_env(location)" id="3301 -> 3302"]
3302 -> 3303 [label="Line 0: Function start dummy edge" id="3302 -> 3303"]
3303 -> 4706 [label="Line 4183: char expanded[4097]; char *start; char *end; char *var; while" id="3303 -> 4706"]
4725 -> 4706 [style="dashed" weight="0" label="covered by"]
4706 -> 4707 [label="Line 4186: start = strstr(new_location, '${');" id="4706 -> 4707"]
4707 -> 4709 [label="Line 4186: [!(start == 0)]" id="4707 -> 4709"]
4707 -> 4713 [label="Line 4186: [start == 0]" id="4707 -> 4713"]
4713 -> 4726 [label="Line 4195: return new_location;" id="4713 -> 4726"]
4726 -> 4727 [label="Line 4247: Return edge from cpio_replace_env to cpio_mkfile_line" id="4726 -> 4727"]
4727 -> 4728 [label="Line 4247: cpio_mkfile(dname, __CPAchecker_TMP_9, mode, uid, gid, nlinks)" id="4727 -> 4728"]
4728 -> 4729 [label="Line 0: Function start dummy edge" id="4728 -> 4729"]
4729 -> 4730 [label="Line 4087: char s[256]; char *filebuf = (void *)0; struct stat buf; long size; int file = -1; int retval; int rc = -1; int namesize; unsigned int i; mode = mode | 32768;" id="4729 -> 4730"]
4730 -> 4731 [label="Line 4099: file = open(location, 0);" id="4730 -> 4731"]
4731 -> 4732 [label="Line 4100: [file < 0]" id="4731 -> 4732"]
4731 -> 4733 [label="Line 4100: [!(file < 0)]" id="4731 -> 4733"]
4733 -> 4734 [label="Line 4105: retval = fstat(file, &buf);" id="4733 -> 4734"]
4734 -> 4735 [label="Line 4106: [retval == 0]" id="4734 -> 4735"]
4734 -> 4736 [label="Line 4106: [!(retval == 0)]" id="4734 -> 4736"]
4736 -> 4737 [label="Line 4107: fprintf(stderr, 'File %s could not be stat()'ed\n', location);" id="4736 -> 4737"]
4737 -> 4889 [label="Line 4108: Goto: l1" id="4737 -> 4889"]
4889 -> 4899 [label="Line 4171: [!(filebuf == 0)]" id="4889 -> 4899"]
4889 -> 4914 [label="Line 4171: [filebuf == 0]" id="4889 -> 4914"]
4914 -> 4923 [label="Line 4177: [file >= 0]" id="4914 -> 4923"]
4914 -> 4939 [label="Line 4177: [!(file >= 0)]" id="4914 -> 4939"]
4939 -> 4944 [label="Line 4178: return rc;" id="4939 -> 4944"]
4944 -> 4949 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="4944 -> 4949"]
4949 -> 4954 [label="Line 4249: Label: fail" id="4949 -> 4954"]
4954 -> 4964 [label="Line 4251: [!(dname_len == 0)]" id="4954 -> 4964"]
4954 -> 4979 [label="Line 4251: [dname_len == 0]" id="4954 -> 4979"]
4979 -> 4984 [label="Line 4257: return rc;" id="4979 -> 4984"]
4984 -> 4989 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="4984 -> 4989"]
4989 -> 4994 [label="Line 4415: skip" id="4989 -> 4994"]
4994 -> 5004 [label="Line 4415: [!(rc == 0)]" id="4994 -> 5004"]
4994 -> 5024 [label="Line 4415: [rc == 0]" id="4994 -> 5024"]
5024 -> 5029 [label="Line 4419: break" id="5024 -> 5029"]
5029 -> 5038 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5029 -> 5038"]
5029 -> 5054 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5029 -> 5054"]
5054 -> 5064 [label="Line 0: " id="5054 -> 5064"]
5038 -> 5044 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5038 -> 5044"]
5044 -> 5054 [label="Line 0: " id="5044 -> 5054"]
5004 -> 5009 [label="Line 4416: ec = rc;" id="5004 -> 5009"]
5009 -> 5014 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5009 -> 5014"]
5014 -> 5024 [label="Line 0: " id="5014 -> 5024"]
4964 -> 4969 [label="Line 4253: free(dname);" id="4964 -> 4969"]
4969 -> 4979 [label="Line 4255: Num = Num + 1; " id="4969 -> 4979"]
4923 -> 4929 [label="Line 4177: close(file);" id="4923 -> 4929"]
4929 -> 4939 [label="Line 0: " id="4929 -> 4939"]
4899 -> 4904 [label="Line 4173: free(filebuf);" id="4899 -> 4904"]
4904 -> 4914 [label="Line 4175: Num = Num + 1; " id="4904 -> 4914"]
4735 -> 4739 [label="Line 4111: filebuf = malloc(buf.st_size);" id="4735 -> 4739"]
4739 -> 4740 [label="Line 4113: Num = Num - 1;" id="4739 -> 4740"]
4740 -> 4741 [label="Line 4114: [Num >= 0]" id="4740 -> 4741"]
4740 -> 4742 [label="Line 4114: [!(Num >= 0)]" id="4740 -> 4742"]
4741 -> 4743 [label="Line 4114: (void)0;" id="4741 -> 4743"]
4743 -> 4744 [label="Line 4116: [filebuf == 0]" id="4743 -> 4744"]
4743 -> 4745 [label="Line 4116: [!(filebuf == 0)]" id="4743 -> 4745"]
4745 -> 4746 [label="Line 4121: retval = read(file, filebuf, buf.st_size);" id="4745 -> 4746"]
4746 -> 4747 [label="Line 4122: [retval < 0]" id="4746 -> 4747"]
4746 -> 4748 [label="Line 4122: [!(retval < 0)]" id="4746 -> 4748"]
4748 -> 4750 [label="Line 4127: size = 0; for i = 1;" id="4748 -> 4750"]
4750 -> 4751 [label="Line 4128: [i <= nlinks]" id="4750 -> 4751"]
4750 -> 4752 [label="Line 4128: [!(i <= nlinks)]" id="4750 -> 4752"]
4752 -> 4753 [label="Line 4166: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4752 -> 4753"]
4753 -> 4891 [label="Line 4171: [!(filebuf == 0)]" id="4753 -> 4891"]
4753 -> 4906 [label="Line 4171: [filebuf == 0]" id="4753 -> 4906"]
4906 -> 4915 [label="Line 4177: [file >= 0]" id="4906 -> 4915"]
4906 -> 4931 [label="Line 4177: [!(file >= 0)]" id="4906 -> 4931"]
4931 -> 4940 [label="Line 4178: return rc;" id="4931 -> 4940"]
4940 -> 4945 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="4940 -> 4945"]
4945 -> 4950 [label="Line 4249: Label: fail" id="4945 -> 4950"]
4950 -> 4956 [label="Line 4251: [!(dname_len == 0)]" id="4950 -> 4956"]
4950 -> 4971 [label="Line 4251: [dname_len == 0]" id="4950 -> 4971"]
4971 -> 4980 [label="Line 4257: return rc;" id="4971 -> 4980"]
4980 -> 4985 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="4980 -> 4985"]
4985 -> 4990 [label="Line 4415: skip" id="4985 -> 4990"]
4990 -> 4996 [label="Line 4415: [!(rc == 0)]" id="4990 -> 4996"]
4990 -> 5016 [label="Line 4415: [rc == 0]" id="4990 -> 5016"]
5016 -> 5025 [label="Line 4419: break" id="5016 -> 5025"]
5025 -> 5030 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5025 -> 5030"]
5025 -> 5046 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5025 -> 5046"]
5046 -> 5056 [label="Line 0: " id="5046 -> 5056"]
5030 -> 5040 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5030 -> 5040"]
5040 -> 5046 [label="Line 0: " id="5040 -> 5046"]
4996 -> 5005 [label="Line 4416: ec = rc;" id="4996 -> 5005"]
5005 -> 5010 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5005 -> 5010"]
5010 -> 5016 [label="Line 0: " id="5010 -> 5016"]
4956 -> 4965 [label="Line 4253: free(dname);" id="4956 -> 4965"]
4965 -> 4971 [label="Line 4255: Num = Num + 1; " id="4965 -> 4971"]
4915 -> 4925 [label="Line 4177: close(file);" id="4915 -> 4925"]
4925 -> 4931 [label="Line 0: " id="4925 -> 4931"]
4891 -> 4900 [label="Line 4173: free(filebuf);" id="4891 -> 4900"]
4900 -> 4906 [label="Line 4175: Num = Num + 1; " id="4900 -> 4906"]
4751 -> 4754 [label="Line 4130: [i == nlinks]" id="4751 -> 4754"]
4751 -> 4757 [label="Line 4130: [!(i == nlinks)]" id="4751 -> 4757"]
4757 -> 4758 [label="Line 4132: [(name[0]) == '/']" id="4757 -> 4758"]
4757 -> 4761 [label="Line 4132: [!((name[0]) == '/')]" id="4757 -> 4761"]
4761 -> 4762 [label="Line 4134: size_t __CPAchecker_TMP_2;" id="4761 -> 4762"]
4762 -> 4763 [label="Line 4134: __CPAchecker_TMP_2 = strlen(name);" id="4762 -> 4763"]
4763 -> 4764 [label="Line 4134: namesize = __CPAchecker_TMP_2 + 1;" id="4763 -> 4764"]
4764 -> 4765 [label="Line 4135: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4764 -> 4765"]
4765 -> 4766 [label="Line 4151: push_hdr(s)" id="4765 -> 4766"]
4766 -> 4767 [label="Line 0: Function start dummy edge" id="4766 -> 4767"]
4767 -> 4768 [label="Line 3857: fputs(s, stdout);" id="4767 -> 4768"]
4768 -> 4769 [label="Line 3858: offset = offset + 110; default return" id="4768 -> 4769"]
4769 -> 4770 [label="Line 4151: Return edge from push_hdr to cpio_mkfile" id="4769 -> 4770"]
4770 -> 4771 [label="Line 4152: push_string(name)" id="4770 -> 4771"]
4771 -> 4772 [label="Line 0: Function start dummy edge" id="4771 -> 4772"]
4772 -> 4773 [label="Line 3823: size_t __CPAchecker_TMP_0;" id="4772 -> 4773"]
4773 -> 4774 [label="Line 3823: __CPAchecker_TMP_0 = strlen(name);" id="4773 -> 4774"]
4774 -> 4775 [label="Line 3823: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4774 -> 4775"]
4775 -> 4776 [label="Line 3825: fputs(name, stdout);" id="4775 -> 4776"]
4776 -> 4777 [label="Line 3826: putchar(0);" id="4776 -> 4777"]
4777 -> 4778 [label="Line 3827: offset = offset + name_len; default return" id="4777 -> 4778"]
4778 -> 4779 [label="Line 4152: Return edge from push_string to cpio_mkfile" id="4778 -> 4779"]
4779 -> 4780 [label="Line 4153: push_pad()" id="4779 -> 4780"]
4780 -> 4781 [label="Line 0: Function start dummy edge" id="4780 -> 4781"]
4781 -> 4783 [label="Line 3832: while" id="4781 -> 4783"]
4788 -> 4783 [style="dashed" weight="0" label="covered by"]
4783 -> 4784 [label="Line 3832: [(offset & 3) == 0]" id="4783 -> 4784"]
4783 -> 4785 [label="Line 3832: [!((offset & 3) == 0)]" id="4783 -> 4785"]
4785 -> 4786 [label="Line 3833: putchar(0);" id="4785 -> 4786"]
4786 -> 4788 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4786 -> 4788"]
4784 -> 4789 [label="Line 0: default return" id="4784 -> 4789"]
4789 -> 4790 [label="Line 4153: Return edge from push_pad to cpio_mkfile" id="4789 -> 4790"]
4790 -> 4791 [label="Line 4155: [size == 0]" id="4790 -> 4791"]
4790 -> 4792 [label="Line 4155: [!(size == 0)]" id="4790 -> 4792"]
4792 -> 4793 [label="Line 4156: size_t __CPAchecker_TMP_3;" id="4792 -> 4793"]
4793 -> 4794 [label="Line 4156: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4793 -> 4794"]
4794 -> 4795 [label="Line 4156: [__CPAchecker_TMP_3 != 1]" id="4794 -> 4795"]
4794 -> 4796 [label="Line 4156: [!(__CPAchecker_TMP_3 != 1)]" id="4794 -> 4796"]
4796 -> 4797 [label="Line 4160: offset = offset + size;" id="4796 -> 4797"]
4797 -> 4798 [label="Line 4161: push_pad()" id="4797 -> 4798"]
4798 -> 4799 [label="Line 0: Function start dummy edge" id="4798 -> 4799"]
4799 -> 4801 [label="Line 3832: while" id="4799 -> 4801"]
4806 -> 4801 [style="dashed" weight="0" label="covered by"]
4801 -> 4802 [label="Line 3832: [(offset & 3) == 0]" id="4801 -> 4802"]
4801 -> 4803 [label="Line 3832: [!((offset & 3) == 0)]" id="4801 -> 4803"]
4803 -> 4804 [label="Line 3833: putchar(0);" id="4803 -> 4804"]
4804 -> 4806 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4804 -> 4806"]
4802 -> 4807 [label="Line 0: default return" id="4802 -> 4807"]
4807 -> 4808 [label="Line 4161: Return edge from push_pad to cpio_mkfile" id="4807 -> 4808"]
4808 -> 4809 [label="Line 0: " id="4808 -> 4809"]
4809 -> 4876 [label="Line 4128: name = name + namesize;  i = i + 1;" id="4809 -> 4876"]
4795 -> 4810 [label="Line 4157: fprintf(stderr, 'writing filebuf failed\n');" id="4795 -> 4810"]
4810 -> 4811 [label="Line 4158: Goto: l1" id="4810 -> 4811"]
4811 -> 4893 [label="Line 4171: [!(filebuf == 0)]" id="4811 -> 4893"]
4811 -> 4908 [label="Line 4171: [filebuf == 0]" id="4811 -> 4908"]
4908 -> 4917 [label="Line 4177: [file >= 0]" id="4908 -> 4917"]
4908 -> 4933 [label="Line 4177: [!(file >= 0)]" id="4908 -> 4933"]
4933 -> 4941 [label="Line 4178: return rc;" id="4933 -> 4941"]
4941 -> 4946 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="4941 -> 4946"]
4946 -> 4951 [label="Line 4249: Label: fail" id="4946 -> 4951"]
4951 -> 4958 [label="Line 4251: [!(dname_len == 0)]" id="4951 -> 4958"]
4951 -> 4973 [label="Line 4251: [dname_len == 0]" id="4951 -> 4973"]
4973 -> 4981 [label="Line 4257: return rc;" id="4973 -> 4981"]
4981 -> 4986 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="4981 -> 4986"]
4986 -> 4991 [label="Line 4415: skip" id="4986 -> 4991"]
4991 -> 4998 [label="Line 4415: [!(rc == 0)]" id="4991 -> 4998"]
4991 -> 5018 [label="Line 4415: [rc == 0]" id="4991 -> 5018"]
5018 -> 5026 [label="Line 4419: break" id="5018 -> 5026"]
5026 -> 5032 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5026 -> 5032"]
5026 -> 5048 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5026 -> 5048"]
5048 -> 5058 [label="Line 0: " id="5048 -> 5058"]
5032 -> 5041 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5032 -> 5041"]
5041 -> 5048 [label="Line 0: " id="5041 -> 5048"]
4998 -> 5006 [label="Line 4416: ec = rc;" id="4998 -> 5006"]
5006 -> 5011 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5006 -> 5011"]
5011 -> 5018 [label="Line 0: " id="5011 -> 5018"]
4958 -> 4966 [label="Line 4253: free(dname);" id="4958 -> 4966"]
4966 -> 4973 [label="Line 4255: Num = Num + 1; " id="4966 -> 4973"]
4917 -> 4926 [label="Line 4177: close(file);" id="4917 -> 4926"]
4926 -> 4933 [label="Line 0: " id="4926 -> 4933"]
4893 -> 4901 [label="Line 4173: free(filebuf);" id="4893 -> 4901"]
4901 -> 4908 [label="Line 4175: Num = Num + 1; " id="4901 -> 4908"]
4791 -> 4813 [label="Line 4128: name = name + namesize;  i = i + 1;" id="4791 -> 4813"]
4876 -> 4813 [style="dashed" weight="0" label="covered by"]
4878 -> 4813 [style="dashed" weight="0" label="covered by"]
4880 -> 4813 [style="dashed" weight="0" label="covered by"]
4813 -> 4814 [label="Line 4128: [i <= nlinks]" id="4813 -> 4814"]
4813 -> 4815 [label="Line 4128: [!(i <= nlinks)]" id="4813 -> 4815"]
4815 -> 4816 [label="Line 4166: unsigned int __CPAchecker_TMP_4 = ino; ino = ino + 1; __CPAchecker_TMP_4; rc = 0; Label: l1" id="4815 -> 4816"]
4816 -> 4895 [label="Line 4171: [!(filebuf == 0)]" id="4816 -> 4895"]
4816 -> 4910 [label="Line 4171: [filebuf == 0]" id="4816 -> 4910"]
4910 -> 4919 [label="Line 4177: [file >= 0]" id="4910 -> 4919"]
4910 -> 4935 [label="Line 4177: [!(file >= 0)]" id="4910 -> 4935"]
4935 -> 4942 [label="Line 4178: return rc;" id="4935 -> 4942"]
4942 -> 4947 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="4942 -> 4947"]
4947 -> 4952 [label="Line 4249: Label: fail" id="4947 -> 4952"]
4952 -> 4960 [label="Line 4251: [!(dname_len == 0)]" id="4952 -> 4960"]
4952 -> 4975 [label="Line 4251: [dname_len == 0]" id="4952 -> 4975"]
4975 -> 4982 [label="Line 4257: return rc;" id="4975 -> 4982"]
4982 -> 4987 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="4982 -> 4987"]
4987 -> 4992 [label="Line 4415: skip" id="4987 -> 4992"]
4992 -> 5000 [label="Line 4415: [!(rc == 0)]" id="4992 -> 5000"]
4992 -> 5020 [label="Line 4415: [rc == 0]" id="4992 -> 5020"]
5020 -> 5027 [label="Line 4419: break" id="5020 -> 5027"]
5027 -> 5034 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5027 -> 5034"]
5027 -> 5050 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5027 -> 5050"]
5050 -> 5060 [label="Line 0: " id="5050 -> 5060"]
5034 -> 5042 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5034 -> 5042"]
5042 -> 5050 [label="Line 0: " id="5042 -> 5050"]
5000 -> 5007 [label="Line 4416: ec = rc;" id="5000 -> 5007"]
5007 -> 5012 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5007 -> 5012"]
5012 -> 5020 [label="Line 0: " id="5012 -> 5020"]
4960 -> 4967 [label="Line 4253: free(dname);" id="4960 -> 4967"]
4967 -> 4975 [label="Line 4255: Num = Num + 1; " id="4967 -> 4975"]
4919 -> 4927 [label="Line 4177: close(file);" id="4919 -> 4927"]
4927 -> 4935 [label="Line 0: " id="4927 -> 4935"]
4895 -> 4902 [label="Line 4173: free(filebuf);" id="4895 -> 4902"]
4902 -> 4910 [label="Line 4175: Num = Num + 1; " id="4902 -> 4910"]
4814 -> 4817 [label="Line 4130: [i == nlinks]" id="4814 -> 4817"]
4814 -> 4820 [label="Line 4130: [!(i == nlinks)]" id="4814 -> 4820"]
4820 -> 4821 [label="Line 4132: [(name[0]) == '/']" id="4820 -> 4821"]
4820 -> 4824 [label="Line 4132: [!((name[0]) == '/')]" id="4820 -> 4824"]
4824 -> 4825 [label="Line 4134: size_t __CPAchecker_TMP_2;" id="4824 -> 4825"]
4825 -> 4826 [label="Line 4134: __CPAchecker_TMP_2 = strlen(name);" id="4825 -> 4826"]
4826 -> 4827 [label="Line 4134: namesize = __CPAchecker_TMP_2 + 1;" id="4826 -> 4827"]
4827 -> 4828 [label="Line 4135: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08lX%08X%08X%08X%08X%08X%08X', '070701', ino, mode, (long)uid, (long)gid, nlinks, (long)(buf.st_mtim.tv_sec), size, 3, 1, 0, 0, namesize, 0);" id="4827 -> 4828"]
4828 -> 4829 [label="Line 4151: push_hdr(s)" id="4828 -> 4829"]
4829 -> 4830 [label="Line 0: Function start dummy edge" id="4829 -> 4830"]
4830 -> 4831 [label="Line 3857: fputs(s, stdout);" id="4830 -> 4831"]
4831 -> 4832 [label="Line 3858: offset = offset + 110; default return" id="4831 -> 4832"]
4832 -> 4833 [label="Line 4151: Return edge from push_hdr to cpio_mkfile" id="4832 -> 4833"]
4833 -> 4834 [label="Line 4152: push_string(name)" id="4833 -> 4834"]
4834 -> 4835 [label="Line 0: Function start dummy edge" id="4834 -> 4835"]
4835 -> 4836 [label="Line 3823: size_t __CPAchecker_TMP_0;" id="4835 -> 4836"]
4836 -> 4837 [label="Line 3823: __CPAchecker_TMP_0 = strlen(name);" id="4836 -> 4837"]
4837 -> 4838 [label="Line 3823: unsigned int name_len = __CPAchecker_TMP_0 + 1;" id="4837 -> 4838"]
4838 -> 4839 [label="Line 3825: fputs(name, stdout);" id="4838 -> 4839"]
4839 -> 4840 [label="Line 3826: putchar(0);" id="4839 -> 4840"]
4840 -> 4841 [label="Line 3827: offset = offset + name_len; default return" id="4840 -> 4841"]
4841 -> 4842 [label="Line 4152: Return edge from push_string to cpio_mkfile" id="4841 -> 4842"]
4842 -> 4843 [label="Line 4153: push_pad()" id="4842 -> 4843"]
4843 -> 4844 [label="Line 0: Function start dummy edge" id="4843 -> 4844"]
4844 -> 4846 [label="Line 3832: while" id="4844 -> 4846"]
4851 -> 4846 [style="dashed" weight="0" label="covered by"]
4846 -> 4847 [label="Line 3832: [(offset & 3) == 0]" id="4846 -> 4847"]
4846 -> 4848 [label="Line 3832: [!((offset & 3) == 0)]" id="4846 -> 4848"]
4848 -> 4849 [label="Line 3833: putchar(0);" id="4848 -> 4849"]
4849 -> 4851 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4849 -> 4851"]
4847 -> 4852 [label="Line 0: default return" id="4847 -> 4852"]
4852 -> 4853 [label="Line 4153: Return edge from push_pad to cpio_mkfile" id="4852 -> 4853"]
4853 -> 4854 [label="Line 4155: [size == 0]" id="4853 -> 4854"]
4853 -> 4855 [label="Line 4155: [!(size == 0)]" id="4853 -> 4855"]
4855 -> 4856 [label="Line 4156: size_t __CPAchecker_TMP_3;" id="4855 -> 4856"]
4856 -> 4857 [label="Line 4156: __CPAchecker_TMP_3 = fwrite(filebuf, size, 1, stdout);" id="4856 -> 4857"]
4857 -> 4858 [label="Line 4156: [__CPAchecker_TMP_3 != 1]" id="4857 -> 4858"]
4857 -> 4859 [label="Line 4156: [!(__CPAchecker_TMP_3 != 1)]" id="4857 -> 4859"]
4859 -> 4860 [label="Line 4160: offset = offset + size;" id="4859 -> 4860"]
4860 -> 4861 [label="Line 4161: push_pad()" id="4860 -> 4861"]
4861 -> 4862 [label="Line 0: Function start dummy edge" id="4861 -> 4862"]
4862 -> 4864 [label="Line 3832: while" id="4862 -> 4864"]
4869 -> 4864 [style="dashed" weight="0" label="covered by"]
4864 -> 4865 [label="Line 3832: [(offset & 3) == 0]" id="4864 -> 4865"]
4864 -> 4866 [label="Line 3832: [!((offset & 3) == 0)]" id="4864 -> 4866"]
4866 -> 4867 [label="Line 3833: putchar(0);" id="4866 -> 4867"]
4867 -> 4869 [label="Line 3834: unsigned int __CPAchecker_TMP_0 = offset; offset = offset + 1; __CPAchecker_TMP_0; " id="4867 -> 4869"]
4865 -> 4870 [label="Line 0: default return" id="4865 -> 4870"]
4870 -> 4871 [label="Line 4161: Return edge from push_pad to cpio_mkfile" id="4870 -> 4871"]
4871 -> 4872 [label="Line 0: " id="4871 -> 4872"]
4872 -> 4880 [label="Line 4128: name = name + namesize;  i = i + 1;" id="4872 -> 4880"]
4858 -> 4873 [label="Line 4157: fprintf(stderr, 'writing filebuf failed\n');" id="4858 -> 4873"]
4873 -> 4874 [label="Line 4158: Goto: l1" id="4873 -> 4874"]
4874 -> 4897 [label="Line 4171: [!(filebuf == 0)]" id="4874 -> 4897"]
4874 -> 4912 [label="Line 4171: [filebuf == 0]" id="4874 -> 4912"]
4912 -> 4921 [label="Line 4177: [file >= 0]" id="4912 -> 4921"]
4912 -> 4937 [label="Line 4177: [!(file >= 0)]" id="4912 -> 4937"]
4937 -> 4943 [label="Line 4178: return rc;" id="4937 -> 4943"]
4943 -> 4948 [label="Line 4247: Return edge from cpio_mkfile to cpio_mkfile_line" id="4943 -> 4948"]
4948 -> 4953 [label="Line 4249: Label: fail" id="4948 -> 4953"]
4953 -> 4962 [label="Line 4251: [!(dname_len == 0)]" id="4953 -> 4962"]
4953 -> 4977 [label="Line 4251: [dname_len == 0]" id="4953 -> 4977"]
4977 -> 4983 [label="Line 4257: return rc;" id="4977 -> 4983"]
4983 -> 4988 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="4983 -> 4988"]
4988 -> 4993 [label="Line 4415: skip" id="4988 -> 4993"]
4993 -> 5002 [label="Line 4415: [!(rc == 0)]" id="4993 -> 5002"]
4993 -> 5022 [label="Line 4415: [rc == 0]" id="4993 -> 5022"]
5022 -> 5028 [label="Line 4419: break" id="5022 -> 5028"]
5028 -> 5036 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="5028 -> 5036"]
5028 -> 5052 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="5028 -> 5052"]
5052 -> 5062 [label="Line 0: " id="5052 -> 5062"]
5036 -> 5043 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="5036 -> 5043"]
5043 -> 5052 [label="Line 0: " id="5043 -> 5052"]
5002 -> 5008 [label="Line 4416: ec = rc;" id="5002 -> 5008"]
5008 -> 5013 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="5008 -> 5013"]
5013 -> 5022 [label="Line 0: " id="5013 -> 5022"]
4962 -> 4968 [label="Line 4253: free(dname);" id="4962 -> 4968"]
4968 -> 4977 [label="Line 4255: Num = Num + 1; " id="4968 -> 4977"]
4921 -> 4928 [label="Line 4177: close(file);" id="4921 -> 4928"]
4928 -> 4937 [label="Line 0: " id="4928 -> 4937"]
4897 -> 4903 [label="Line 4173: free(filebuf);" id="4897 -> 4903"]
4903 -> 4912 [label="Line 4175: Num = Num + 1; " id="4903 -> 4912"]
4854 -> 4878 [label="Line 4128: name = name + namesize;  i = i + 1;" id="4854 -> 4878"]
4821 -> 4824 [label="Line 4133: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4821 -> 4824"]
4817 -> 4820 [label="Line 4130: size = buf.st_size; " id="4817 -> 4820"]
4758 -> 4761 [label="Line 4133: const char *__CPAchecker_TMP_1 = name; name = name + 1; __CPAchecker_TMP_1; " id="4758 -> 4761"]
4754 -> 4757 [label="Line 4130: size = buf.st_size; " id="4754 -> 4757"]
4747 -> 4881 [label="Line 4123: fprintf(stderr, 'Can not read %s file\n', location);" id="4747 -> 4881"]
4881 -> 4889 [label="Line 4124: Goto: l1" id="4881 -> 4889"]
4744 -> 4884 [label="Line 4117: fprintf(stderr, 'out of memory\n');" id="4744 -> 4884"]
4884 -> 4889 [label="Line 4118: Goto: l1" id="4884 -> 4889"]
4732 -> 4887 [label="Line 4101: fprintf(stderr, 'File %s could not be opened for reading\n', location);" id="4732 -> 4887"]
4887 -> 4889 [label="Line 4102: Goto: l1" id="4887 -> 4889"]
4709 -> 4710 [label="Line 4186: end = strchr(start + 2, '}');" id="4709 -> 4710"]
4710 -> 4712 [label="Line 4186: [!(end == 0)]" id="4710 -> 4712"]
4710 -> 4713 [label="Line 4186: [end == 0]" id="4710 -> 4713"]
4712 -> 4714 [label="Line 4188: *end = 0; *start = *end;" id="4712 -> 4714"]
4714 -> 4715 [label="Line 4189: var = getenv(start + 2);" id="4714 -> 4715"]
4715 -> 4716 [label="Line 4190: const char *__CPAchecker_TMP_0;" id="4715 -> 4716"]
4716 -> 4717 [label="Line 4191: [var == 0]" id="4716 -> 4717"]
4716 -> 4718 [label="Line 4191: [!(var == 0)]" id="4716 -> 4718"]
4718 -> 4721 [label="Line 4191: __CPAchecker_TMP_0 = var;" id="4718 -> 4721"]
4721 -> 4722 [label="Line 4190: snprintf(expanded, 4097, '%s%s%s', new_location, __CPAchecker_TMP_0, end + 1);" id="4721 -> 4722"]
4722 -> 4723 [label="Line 4192: strcpy(new_location, expanded);" id="4722 -> 4723"]
4723 -> 4725 [label="Line 0: " id="4723 -> 4725"]
4717 -> 4721 [label="Line 4191: __CPAchecker_TMP_0 = '';" id="4717 -> 4721"]
3277 -> 3278 [label="Line 4216: const unsigned short int **__CPAchecker_TMP_1;" id="3277 -> 3278"]
3278 -> 3279 [label="Line 4216: __CPAchecker_TMP_1 = __ctype_b_loc();" id="3278 -> 3279"]
3279 -> 3281 [label="Line 4216: [!((((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0)]" id="3279 -> 3281"]
3279 -> 3282 [label="Line 4216: [(((*__CPAchecker_TMP_1)[(int)(line[end])]) & 32768U) == 0]" id="3279 -> 3282"]
3281 -> 3283 [label="Line 4217: int len; int nend; size_t __CPAchecker_TMP_2;" id="3281 -> 3283"]
3283 -> 3284 [label="Line 4220: __CPAchecker_TMP_2 = strlen(line);" id="3283 -> 3284"]
3284 -> 3285 [label="Line 4220: dname = malloc(__CPAchecker_TMP_2);" id="3284 -> 3285"]
3285 -> 3286 [label="Line 4222: Num = Num - 1;" id="3285 -> 3286"]
3286 -> 3287 [label="Line 4223: [Num >= 0]" id="3286 -> 3287"]
3286 -> 3288 [label="Line 4223: [!(Num >= 0)]" id="3286 -> 3288"]
3287 -> 3289 [label="Line 4223: (void)0;" id="3287 -> 3289"]
3289 -> 3290 [label="Line 4225: [dname == 0]" id="3289 -> 3290"]
3289 -> 3291 [label="Line 4225: [!(dname == 0)]" id="3289 -> 3291"]
3291 -> 3292 [label="Line 4230: size_t __CPAchecker_TMP_4;" id="3291 -> 3292"]
3292 -> 3293 [label="Line 4230: __CPAchecker_TMP_4 = strlen(name);" id="3292 -> 3293"]
3293 -> 3294 [label="Line 4230: dname_len = __CPAchecker_TMP_4 + 1;" id="3293 -> 3294"]
3294 -> 3295 [label="Line 4231: memcpy(dname, name, dname_len);" id="3294 -> 3295"]
3295 -> 3297 [label="Line 4233: do" id="3295 -> 3297"]
3290 -> 3298 [label="Line 4226: fprintf(stderr, 'out of memory (%d)\n', dname_len);" id="3290 -> 3298"]
3298 -> 3465 [label="Line 4227: Goto: fail" id="3298 -> 3465"]
3465 -> 3473 [label="Line 4251: [!(dname_len == 0)]" id="3465 -> 3473"]
3465 -> 3485 [label="Line 4251: [dname_len == 0]" id="3465 -> 3485"]
3485 -> 3489 [label="Line 4257: return rc;" id="3485 -> 3489"]
3489 -> 3493 [label="Line 4415: Return edge from cpio_mkfile_line to main" id="3489 -> 3493"]
3493 -> 3609 [label="Line 4415: skip" id="3493 -> 3609"]
3473 -> 3477 [label="Line 4253: free(dname);" id="3473 -> 3477"]
3477 -> 3485 [label="Line 4255: Num = Num + 1; " id="3477 -> 3485"]
3274 -> 3463 [label="Line 4213: fprintf(stderr, 'Unrecognized file format '%s'', line);" id="3274 -> 3463"]
3463 -> 3465 [label="Line 4214: Goto: fail" id="3463 -> 3465"]
3070 -> 3499 [label="Line 4415: cpio_mkpipe_line(args)" id="3070 -> 3499"]
3499 -> 3500 [label="Line 0: Function start dummy edge" id="3499 -> 3500"]
3500 -> 3501 [label="Line 4020: int __CPAchecker_TMP_0;" id="3500 -> 3501"]
3501 -> 3502 [label="Line 4020: cpio_mkgeneric_line(line, 1)" id="3501 -> 3502"]
3502 -> 3503 [label="Line 0: Function start dummy edge" id="3502 -> 3503"]
3503 -> 3504 [label="Line 3996: char name[4097]; unsigned int mode; int uid; int gid; int rc = -1; int __CPAchecker_TMP_0;" id="3503 -> 3504"]
3504 -> 3505 [label="Line 4002: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d', name, &mode, &uid, &gid);" id="3504 -> 3505"]
3505 -> 3506 [label="Line 4002: [4 != __CPAchecker_TMP_0]" id="3505 -> 3506"]
3505 -> 3507 [label="Line 4002: [!(4 != __CPAchecker_TMP_0)]" id="3505 -> 3507"]
3507 -> 3508 [label="Line 4007: mode = mode | ((generic_type_table[gt]).mode);" id="3507 -> 3508"]
3508 -> 3509 [label="Line 4008: cpio_mkgeneric(name, mode, uid, gid)" id="3508 -> 3509"]
3509 -> 3510 [label="Line 0: Function start dummy edge" id="3509 -> 3510"]
3510 -> 3511 [label="Line 3943: char s[256];" id="3510 -> 3511"]
3511 -> 3512 [label="Line 3945: [(name[0]) == '/']" id="3511 -> 3512"]
3511 -> 3515 [label="Line 3945: [!((name[0]) == '/')]" id="3511 -> 3515"]
3515 -> 3516 [label="Line 3947: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3515 -> 3516"]
3516 -> 3517 [label="Line 3947: __CPAchecker_TMP_2 = strlen(name);" id="3516 -> 3517"]
3517 -> 3518 [label="Line 3947: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 2, (long)default_mtime, 0, 3, 1, 0, 0, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3517 -> 3518"]
3518 -> 3519 [label="Line 3963: push_hdr(s)" id="3518 -> 3519"]
3519 -> 3520 [label="Line 0: Function start dummy edge" id="3519 -> 3520"]
3520 -> 3521 [label="Line 3857: fputs(s, stdout);" id="3520 -> 3521"]
3521 -> 3522 [label="Line 3858: offset = offset + 110; default return" id="3521 -> 3522"]
3522 -> 3523 [label="Line 3963: Return edge from push_hdr to cpio_mkgeneric" id="3522 -> 3523"]
3523 -> 3524 [label="Line 3964: push_rest(name)" id="3523 -> 3524"]
3524 -> 3525 [label="Line 0: Function start dummy edge" id="3524 -> 3525"]
3525 -> 3526 [label="Line 3840: size_t __CPAchecker_TMP_0;" id="3525 -> 3526"]
3526 -> 3527 [label="Line 3840: __CPAchecker_TMP_0 = strlen(name);" id="3526 -> 3527"]
3527 -> 3528 [label="Line 3840: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3527 -> 3528"]
3528 -> 3529 [label="Line 3843: fputs(name, stdout);" id="3528 -> 3529"]
3529 -> 3530 [label="Line 3844: putchar(0);" id="3529 -> 3530"]
3530 -> 3532 [label="Line 3845: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3530 -> 3532"]
3537 -> 3532 [style="dashed" weight="0" label="covered by"]
3532 -> 3533 [label="Line 3848: [(tmp_ofs & 3) == 0]" id="3532 -> 3533"]
3532 -> 3534 [label="Line 3848: [!((tmp_ofs & 3) == 0)]" id="3532 -> 3534"]
3534 -> 3535 [label="Line 3849: putchar(0);" id="3534 -> 3535"]
3535 -> 3537 [label="Line 3850: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3535 -> 3537"]
3533 -> 3538 [label="Line 0: default return" id="3533 -> 3538"]
3538 -> 3539 [label="Line 3964: Return edge from push_rest to cpio_mkgeneric" id="3538 -> 3539"]
3539 -> 3540 [label="Line 3965: return 0;" id="3539 -> 3540"]
3540 -> 3541 [label="Line 4008: Return edge from cpio_mkgeneric to cpio_mkgeneric_line" id="3540 -> 3541"]
3541 -> 3542 [label="Line 4009: Label: fail" id="3541 -> 3542"]
3542 -> 3545 [label="Line 4010: return rc;" id="3542 -> 3545"]
3545 -> 3547 [label="Line 4020: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="3545 -> 3547"]
3547 -> 3549 [label="Line 4020: return __CPAchecker_TMP_0;" id="3547 -> 3549"]
3549 -> 3551 [label="Line 4415: Return edge from cpio_mkpipe_line to main" id="3549 -> 3551"]
3551 -> 3553 [label="Line 4415: skip" id="3551 -> 3553"]
3553 -> 3623 [label="Line 4415: [!(rc == 0)]" id="3553 -> 3623"]
3553 -> 3659 [label="Line 4415: [rc == 0]" id="3553 -> 3659"]
3659 -> 3670 [label="Line 4419: break" id="3659 -> 3670"]
3670 -> 3686 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3670 -> 3686"]
3670 -> 3714 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3670 -> 3714"]
3714 -> 4387 [label="Line 0: " id="3714 -> 4387"]
3686 -> 3698 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3686 -> 3698"]
3698 -> 3714 [label="Line 0: " id="3698 -> 3714"]
3623 -> 3634 [label="Line 4416: ec = rc;" id="3623 -> 3634"]
3634 -> 3643 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3634 -> 3643"]
3643 -> 3659 [label="Line 0: " id="3643 -> 3659"]
3512 -> 3515 [label="Line 3946: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3512 -> 3515"]
3506 -> 3543 [label="Line 4003: fprintf(stderr, 'Unrecognized %s format '%s'', line, (generic_type_table[gt]).type);" id="3506 -> 3543"]
3543 -> 3544 [label="Line 4005: Goto: fail" id="3543 -> 3544"]
3544 -> 3546 [label="Line 4010: return rc;" id="3544 -> 3546"]
3546 -> 3548 [label="Line 4020: Return edge from cpio_mkgeneric_line to cpio_mkpipe_line" id="3546 -> 3548"]
3548 -> 3550 [label="Line 4020: return __CPAchecker_TMP_0;" id="3548 -> 3550"]
3550 -> 3552 [label="Line 4415: Return edge from cpio_mkpipe_line to main" id="3550 -> 3552"]
3552 -> 3609 [label="Line 4415: skip" id="3552 -> 3609"]
3068 -> 3556 [label="Line 4415: cpio_mknod_line(args)" id="3068 -> 3556"]
3556 -> 3557 [label="Line 0: Function start dummy edge" id="3556 -> 3557"]
3557 -> 3558 [label="Line 4064: char name[4097]; unsigned int mode; int uid; int gid; char dev_type; unsigned int maj; unsigned int min; int rc = -1; int __CPAchecker_TMP_0;" id="3557 -> 3558"]
3558 -> 3559 [label="Line 4073: __CPAchecker_TMP_0 = sscanf(line, '%4096s %o %d %d %c %u %u', name, &mode, &uid, &gid, &dev_type, &maj, &min);" id="3558 -> 3559"]
3559 -> 3560 [label="Line 4073: [7 != __CPAchecker_TMP_0]" id="3559 -> 3560"]
3559 -> 3561 [label="Line 4073: [!(7 != __CPAchecker_TMP_0)]" id="3559 -> 3561"]
3561 -> 3562 [label="Line 4078: cpio_mknod(name, mode, uid, gid, dev_type, maj, min)" id="3561 -> 3562"]
3562 -> 3563 [label="Line 0: Function start dummy edge" id="3562 -> 3563"]
3563 -> 3564 [label="Line 4032: char s[256];" id="3563 -> 3564"]
3564 -> 3565 [label="Line 4034: [dev_type == 'b']" id="3564 -> 3565"]
3564 -> 3566 [label="Line 4034: [!(dev_type == 'b')]" id="3564 -> 3566"]
3566 -> 3569 [label="Line 4037: mode = mode | 8192; " id="3566 -> 3569"]
3569 -> 3570 [label="Line 4039: [(name[0]) == '/']" id="3569 -> 3570"]
3569 -> 3573 [label="Line 4039: [!((name[0]) == '/')]" id="3569 -> 3573"]
3573 -> 3574 [label="Line 4041: unsigned int __CPAchecker_TMP_1 = ino; ino = ino + 1; size_t __CPAchecker_TMP_2;" id="3573 -> 3574"]
3574 -> 3575 [label="Line 4041: __CPAchecker_TMP_2 = strlen(name);" id="3574 -> 3575"]
3575 -> 3576 [label="Line 4041: sprintf(s, '%s%08X%08X%08lX%08lX%08X%08lX%08X%08X%08X%08X%08X%08X%08X', '070701', __CPAchecker_TMP_1, mode, (long)uid, (long)gid, 1, (long)default_mtime, 0, 3, 1, maj, min, ((unsigned)__CPAchecker_TMP_2) + 1, 0);" id="3575 -> 3576"]
3576 -> 3577 [label="Line 4057: push_hdr(s)" id="3576 -> 3577"]
3577 -> 3578 [label="Line 0: Function start dummy edge" id="3577 -> 3578"]
3578 -> 3579 [label="Line 3857: fputs(s, stdout);" id="3578 -> 3579"]
3579 -> 3580 [label="Line 3858: offset = offset + 110; default return" id="3579 -> 3580"]
3580 -> 3581 [label="Line 4057: Return edge from push_hdr to cpio_mknod" id="3580 -> 3581"]
3581 -> 3582 [label="Line 4058: push_rest(name)" id="3581 -> 3582"]
3582 -> 3583 [label="Line 0: Function start dummy edge" id="3582 -> 3583"]
3583 -> 3584 [label="Line 3840: size_t __CPAchecker_TMP_0;" id="3583 -> 3584"]
3584 -> 3585 [label="Line 3840: __CPAchecker_TMP_0 = strlen(name);" id="3584 -> 3585"]
3585 -> 3586 [label="Line 3840: unsigned int name_len = __CPAchecker_TMP_0 + 1; unsigned int tmp_ofs;" id="3585 -> 3586"]
3586 -> 3587 [label="Line 3843: fputs(name, stdout);" id="3586 -> 3587"]
3587 -> 3588 [label="Line 3844: putchar(0);" id="3587 -> 3588"]
3588 -> 3590 [label="Line 3845: offset = offset + name_len; tmp_ofs = name_len + 110; while" id="3588 -> 3590"]
3595 -> 3590 [style="dashed" weight="0" label="covered by"]
3590 -> 3591 [label="Line 3848: [(tmp_ofs & 3) == 0]" id="3590 -> 3591"]
3590 -> 3592 [label="Line 3848: [!((tmp_ofs & 3) == 0)]" id="3590 -> 3592"]
3592 -> 3593 [label="Line 3849: putchar(0);" id="3592 -> 3593"]
3593 -> 3595 [label="Line 3850: unsigned int __CPAchecker_TMP_1 = offset; offset = offset + 1; __CPAchecker_TMP_1; unsigned int __CPAchecker_TMP_2 = tmp_ofs; tmp_ofs = tmp_ofs + 1; __CPAchecker_TMP_2; " id="3593 -> 3595"]
3591 -> 3596 [label="Line 0: default return" id="3591 -> 3596"]
3596 -> 3597 [label="Line 4058: Return edge from push_rest to cpio_mknod" id="3596 -> 3597"]
3597 -> 3598 [label="Line 4059: return 0;" id="3597 -> 3598"]
3598 -> 3599 [label="Line 4078: Return edge from cpio_mknod to cpio_mknod_line" id="3598 -> 3599"]
3599 -> 3600 [label="Line 4079: Label: fail" id="3599 -> 3600"]
3600 -> 3603 [label="Line 4080: return rc;" id="3600 -> 3603"]
3603 -> 3605 [label="Line 4415: Return edge from cpio_mknod_line to main" id="3603 -> 3605"]
3605 -> 3607 [label="Line 4415: skip" id="3605 -> 3607"]
3607 -> 3625 [label="Line 4415: [!(rc == 0)]" id="3607 -> 3625"]
3607 -> 3661 [label="Line 4415: [rc == 0]" id="3607 -> 3661"]
3661 -> 3671 [label="Line 4419: break" id="3661 -> 3671"]
3671 -> 3688 [label="Line 4423: [((void *)0) == ((file_handler_table[type_idx]).type)]" id="3671 -> 3688"]
3671 -> 3716 [label="Line 4423: [!(((void *)0) == ((file_handler_table[type_idx]).type))]" id="3671 -> 3716"]
3716 -> 4389 [label="Line 0: " id="3716 -> 4389"]
3688 -> 3699 [label="Line 4424: fprintf(stderr, 'unknown file type line %d: '%s'\n', line_nr, line);" id="3688 -> 3699"]
3699 -> 3716 [label="Line 0: " id="3699 -> 3716"]
3625 -> 3635 [label="Line 4416: ec = rc;" id="3625 -> 3635"]
3635 -> 3644 [label="Line 4417: fprintf(stderr, ' line %d\n', line_nr);" id="3635 -> 3644"]
3644 -> 3661 [label="Line 0: " id="3644 -> 3661"]
3570 -> 3573 [label="Line 4040: const char *__CPAchecker_TMP_0 = name; name = name + 1; __CPAchecker_TMP_0; " id="3570 -> 3573"]
3565 -> 3569 [label="Line 4035: mode = mode | 24576; " id="3565 -> 3569"]
3560 -> 3601 [label="Line 4075: fprintf(stderr, 'Unrecognized nod format '%s'', line);" id="3560 -> 3601"]
3601 -> 3602 [label="Line 4076: Goto: fail" id="3601 -> 3602"]
3602 -> 3604 [label="Line 4080: return rc;" id="3602 -> 3604"]
3604 -> 3606 [label="Line 4415: Return edge from cpio_mknod_line to main" id="3604 -> 3606"]
3606 -> 3609 [label="Line 4415: skip" id="3606 -> 3609"]
3053 -> 3055 [label="Line 4406: fprintf(stderr, 'ERROR: incorrect format, newline required line %d: '%s'\n', line_nr, line);" id="3053 -> 3055"]
3055 -> 3057 [label="Line 4409: ec = -1; " id="3055 -> 3057"]
3050 -> 5066 [label="Line 4402: continue" id="3050 -> 5066"]
3046 -> 5068 [label="Line 4397: continue" id="3046 -> 5068"]
3044 -> 5069 [label="Line 4388: fprintf(stderr, 'ERROR: incorrect format, could not locate file type line %d: '%s'\n', line_nr, line);" id="3044 -> 5069"]
5069 -> 5071 [label="Line 4391: ec = -1; break" id="5069 -> 5071"]
3041 -> 5073 [label="Line 4384: continue" id="3041 -> 5073"]
3017 -> 3020 [label="Line 4370: int *__CPAchecker_TMP_2;" id="3017 -> 3020"]
3020 -> 3021 [label="Line 4370: __CPAchecker_TMP_2 = __errno_location();" id="3020 -> 3021"]
3021 -> 3022 [label="Line 4370: char *__CPAchecker_TMP_3;" id="3021 -> 3022"]
3022 -> 3023 [label="Line 4370: __CPAchecker_TMP_3 = strerror(*__CPAchecker_TMP_2);" id="3022 -> 3023"]
3023 -> 3024 [label="Line 4370: fprintf(stderr, 'ERROR: unable to open '%s': %s\n\n', filename, __CPAchecker_TMP_3);" id="3023 -> 3024"]
3024 -> 3025 [label="Line 4372: usage(argv[0])" id="3024 -> 3025"]
3025 -> 3026 [label="Line 0: Function start dummy edge" id="3025 -> 3026"]
3026 -> 3027 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="3026 -> 3027"]
3027 -> 3028 [label="Line 0: default return" id="3027 -> 3028"]
3028 -> 3029 [label="Line 4372: Return edge from usage to main" id="3028 -> 3029"]
3014 -> 3031 [label="Line 4368: cpio_list = stdin; " id="3014 -> 3031"]
3005 -> 3007 [label="Line 4363: usage(argv[0])" id="3005 -> 3007"]
3007 -> 3008 [label="Line 0: Function start dummy edge" id="3007 -> 3008"]
3008 -> 3009 [label="Line 4262: fprintf(stderr, 'Usage:\n\t%s [-t <timestamp>] <cpio_list>\n\n<cpio_list> is a file containing newline separated entries that\ndescribe the files to be included in the initramfs archive:\n\n# a comment\nfile <name> <location> <mode> <uid> <gid> [<hard links>]\ndir <name> <mode> <uid> <gid>\nnod <name> <mode> <uid> <gid> <dev_type> <maj> <min>\nslink <name> <target> <mode> <uid> <gid>\npipe <name> <mode> <uid> <gid>\nsock <name> <mode> <uid> <gid>\n\n<name>       name of the file/dir/nod/etc in the archive\n<location>   location of the file in the current filesystem\n             expands shell variables quoted with ${}\n<target>     link target\n<mode>       mode/permissions of the file\n<uid>        user id (0=root)\n<gid>        group id (0=root)\n<dev_type>   device type (b=block, c=character)\n<maj>        major number of nod\n<min>        minor number of nod\n<hard links> space separated list of other links to file\n\nexample:\n# A simple initramfs\ndir /dev 0755 0 0\nnod /dev/console 0600 0 0 c 5 1\ndir /root 0700 0 0\ndir /sbin 0755 0 0\nfile /sbin/kinit /usr/src/klibc/kinit/kinit 0755 0 0\n\n<timestamp> is time in seconds since Epoch that will be used\nas mtime for symlinks, special files and directories. The default\nis to use the current time for these entries.\n', prog);" id="3008 -> 3009"]
3009 -> 3010 [label="Line 0: default return" id="3009 -> 3010"]
3010 -> 3011 [label="Line 4363: Return edge from usage to main" id="3010 -> 3011"]
}
